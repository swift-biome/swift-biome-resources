{"culture":"_Concurrency","dependencies":[],"extensions":[],"partitions":[{"namespace":"_Concurrency","communities":[{"community":"protocol","startIndex":0,"endIndex":6},{"community":"associatedtype","startIndex":6,"endIndex":10},{"community":"enum","startIndex":10,"endIndex":16},{"community":"struct","startIndex":16,"endIndex":62},{"community":"class","startIndex":62,"endIndex":64},{"community":"enum.case","startIndex":64,"endIndex":80},{"community":"init","startIndex":80,"endIndex":91},{"community":"type.property","startIndex":91,"endIndex":107},{"community":"property","startIndex":107,"endIndex":125},{"community":"type.method","startIndex":125,"endIndex":137},{"community":"method","startIndex":137,"endIndex":256},{"community":"type.op","startIndex":256,"endIndex":264},{"community":"func","startIndex":264,"endIndex":280},{"community":"typealias","startIndex":280,"endIndex":322}]}],"identifiers":["s12_Concurrency11GlobalActorP","sScA","sScF","sScI","sScf","sSci","s12_Concurrency11GlobalActorP0C4TypeQa","sScI7ElementQa","sSci13AsyncIteratorQa","sSci7ElementQa","sScS12ContinuationV11TerminationO","sScS12ContinuationV11YieldResultO","sScS12ContinuationV15BufferingPolicyO","sScs12ContinuationV11TerminationO","sScs12ContinuationV11YieldResultO","sScs12ContinuationV15BufferingPolicyO","s12_Concurrency16AsyncMapSequenceV","s12_Concurrency16AsyncMapSequenceV8IteratorV","s12_Concurrency19AsyncFilterSequenceV","s12_Concurrency19AsyncFilterSequenceV8IteratorV","s12_Concurrency19AsyncPrefixSequenceV","s12_Concurrency19AsyncPrefixSequenceV8IteratorV","s12_Concurrency20AsyncFlatMapSequenceV","s12_Concurrency20AsyncFlatMapSequenceV8IteratorV","s12_Concurrency22AsyncDropFirstSequenceV","s12_Concurrency22AsyncDropFirstSequenceV8IteratorV","s12_Concurrency22AsyncDropWhileSequenceV","s12_Concurrency22AsyncDropWhileSequenceV8IteratorV","s12_Concurrency23AsyncCompactMapSequenceV","s12_Concurrency23AsyncCompactMapSequenceV8IteratorV","s12_Concurrency24AsyncPrefixWhileSequenceV","s12_Concurrency24AsyncPrefixWhileSequenceV8IteratorV","s12_Concurrency24AsyncThrowingMapSequenceV","s12_Concurrency24AsyncThrowingMapSequenceV8IteratorV","s12_Concurrency27AsyncThrowingFilterSequenceV","s12_Concurrency27AsyncThrowingFilterSequenceV8IteratorV","s12_Concurrency28AsyncThrowingFlatMapSequenceV","s12_Concurrency28AsyncThrowingFlatMapSequenceV8IteratorV","s12_Concurrency30AsyncThrowingDropWhileSequenceV","s12_Concurrency30AsyncThrowingDropWhileSequenceV8IteratorV","s12_Concurrency31AsyncThrowingCompactMapSequenceV","s12_Concurrency31AsyncThrowingCompactMapSequenceV8IteratorV","s12_Concurrency32AsyncThrowingPrefixWhileSequenceV","s12_Concurrency32AsyncThrowingPrefixWhileSequenceV8IteratorV","sScC","sScE","sScG","sScG8IteratorV","sScJ","sScP","sScS","sScS12ContinuationV","sScS8IteratorV","sScT","sScc","sSce","sScg","sScg8IteratorV","sScs","sScs12ContinuationV","sScs8IteratorV","sSct","s12_Concurrency9TaskLocalC","sScM","sScS12ContinuationV11TerminationO8finishedyADyx__GAFmlF","sScS12ContinuationV11TerminationO9cancelledyADyx__GAFmlF","sScS12ContinuationV11YieldResultO10terminatedyADyx__GAFmlF","sScS12ContinuationV11YieldResultO7droppedyADyx__GxcAFmlF","sScS12ContinuationV11YieldResultO8enqueuedyADyx__GSi_tcAFmlF","sScS12ContinuationV15BufferingPolicyO15bufferingNewestyADyx__GSicAFmlF","sScS12ContinuationV15BufferingPolicyO15bufferingOldestyADyx__GSicAFmlF","sScS12ContinuationV15BufferingPolicyO9unboundedyADyx__GAFmlF","sScs12ContinuationV11TerminationO8finishedyADyxq___Gq_SgcAFms5ErrorR_r0_lF","sScs12ContinuationV11TerminationO9cancelledyADyxq___GAFms5ErrorR_r0_lF","sScs12ContinuationV11YieldResultO10terminatedyADyxq___GAFms5ErrorR_r0_lF","sScs12ContinuationV11YieldResultO7droppedyADyxq___GxcAFms5ErrorR_r0_lF","sScs12ContinuationV11YieldResultO8enqueuedyADyxq___GSi_tcAFms5ErrorR_r0_lF","sScs12ContinuationV15BufferingPolicyO15bufferingNewestyADyxq___GSicAFms5ErrorR_r0_lF","sScs12ContinuationV15BufferingPolicyO15bufferingOldestyADyxq___GSicAFms5ErrorR_r0_lF","sScs12ContinuationV15BufferingPolicyO9unboundedyADyxq___GAFms5ErrorR_r0_lF","s12_Concurrency9TaskLocalC12wrappedValueACyxGx_tcfc","sS2cEycfc","sScC12continuation8functionScCyxq_GSccyxq_G_SStcfc","sScP8rawValueScPs5UInt8V_tcfc","sScS9unfolding8onCancelScSyxGxSgyYac_yyYbcSgtcfc","sScS_15bufferingPolicy_ScSyxGxm_ScS12ContinuationV09BufferingB0Oyx__GyADyx_GXEtcfc","sScT12_Concurrencys5Error_pRs_rlE8priority9operationScTyxsAB_pGScPSg_xyYaYbKcntcfc","sScT12_Concurrencys5NeverORs_rlE8priority9operationScTyxACGScPSg_xyYaYbcntcfc","sSce8ordinaryScexh_tcScfRzlufc","sScs9unfoldingScsyxs5Error_pGxSgyYaKc_tcsAB_pRs_rlufc","sScs_15bufferingPolicy_Scsyxs5Error_pGxm_Scs12ContinuationV09BufferingB0OyxsAB_p__GyAEyxsAB_p_GXEtcsAB_pRs_rlufc","s12_Concurrency11GlobalActorP21sharedUnownedExecutorScevpZ","s12_Concurrency11GlobalActorP6shared0C4TypeQzvpZ","s12_Concurrency11GlobalActorPAAE21sharedUnownedExecutorScevpZ","sScM21sharedUnownedExecutorScevpZ","sScM6sharedScMvpZ","sScP10backgroundScPvpZ","sScP11unspecifiedScPvpZ","sScP13userInitiatedScPvpZ","sScP15userInteractiveScPvpZ","sScP3lowScPvpZ","sScP4highScPvpZ","sScP6mediumScPvpZ","sScP7defaultScPvpZ","sScP7utilityScPvpZ","sScT12_Concurrencys5NeverORszACRs_rlE11isCancelledSbvpZ","sScT12_Concurrencys5NeverORszACRs_rlE15currentPriorityScPvpZ","s12_Concurrency9TaskLocalC11descriptionSSvp","s12_Concurrency9TaskLocalC12wrappedValuexvp","s12_Concurrency9TaskLocalC14projectedValueACyxGvp","sScA15unownedExecutorScevp","sScG11isCancelledSbvp","sScG7isEmptySbvp","sScM15unownedExecutorScevp","sScP8rawValues5UInt8Vvp","sScS12ContinuationV13onTerminationyAB0C0Oyx__GYbcSgvp","sScT11isCancelledSbvp","sScT12_Concurrencys5NeverORs_rlE5valuexvp","sScT5valuexvp","sScT6results6ResultOyxq_Gvp","sScg11isCancelledSbvp","sScg7isEmptySbvp","sScs12ContinuationV13onTerminationyAB0C0Oyxq___GYbcSgvp","sSct11isCancelledSbvp","sSct8priorityScPvp","sScM3run10resultType4bodyxxm_xyYbKScMYcXEtYaKs8SendableRzlFZ","sScT12_Concurrencys5Error_pRs_rlE11runDetached8priority9operationScTyxsAB_pGScPSg_xyYaYbKcntFZ","sScT12_Concurrencys5Error_pRs_rlE8detached8priority9operationScTyxsAB_pGScPSg_xyYaYbKcntFZ","sScT12_Concurrencys5NeverORs_rlE8detached8priority9operationScTyxACGScPSg_xyYaYbcntFZ","sScT12_Concurrencys5NeverORszACRs_rlE17CancellationErrorScEyFZ","sScT12_Concurrencys5NeverORszACRs_rlE17checkCancellationyyKFZ","sScT12_Concurrencys5NeverORszACRs_rlE23withCancellationHandler7handler9operationqd__yyYbXE_qd__yYaKXEtYaKlFZ","sScT12_Concurrencys5NeverORszACRs_rlE5sleep11nanosecondsys6UInt64V_tYaKFZ","sScT12_Concurrencys5NeverORszACRs_rlE5sleepyys6UInt64VYaFZ","sScT12_Concurrencys5NeverORszACRs_rlE5yieldyyYaFZ","sScT12_Concurrencys5NeverORszACRs_rlE7suspendyyYaFZ","sScT12_Concurrencys5NeverORszACRs_rlE9withGroup10resultType9returning4bodyqd_0_qd__m_qd_0_mqd_0_Scgyqd__s5Error_pGzYaKXEtYaKs8SendableRd__r0_lFZ","s12_Concurrency16AsyncMapSequenceV04makeB8IteratorAC0F0Vyxq__GyF","s12_Concurrency16AsyncMapSequenceV8IteratorV4nextq_SgyYaKF","s12_Concurrency19AsyncFilterSequenceV04makeB8IteratorAC0F0Vyx_GyF","s12_Concurrency19AsyncFilterSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency19AsyncPrefixSequenceV04makeB8IteratorAC0F0Vyx_GyF","s12_Concurrency19AsyncPrefixSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency20AsyncFlatMapSequenceV04makeB8IteratorAC0G0Vyxq__GyF","s12_Concurrency20AsyncFlatMapSequenceV8IteratorV4next7ElementQy_SgyYaKF","s12_Concurrency22AsyncDropFirstSequenceV04dropD0yACyxGSiF","s12_Concurrency22AsyncDropFirstSequenceV04makeB8IteratorAC0G0Vyx_GyF","s12_Concurrency22AsyncDropFirstSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency22AsyncDropWhileSequenceV04makeB8IteratorAC0G0Vyx_GyF","s12_Concurrency22AsyncDropWhileSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency23AsyncCompactMapSequenceV04makeB8IteratorAC0G0Vyxq__GyF","s12_Concurrency23AsyncCompactMapSequenceV8IteratorV4nextq_SgyYaKF","s12_Concurrency24AsyncPrefixWhileSequenceV04makeB8IteratorAC0G0Vyx_GyF","s12_Concurrency24AsyncPrefixWhileSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency24AsyncThrowingMapSequenceV04makeB8IteratorAC0G0Vyxq__GyF","s12_Concurrency24AsyncThrowingMapSequenceV8IteratorV4nextq_SgyYaKF","s12_Concurrency27AsyncThrowingFilterSequenceV04makeB8IteratorAC0G0Vyx_GyF","s12_Concurrency27AsyncThrowingFilterSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency28AsyncThrowingFlatMapSequenceV04makeB8IteratorAC0H0Vyxq__GyF","s12_Concurrency28AsyncThrowingFlatMapSequenceV8IteratorV4next7ElementQy_SgyYaKF","s12_Concurrency30AsyncThrowingDropWhileSequenceV04makeB8IteratorAC0H0Vyx_GyF","s12_Concurrency30AsyncThrowingDropWhileSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency31AsyncThrowingCompactMapSequenceV04makeB8IteratorAC0H0Vyxq__GyF","s12_Concurrency31AsyncThrowingCompactMapSequenceV8IteratorV4nextq_SgyYaKF","s12_Concurrency32AsyncThrowingPrefixWhileSequenceV04makeB8IteratorAC0H0Vyx_GyF","s12_Concurrency32AsyncThrowingPrefixWhileSequenceV8IteratorV4next7ElementQzSgyYaKF","s12_Concurrency9TaskLocalC3getxyF","s12_Concurrency9TaskLocalC9withValue_9operation4file4lineqd__x_qd__yKXESSSutKlF","s12_Concurrency9TaskLocalC9withValue_9operation4file4lineqd__x_qd__yYaKXESSSutYaKlF","sScC6resume4withys6ResultOyxq_G_tF","sScC6resume4withys6ResultOyxqd__G_ts5Error_pRs_sAFRd__lF","sScC6resume8throwingyq_n_tF","sScC6resume9returningyxn_tF","sScC6resumeyyytRszrlF","sScF7enqueueyyScJF","sScG10waitForAllyyYaF","sScG17makeAsyncIteratorScG0C0Vyx_GyF","sScG20asyncUnlessCancelled8priority9operationSbScPSg_xyYaYbcntF","sScG20spawnUnlessCancelled8priority9operationSbScPSg_xyYaYbcntF","sScG22addTaskUnlessCancelled8priority9operationSbScPSg_xyYaYbcntF","sScG3add8priority9operationSbScPSg_xyYaYbcntYaF","sScG4nextxSgyYaF","sScG5async8priority9operationyScPSg_xyYaYbcntF","sScG5spawn8priority9operationyScPSg_xyYaYbcntF","sScG7addTask8priority9operationyScPSg_xyYaYbcntF","sScG8IteratorV4nextxSgyYaF","sScG8IteratorV6cancelyyF","sScG9cancelAllyyF","sScI4next7ElementQzSgyYaKF","sScM7enqueueyyScJF","sScS12ContinuationV5yield4withAB11YieldResultOyx__Gs0E0Oyxs5NeverOG_tF","sScS12ContinuationV5yieldAB11YieldResultOyyt__GyytRszlF","sScS12ContinuationV5yieldyAB11YieldResultOyx__GxnF","sScS12ContinuationV6finishyyF","sScS17makeAsyncIteratorScS0C0Vyx_GyF","sScS8IteratorV4nextxSgyYaF","sScT12_Concurrencys5NeverORs_rlE3getxyYaF","sScT3getxyYaKF","sScT4hash4intoys6HasherVz_tF","sScT6cancelyyF","sScT9getResults0B0Oyxq_GyYaF","sScc6resume4withys6ResultOyxq_G_tF","sScc6resume4withys6ResultOyxqd__G_ts5Error_pRs_sAFRd__lF","sScc6resume8throwingyq_n_tF","sScc6resume9returningyxn_tF","sScc6resume9returningyxn_ts5NeverORs_rlF","sScc6resumeyyytRszrlF","sScf23asUnownedSerialExecutorSceyF","sScf7enqueueyyScJF","sScg10nextResults0B0Oyxq_GSgyYaF","sScg10waitForAllyyYaKF","sScg17makeAsyncIteratorScg0C0Vyxq__GyF","sScg20asyncUnlessCancelled8priority9operationSbScPSg_xyYaYbKcntF","sScg20spawnUnlessCancelled8priority9operationSbScPSg_xyYaYbKcntF","sScg22addTaskUnlessCancelled8priority9operationSbScPSg_xyYaYbKcntF","sScg3add8priority9operationSbScPSg_xyYaYbKcntYaF","sScg4nextxSgyYaKF","sScg5async8priority9operationyScPSg_xyYaYbKcntF","sScg5spawn8priority9operationyScPSg_xyYaYbKcntF","sScg7addTask8priority9operationyScPSg_xyYaYbKcntF","sScg8IteratorV4nextxSgyYaKF","sScg8IteratorV6cancelyyF","sScg9cancelAllyyF","sSci12_ConcurrencyE10allSatisfyyS2b7ElementQzYaKXEYaKF","sSci12_ConcurrencyE10compactMapyAA012AsyncCompactC8SequenceVyxqd__Gqd__Sg7ElementQzYaclF","sSci12_ConcurrencyE10compactMapyAA020AsyncThrowingCompactC8SequenceVyxqd__Gqd__Sg7ElementQzYaKclF","sSci12_ConcurrencyE3mapyAA16AsyncMapSequenceVyxqd__Gqd__7ElementQzYaclF","sSci12_ConcurrencyE3mapyAA24AsyncThrowingMapSequenceVyxqd__Gqd__7ElementQzYaKclF","sSci12_ConcurrencyE3max2by7ElementQzSgSbAE_AEtYaKXE_tYaKF","sSci12_ConcurrencyE3min2by7ElementQzSgSbAE_AEtYaKXE_tYaKF","sSci12_ConcurrencyE4drop5whileAA22AsyncDropWhileSequenceVyxGSb7ElementQzYac_tF","sSci12_ConcurrencyE4drop5whileAA30AsyncThrowingDropWhileSequenceVyxGSb7ElementQzYaKc_tF","sSci12_ConcurrencyE5first5where7ElementQzSgSbAEYaKXE_tYaKF","sSci12_ConcurrencyE6filteryAA19AsyncFilterSequenceVyxGSb7ElementQzYacF","sSci12_ConcurrencyE6filteryAA27AsyncThrowingFilterSequenceVyxGSb7ElementQzYaKcF","sSci12_ConcurrencyE6prefix5whileAA24AsyncPrefixWhileSequenceVyxGSb7ElementQzYac_tKF","sSci12_ConcurrencyE6prefix5whileAA32AsyncThrowingPrefixWhileSequenceVyxGSb7ElementQzYaKc_tKF","sSci12_ConcurrencyE6prefixyAA19AsyncPrefixSequenceVyxGSiF","sSci12_ConcurrencyE6reduce4into_qd__qd__n_yqd__z_7ElementQztYaKXEtYaKlF","sSci12_ConcurrencyE6reduceyqd__qd___qd__qd___7ElementQztYaKXEtYaKlF","sSci12_ConcurrencyE7flatMapyAA017AsyncThrowingFlatC8SequenceVyxqd__Gqd__7ElementQzYaKcSciRd__lF","sSci12_ConcurrencyE7flatMapyAA09AsyncFlatC8SequenceVyxqd__Gqd__7ElementQzYacSciRd__lF","sSci12_ConcurrencyE8contains5whereS2b7ElementQzYaKXE_tYaKF","sSci12_ConcurrencyE9dropFirstyAA09AsyncDropC8SequenceVyxGSiF","sSci12_ConcurrencySL7ElementRpzrlE3maxACSgyYaKF","sSci12_ConcurrencySL7ElementRpzrlE3minACSgyYaKF","sSci12_ConcurrencySQ7ElementRpzrlE8containsySbACYaKF","sSci17makeAsyncIterator0bC0QzyF","sScs12ContinuationV5yield4withAB11YieldResultOyxs5Error_p__Gs0E0OyxsAG_pG_tsAG_pRs_rlF","sScs12ContinuationV5yieldAB11YieldResultOyytq___GyytRszrlF","sScs12ContinuationV5yieldyAB11YieldResultOyxq___GxnF","sScs12ContinuationV6finish8throwingyq_Sgn_tF","sScs17makeAsyncIteratorScs0C0Vyxq__GyF","sScs8IteratorV4nextxSgyYaKF","sSct4hash4intoys6HasherVz_tF","sSct6cancelyyF","sScP1goiySbScP_ScPtFZ","sScP1loiySbScP_ScPtFZ","sScP2eeoiySbScP_ScPtFZ","sScP2geoiySbScP_ScPtFZ","sScP2leoiySbScP_ScPtFZ","sScP2neoiySbScP_ScPtFZ","sScT2eeoiySbScTyxq_G_ABtFZ","sSct2eeoiySbSct_ScttFZ","s12_Concurrency13asyncDetached8priority9operationScTyxs5Error_pGScPSg_xyYaYbKcnts8SendableRzlF","s12_Concurrency13asyncDetached8priority9operationScTyxs5NeverOGScPSg_xyYaYbcnts8SendableRzlF","s12_Concurrency13withTaskGroup2of9returning4bodyq_xm_q_mq_ScGyxGzYaXEtYas8SendableRzr0_lF","s12_Concurrency21withThrowingTaskGroup2of9returning4bodyq_xm_q_mq_Scgyxs5Error_pGzYaKXEtYaKs8SendableRzr0_lF","s12_Concurrency21withUnsafeCurrentTask4bodyxxSctSgKXE_tKlF","s12_Concurrency22withUnsafeContinuationyxySccyxs5NeverOGXEYalF","s12_Concurrency23withCheckedContinuation8function_xSS_yScCyxs5NeverOGXEtYalF","s12_Concurrency27withTaskCancellationHandler7handler9operationxyyYbXE_xyYaKXEtYaKlF","s12_Concurrency27withTaskCancellationHandler9operation8onCancelxxyYaKXE_yyYbXEtYaKlF","s12_Concurrency29swift_deletedAsyncMethodErroryyYaF","s12_Concurrency30withUnsafeThrowingContinuationyxySccyxs5Error_pGXEYaKlF","s12_Concurrency31withCheckedThrowingContinuation8function_xSS_yScCyxs5Error_pGXEtYaKlF","s12_Concurrency5async8priority9operationScTyxs5Error_pGScPSg_xyYaYbKcnts8SendableRzlF","s12_Concurrency5async8priority9operationScTyxs5NeverOGScPSg_xyYaYbcnts8SendableRzlF","s12_Concurrency6detach8priority9operationScTyxs5Error_pGScPSg_xyYaYbKcnts8SendableRzlF","s12_Concurrency6detach8priority9operationScTyxs5NeverOGScPSg_xyYaYbcnts8SendableRzlF","s12_Concurrency16AsyncMapSequenceV0B8Iteratora","s12_Concurrency16AsyncMapSequenceV7Elementa","s12_Concurrency16PartialAsyncTaska","s12_Concurrency19AsyncFilterSequenceV0B8Iteratora","s12_Concurrency19AsyncFilterSequenceV7Elementa","s12_Concurrency19AsyncPrefixSequenceV0B8Iteratora","s12_Concurrency19AsyncPrefixSequenceV7Elementa","s12_Concurrency20AsyncFlatMapSequenceV0B8Iteratora","s12_Concurrency20AsyncFlatMapSequenceV7Elementa","s12_Concurrency22AsyncDropFirstSequenceV0B8Iteratora","s12_Concurrency22AsyncDropFirstSequenceV7Elementa","s12_Concurrency22AsyncDropWhileSequenceV0B8Iteratora","s12_Concurrency22AsyncDropWhileSequenceV7Elementa","s12_Concurrency23AsyncCompactMapSequenceV0B8Iteratora","s12_Concurrency23AsyncCompactMapSequenceV7Elementa","s12_Concurrency23AsyncCompactMapSequenceV8IteratorV7Elementa","s12_Concurrency24AsyncPrefixWhileSequenceV0B8Iteratora","s12_Concurrency24AsyncPrefixWhileSequenceV7Elementa","s12_Concurrency24AsyncThrowingMapSequenceV0B8Iteratora","s12_Concurrency24AsyncThrowingMapSequenceV7Elementa","s12_Concurrency26UnsafeThrowingContinuationa","s12_Concurrency27AsyncThrowingFilterSequenceV0B8Iteratora","s12_Concurrency27AsyncThrowingFilterSequenceV7Elementa","s12_Concurrency28AsyncThrowingFlatMapSequenceV0B8Iteratora","s12_Concurrency28AsyncThrowingFlatMapSequenceV7Elementa","s12_Concurrency30AsyncThrowingDropWhileSequenceV0B8Iteratora","s12_Concurrency30AsyncThrowingDropWhileSequenceV7Elementa","s12_Concurrency31AsyncThrowingCompactMapSequenceV0B8Iteratora","s12_Concurrency31AsyncThrowingCompactMapSequenceV7Elementa","s12_Concurrency31AsyncThrowingCompactMapSequenceV8IteratorV7Elementa","s12_Concurrency32AsyncThrowingPrefixWhileSequenceV0B8Iteratora","s12_Concurrency32AsyncThrowingPrefixWhileSequenceV7Elementa","sScG13AsyncIteratora","sScG7Elementa","sScG8IteratorV7Elementa","sScP8RawValuea","sScT12_Concurrencys5NeverORszACRs_rlE5Groupa","sScT12_Concurrencys5NeverORszACRs_rlE6Handlea","sScT12_Concurrencys5NeverORszACRs_rlE8Prioritya","sScg13AsyncIteratora","sScg7Elementa","sScg8IteratorV7Elementa","sSE","sSH","sSH4hash4intoys6HasherVz_tF","sSL","sSL1goiySbx_xtFZ","sSL1loiySbx_xtFZ","sSL2geoiySbx_xtFZ","sSL2leoiySbx_xtFZ","sSLsE1goiySbx_xtFZ","sSLsE2geoiySbx_xtFZ","sSLsE2leoiySbx_xtFZ","sSLsE3zzloiySnyxGx_xtFZ","sSLsE3zzlopys16PartialRangeUpToVyxGxFZ","sSLsE3zzzoPys16PartialRangeFromVyxGxFZ","sSLsE3zzzoiySNyxGx_xtFZ","sSLsE3zzzopys19PartialRangeThroughVyxGxFZ","sSQ","sSQ2eeoiySbx_xtFZ","sSQsE2neoiySbx_xtFZ","sSS","sSY","sSY8RawValueQa","sSY8rawValue03RawB0Qzvp","sSY8rawValuexSg03RawB0Qz_tcfc","sSYsSERzs5UInt8V8RawValueSYRtzrlE6encode2toys7Encoder_p_tKF","sSYsSeRzs5UInt8V8RawValueSYRtzrlE4fromxs7Decoder_p_tKcfc","sSb","sSe","sSi","sSu","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss4Voida","ss5ErrorP","ss5NeverO","ss5UInt8V","ss6HasherV","ss6ResultO","ss6UInt64V","ss8SendableP"],"vertices":[{"p":["GlobalActor"],"f":[["protocol",12],[" ",17],["GlobalActor",7]],"s":[["protocol",12],[" ",17],["GlobalActor",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A type that represents a globally-unique actor that can be used to isolate\nvarious declarations anywhere in the program.\n\nA type that conforms to the `GlobalActor` protocol and is marked with\nthe `@globalActor` attribute can be used as a custom attribute. Such types\nare called global actor types, and can be applied to any declaration to\nspecify that such types are isolated to that global actor type. When using\nsuch a declaration from another actor (or from nonisolated code),\nsynchronization is performed through the shared actor instance to ensure\nmutually-exclusive access to the declaration."},{"p":["Actor"],"f":[["protocol",12],[" ",17],["Actor",7],[" : AnyObject, ",17],["Sendable",18,361]],"s":[["protocol",12],[" ",17],["Actor",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Common protocol to which all actors conform.\n\nThe `Actor` protocol generalizes over all actor types. Actor types\nimplicitly conform to this protocol."},{"p":["Executor"],"f":[["protocol",12],[" ",17],["Executor",7],[" : AnyObject, ",17],["Sendable",18,361]],"s":[["protocol",12],[" ",17],["Executor",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A service that can execute jobs."},{"p":["AsyncIteratorProtocol"],"f":[["@rethrows",3],[" ",17],["protocol",12],[" ",17],["AsyncIteratorProtocol",7]],"s":[["protocol",12],[" ",17],["AsyncIteratorProtocol",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A type that asynchronously supplies the values of a sequence one at a\ntime.\n\nThe `AsyncIteratorProtocol` defines the type returned by the\n`makeAsyncIterator()` method of the `AsyncSequence` protocol. In short,\nthe iterator is what produces the asynchronous sequence's values. The\nprotocol defines a single asynchronous method, `next()`, which either\nproduces the next element of the sequence, or returns `nil` to signal\nthe end of the sequence.\n\nTo implement your own `AsyncSequence`, implement a wrapped type that\nconforms to `AsyncIteratorProtocol`. The following example shows a `Counter`\ntype that uses an inner iterator to monotonically generate `Int` values\nuntil reaching a `howHigh` value. While this example isn't itself\nasychronous, it shows the shape of a custom sequence and iterator, and how\nto use it as if it were asynchronous:\n\n    struct Counter : AsyncSequence {\n        typealias Element = Int\n        let howHigh: Int\n\n        struct AsyncIterator : AsyncIteratorProtocol {\n            let howHigh: Int\n            var current = 1\n            mutating func next() async -> Int? {\n                // A genuinely asychronous implementation uses the `Task`\n                // API to check for cancellation here and return early.\n                guard current <= howHigh else {\n                    return nil\n                }\n\n                let result = current\n                current += 1\n                return result\n            }\n        }\n\n        func makeAsyncIterator() -> AsyncIterator {\n            return AsyncIterator(howHigh: howHigh)\n        }\n    }\n\nAt the call site, this looks like:\n\n    for await i in Counter(howHigh: 10) {\n      print(i, terminator: \" \")\n    }\n    // Prints: 1 2 3 4 5 6 7 8 9 10\n\n### End of Iteration\n\nThe iterator returns `nil` to indicate the end of the sequence. After\nreturning `nil` (or throwing an error) from `next()`, the iterator enters\na terminal state, and all future calls to `next()` must return `nil`.\n\n### Cancellation\n\nTypes conforming to `AsyncIteratorProtocol` should use the cancellation\nprimitives provided by Swift's `Task` API. The iterator can choose how to\nhandle and respond to cancellation, including:\n\n- Checking the `isCancelled` value of the current `Task` inside `next()`\n  and returning `nil` to terminate the sequence.\n- Calling `checkCancellation()` on the `Task`, which throws a\n  `CancellationError`.\n- Implementing `next()` with a\n  `withTaskCancellationHandler(handler:operation:)` invocation to\n  immediately react to cancellation.\n\nIf the iterator needs to clean up on cancellation, it can do so after\nchecking for cancellation as described above, or in `deinit` if it's\na reference type."},{"p":["SerialExecutor"],"f":[["protocol",12],[" ",17],["SerialExecutor",7],[" : ",17],["Executor",18,2]],"s":[["protocol",12],[" ",17],["SerialExecutor",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A service that executes jobs."},{"p":["AsyncSequence"],"f":[["@rethrows",3],[" ",17],["protocol",12],[" ",17],["AsyncSequence",7]],"s":[["protocol",12],[" ",17],["AsyncSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A type that provides asynchronous, sequential, iterated access to its\nelements.\n\nAn `AsyncSequence` resembles the `Sequence` type --- offering a list of\nvalues you can step through one at a time --- and adds asynchronicity. An\n`AsyncSequence` may have all, some, or none of its values available when\nyou first use it. Instead, you use `await` to receive values as they become\navailable.\n\nAs with `Sequence`, you typically iterate through an `AsyncSequence` with a\n`for await`-`in` loop. However, because the caller must potentially wait for values,\nyou use the `await` keyword. The following example shows how to iterate\nover `Counter`, a custom `AsyncSequence` that produces `Int` values from\n`1` up to a `howHigh` value:\n\n    for await i in Counter(howHigh: 10) {\n        print(i, terminator: \" \")\n    }\n    // Prints: 1 2 3 4 5 6 7 8 9 10\n\nAn `AsyncSequence` doesn't generate or contain the values; it just defines\nhow you access them. Along with defining the type of values as an associated\ntype called `Element`, the `AsyncSequence` defines a `makeAsyncIterator()`\nmethod. This returns an instance of type `AsyncIterator`. Like the standard\n`IteratorProtocol`, the `AsyncIteratorProtocol` defines a single `next()`\nmethod to produce elements. The difference is that the `AsyncIterator`\ndefines its `next()` method as `async`, which requires a caller to wait for\nthe next value with the `await` keyword.\n\n`AsyncSequence` also defines methods for processing the elements you\nreceive, modeled on the operations provided by the basic `Sequence` in the\nstandard library. There are two categories of methods: those that return a\nsingle value, and those that return another `AsyncSequence`.\n\nSingle-value methods eliminate the need for a `for await`-`in` loop, and instead\nlet you make a single `await` call. For example, the `contains(_:)` method\nreturns a Boolean value that indicates if a given value exists in the\n`AsyncSequence`. Given the `Counter` sequence from the previous example,\nyou can test for the existence of a sequence member with a one-line call:\n\n    let found = await Counter(howHigh: 10).contains(5) // true\n\nMethods that return another `AsyncSequence` return a type specific to the\nmethod's semantics. For example, the `.map(_:)` method returns a\n`AsyncMapSequence` (or a `AsyncThrowingMapSequence`, if the closure you\nprovide to the `map(_:)` method can throw an error). These returned\nsequences don't eagerly await the next member of the sequence, which allows\nthe caller to decide when to start work. Typically, you'll iterate over\nthese sequences with `for await`-`in`, like the base `AsyncSequence` you started\nwith. In the following example, the `map(_:)` method transforms each `Int`\nreceived from a `Counter` sequence into a `String`:\n\n    let stream = Counter(howHigh: 10)\n        .map { $0 % 2 == 0 ? \"Even\" : \"Odd\" }\n    for await s in stream {\n        print(s, terminator: \" \")\n    }\n    // Prints: Odd Even Odd Even Odd Even Odd Even Odd Even\n"},{"p":["GlobalActor","ActorType"],"f":[["associatedtype",12],[" ",17],["ActorType",7],[" : ",17],["Actor",18,1]],"s":[["associatedtype",12],[" ",17],["ActorType",7],[" : ",17],["Actor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The type of the shared actor instance that will be used to provide\nmutually-exclusive access to declarations annotated with the given global\nactor type."},{"p":["AsyncIteratorProtocol","Element"],"f":[["associatedtype",12],[" ",17],["Element",7]],"s":[["associatedtype",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["AsyncSequence","AsyncIterator"],"f":[["associatedtype",12],[" ",17],["AsyncIterator",7],[" : ",17],["AsyncIteratorProtocol",18,3]],"s":[["associatedtype",12],[" ",17],["AsyncIterator",7],[" : ",17],["AsyncIteratorProtocol",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The type of asynchronous iterator that produces elements of this\nasynchronous sequence."},{"p":["AsyncSequence","Element"],"f":[["associatedtype",12],[" ",17],["Element",7],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["Element",18],[" == ",17],["Self",18],[".",17],["AsyncIterator",18],[".",17],["Element",18]],"s":[["associatedtype",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The type of element produced by this asynchronous sequence."},{"p":["AsyncStream","Continuation","Termination"],"f":[["enum",12],[" ",17],["Termination",7]],"s":[["enum",12],[" ",17],["Termination",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"A type that indicates how the stream terminated.\n\nThe `onTermination` closure receives an instance of this type."},{"p":["AsyncStream","Continuation","YieldResult"],"f":[["enum",12],[" ",17],["YieldResult",7]],"s":[["enum",12],[" ",17],["YieldResult",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"A type that indicates the result of yielding a value to a client, by\nway of the continuation.\n\nThe various `yield` methods of `AsyncStream.Continuation` return this\ntype to indicate the success or failure of yielding an element to the\ncontinuation."},{"p":["AsyncStream","Continuation","BufferingPolicy"],"f":[["enum",12],[" ",17],["BufferingPolicy",7]],"s":[["enum",12],[" ",17],["BufferingPolicy",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"A strategy that handles exhaustion of a buffer’s capacity."},{"p":["AsyncThrowingStream","Continuation","Termination"],"f":[["enum",12],[" ",17],["Termination",7]],"s":[["enum",12],[" ",17],["Termination",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"A type that indicates how the stream terminated.\n\nThe `onTermination` closure receives an instance of this type."},{"p":["AsyncThrowingStream","Continuation","YieldResult"],"f":[["enum",12],[" ",17],["YieldResult",7]],"s":[["enum",12],[" ",17],["YieldResult",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"A type that indicates the result of yielding a value to a client, by\nway of the continuation.\n\nThe various `yield` methods of `AsyncThrowingStream.Continuation` return\nthis type to indicate the success or failure of yielding an element to\nthe continuation."},{"p":["AsyncThrowingStream","Continuation","BufferingPolicy"],"f":[["enum",12],[" ",17],["BufferingPolicy",7]],"s":[["enum",12],[" ",17],["BufferingPolicy",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"A strategy that handles exhaustion of a buffer’s capacity."},{"p":["AsyncMapSequence"],"f":[["struct",12],[" ",17],["AsyncMapSequence",7],["<",17],["Base",0],[", ",17],["Transformed",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncMapSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"An asynchronous sequence that maps the given closure over the asynchronous\nsequence’s elements."},{"p":["AsyncMapSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"The iterator that produces elements of the map sequence."},{"p":["AsyncFilterSequence"],"f":[["struct",12],[" ",17],["AsyncFilterSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncFilterSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence that contains, in order, the elements of\nthe base sequence that satisfy a given predicate."},{"p":["AsyncFilterSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the filter sequence."},{"p":["AsyncPrefixSequence"],"f":[["struct",12],[" ",17],["AsyncPrefixSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncPrefixSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence, up to a specified maximum length,\ncontaining the initial elements of a base asynchronous sequence."},{"p":["AsyncPrefixSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the prefix sequence."},{"p":["AsyncFlatMapSequence"],"f":[["struct",12],[" ",17],["AsyncFlatMapSequence",7],["<",17],["Base",0],[", ",17],["SegmentOfResult",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5],[", ",17],["SegmentOfResult",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncFlatMapSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"An asynchronous sequence that concatenates the results of calling a given\ntransformation with each element of this sequence."},{"p":["AsyncFlatMapSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"The iterator that produces elements of the flat map sequence."},{"p":["AsyncDropFirstSequence"],"f":[["struct",12],[" ",17],["AsyncDropFirstSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncDropFirstSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence which omits a specified number of elements from the\nbase asynchronous sequence, then passes through all remaining elements."},{"p":["AsyncDropFirstSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the drop-first sequence."},{"p":["AsyncDropWhileSequence"],"f":[["struct",12],[" ",17],["AsyncDropWhileSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncDropWhileSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence which omits elements from the base sequence until a\ngiven closure returns false, after which it passes through all remaining\nelements."},{"p":["AsyncDropWhileSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the drop-while sequence."},{"p":["AsyncCompactMapSequence"],"f":[["struct",12],[" ",17],["AsyncCompactMapSequence",7],["<",17],["Base",0],[", ",17],["ElementOfResult",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncCompactMapSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"An asynchronous sequence that maps a given closure over the asynchronous\nsequence’s elements, omitting results that don't return a value."},{"p":["AsyncCompactMapSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"The iterator that produces elements of the compact map sequence."},{"p":["AsyncPrefixWhileSequence"],"f":[["struct",12],[" ",17],["AsyncPrefixWhileSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncPrefixWhileSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence, containing the initial, consecutive\nelements of the base sequence that satisfy a given predicate."},{"p":["AsyncPrefixWhileSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the prefix-while sequence."},{"p":["AsyncThrowingMapSequence"],"f":[["struct",12],[" ",17],["AsyncThrowingMapSequence",7],["<",17],["Base",0],[", ",17],["Transformed",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncThrowingMapSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"An asynchronous sequence that maps the given error-throwing closure over the\nasynchronous sequence’s elements."},{"p":["AsyncThrowingMapSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"The iterator that produces elements of the map sequence."},{"p":["AsyncThrowingFilterSequence"],"f":[["struct",12],[" ",17],["AsyncThrowingFilterSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncThrowingFilterSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence that contains, in order, the elements of\nthe base sequence that satisfy the given error-throwing predicate."},{"p":["AsyncThrowingFilterSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the filter sequence."},{"p":["AsyncThrowingFlatMapSequence"],"f":[["struct",12],[" ",17],["AsyncThrowingFlatMapSequence",7],["<",17],["Base",0],[", ",17],["SegmentOfResult",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5],[", ",17],["SegmentOfResult",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncThrowingFlatMapSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"An asynchronous sequence that concatenates the results of calling a given\nerror-throwing transformation with each element of this sequence."},{"p":["AsyncThrowingFlatMapSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"The iterator that produces elements of the flat map sequence."},{"p":["AsyncThrowingDropWhileSequence"],"f":[["struct",12],[" ",17],["AsyncThrowingDropWhileSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncThrowingDropWhileSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence which omits elements from the base sequence until a\ngiven error-throwing closure returns false, after which it passes through\nall remaining elements."},{"p":["AsyncThrowingDropWhileSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the drop-while sequence."},{"p":["AsyncThrowingCompactMapSequence"],"f":[["struct",12],[" ",17],["AsyncThrowingCompactMapSequence",7],["<",17],["Base",0],[", ",17],["ElementOfResult",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncThrowingCompactMapSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"An asynchronous sequence that maps an error-throwing closure over the base\nsequence’s elements, omitting results that don't return a value."},{"p":["AsyncThrowingCompactMapSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"The iterator that produces elements of the compact map sequence."},{"p":["AsyncThrowingPrefixWhileSequence"],"f":[["struct",12],[" ",17],["AsyncThrowingPrefixWhileSequence",7],["<",17],["Base",0],["> ",17],["where",12],[" ",17],["Base",18],[" : ",17],["AsyncSequence",18,5]],"s":[["struct",12],[" ",17],["AsyncThrowingPrefixWhileSequence",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"An asynchronous sequence, containing the initial, consecutive\nelements of the base sequence that satisfy the given error-throwing\npredicate."},{"p":["AsyncThrowingPrefixWhileSequence","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The iterator that produces elements of the prefix-while sequence."},{"p":["CheckedContinuation"],"f":[["struct",12],[" ",17],["CheckedContinuation",7],["<",17],["T",0],[", ",17],["E",0],["> ",17],["where",12],[" ",17],["E",18],[" : ",17],["Error",18,355]],"s":[["struct",12],[" ",17],["CheckedContinuation",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"A mechanism to interface\nbetween synchronous and asynchronous code,\nlogging correctness violations.\n\nA *continuation* is an opaque representation of program state.\nTo create a continuation in asynchronous code,\ncall the `withUnsafeContinuation(function:_:)` or\n`withUnsafeThrowingContinuation(function:_:)` function.\nTo resume the asynchronous task,\ncall the `resume(returning:)`,\n`resume(throwing:)`,\n`resume(with:)`,\nor `resume()` method.\n\n- Important: You must call a resume method exactly once\n  on every execution path throughout the program.\n\nResuming from a continuation more than once is undefined behavior.\nNever resuming leaves the task in a suspended state indefinitely,\nand leaks any associated resources.\n`CheckedContinuation` logs a message\nif either of these invariants is violated.\n\n`CheckedContinuation` performs runtime checks\nfor missing or multiple resume operations.\n`UnsafeContinuation` avoids enforcing these invariants at runtime\nbecause it aims to be a low-overhead mechanism\nfor interfacing Swift tasks with\nevent loops, delegate methods, callbacks,\nand other non-`async` scheduling mechanisms.\nHowever, during development, the ability to verify that the\ninvariants are being upheld in testing is important.\nBecause both types have the same interface,\nyou can replace one with the other in most circumstances,\nwithout making other changes."},{"p":["CancellationError"],"f":[["struct",12],[" ",17],["CancellationError",7]],"s":[["struct",12],[" ",17],["CancellationError",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"An error that indicates a task was canceled.\n\nThis error is also thrown automatically by `Task.checkCancellation()`,\nif the current task has been canceled."},{"p":["TaskGroup"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["TaskGroup",7],["<",17],["ChildTaskResult",0],["> ",17],["where",12],[" ",17],["ChildTaskResult",18],[" : ",17],["Sendable",18,361]],"s":[["struct",12],[" ",17],["TaskGroup",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"A group that contains dynamically created child tasks.\n\nTo create a task group,\ncall the `withTaskGroup(of:returning:body:)` method.\n\nDon't use a task group from outside the task where you created it.\nIn most cases,\nthe Swift type system prevents a task group from escaping like that\nbecause adding a child task to a task group is a mutating operation,\nand mutation operations can't be performed\nfrom a concurrent execution context like a child task.\n\nFor information about the language-level concurrency model that `TaskGroup` is part of,\nsee [Concurrency][concurrency] in [The Swift Programming Language][tspl].\n\n[concurrency]: https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html\n[tspl]: https://docs.swift.org/swift-book/\n"},{"p":["TaskGroup","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"A type that provides an iteration interface\nover the results of tasks added to the group.\n\nThe elements returned by this iterator\nappear in the order that the tasks *completed*,\nnot in the order that those tasks were added to the task group.\n\nThis iterator terminates after all tasks have completed.\nAfter iterating over the results of each task,\nit's valid to make a new iterator for the task group,\nwhich you can use to iterate over the results of new tasks you add to the group.\nFor example:\n\n    group.addTask { 1 }\n    for await r in group { print(r) }\n\n    // Add a new child task and iterate again.\n    group.addTask { 2 }\n    for await r in group { print(r) }\n\n- SeeAlso: `TaskGroup.next()`"},{"p":["UnownedJob"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["UnownedJob",7]],"s":[["struct",12],[" ",17],["UnownedJob",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A unit of scheduleable work.\n\nUnless you're implementing a scheduler,\nyou don't generally interact with jobs directly."},{"p":["TaskPriority"],"f":[["struct",12],[" ",17],["TaskPriority",7]],"s":[["struct",12],[" ",17],["TaskPriority",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The priority of a task.\n\nThe executor determines how priority information affects the way tasks are scheduled.\nThe behavior varies depending on the executor currently being used.\nTypically, executors attempt to run tasks with a higher priority\nbefore tasks with a lower priority.\nHowever, the semantics of how priority is treated are left up to each\nplatform and `Executor` implementation.\n\nChild tasks automatically inherit their parent task's priority.\nDetached tasks created by `detach(priority:operation:)` don't inherit task priority\nbecause they aren't attached to the current task.\n\nIn some situations the priority of a task is elevated ---\nthat is, the task is treated as it if had a higher priority,\nwithout actually changing the priority of the task:\n\n- If a task runs on behalf of an actor,\n  and a new higher-priority task is enqueued to the actor,\n  then the actor's current task is temporarily elevated\n  to the priority of the enqueued task.\n  This priority elevation allows the new task\n  to be processed at the priority it was enqueued with.\n- If a a higher-priority task calls the `get()` method,\n  then the priority of this task increases until the task completes.\n\nIn both cases, priority elevation helps you prevent a low-priority task\nfrom blocking the execution of a high priority task,\nwhich is also known as *priority inversion*."},{"p":["AsyncStream"],"f":[["struct",12],[" ",17],["AsyncStream",7],["<",17],["Element",0],[">",17]],"s":[["struct",12],[" ",17],["AsyncStream",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"An asynchronous sequence generated from a closure that calls a continuation\nto produce new elements.\n\n`AsyncStream` conforms to `AsyncSequence`, providing a convenient way to\ncreate an asynchronous sequence without manually implementing an\nasynchronous iterator. In particular, an asynchronous stream is well-suited\nto adapt callback- or delegation-based APIs to participate with\n`async`-`await`.\n\nYou initialize an `AsyncStream` with a closure that receives an\n`AsyncStream.Continuation`. Produce elements in this closure, then provide\nthem to the stream by calling the continuation's `yield(_:)` method. When\nthere are no further elements to produce, call the continuation's\n`finish()` method. This causes the sequence iterator to produce a `nil`,\nwhich terminates the sequence. The continuation conforms to `Sendable`, which permits\ncalling it from concurrent contexts external to the iteration of the\n`AsyncStream`.\n\nAn arbitrary source of elements can produce elements faster than they are\nconsumed by a caller iterating over them. Because of this, `AsyncStream`\ndefines a buffering behavior, allowing the stream to buffer a specific\nnumber of oldest or newest elements. By default, the buffer limit is\n`Int.max`, which means the value is unbounded.\n\n### Adapting Existing Code to Use Streams\n\nTo adapt existing callback code to use `async`-`await`, use the callbacks\nto provide values to the stream, by using the continuation's `yield(_:)`\nmethod.\n\nConsider a hypothetical `QuakeMonitor` type that provides callers with\n`Quake` instances every time it detects an earthquake. To receive callbacks,\ncallers set a custom closure as the value of the monitor's\n`quakeHandler` property, which the monitor calls back as necessary.\n\n    class QuakeMonitor {\n        var quakeHandler: ((Quake) -> Void)?\n\n        func startMonitoring() {…}\n        func stopMonitoring() {…}\n    }\n\nTo adapt this to use `async`-`await`, extend the `QuakeMonitor` to add a\n`quakes` property, of type `AsyncStream<Quake>`. In the getter for this\nproperty, return an `AsyncStream`, whose `build` closure -- called at\nruntime to create the stream -- uses the continuation to perform the\nfollowing steps:\n\n1. Creates a `QuakeMonitor` instance.\n2. Sets the monitor's `quakeHandler` property to a closure that receives\neach `Quake` instance and forwards it to the stream by calling the\ncontinuation's `yield(_:)` method.\n3. Sets the continuation's `onTermination` property to a closure that\ncalls `stopMonitoring()` on the monitor.\n4. Calls `startMonitoring` on the `QuakeMonitor`.\n\n    extension QuakeMonitor {\n\n        static var quakes: AsyncStream<Quake> {\n            AsyncStream { continuation in\n                let monitor = QuakeMonitor()\n                monitor.quakeHandler = { quake in\n                    continuation.yield(quake)\n                }\n                continuation.onTermination = { @Sendable _ in\n                    monitor.stopMonitoring()\n                }\n                monitor.startMonitoring()\n            }\n        }\n    }\n\nBecause the stream is an `AsyncSequence`, the call point can use the\n`for`-`await`-`in` syntax to process each `Quake` instance as the stream\nproduces it:\n\n    for await quake in QuakeMonitor.quakes {\n        print (\"Quake: \\(quake.date)\")\n    }\n    print (\"Stream finished.\")\n"},{"p":["AsyncStream","Continuation"],"f":[["struct",12],[" ",17],["Continuation",7]],"s":[["struct",12],[" ",17],["Continuation",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"A mechanism to interface between synchronous code and an asynchronous\nstream.\n\nThe closure you provide to the `AsyncStream` in\n`init(_:bufferingPolicy:_:)` receives an instance of this type when\ninvoked. Use this continuation to provide elements to the stream by\ncalling one of the `yield` methods, then terminate the stream normally by\ncalling the `finish()` method.\n\n- Note: Unlike other continuations in Swift, `AsyncStream.Continuation`\nsupports escaping."},{"p":["AsyncStream","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"The asynchronous iterator for iterating an asynchronous stream.\n\nThis type doesn't conform to `Sendable`. Don't use it from multiple\nconcurrent contexts. It is a programmer error to invoke `next()` from a\nconcurrent context that contends with another such call, which\nresults in a call to `fatalError()`."},{"p":["Task"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["Task",7],["<",17],["Success",0],[", ",17],["Failure",0],["> ",17],["where",12],[" ",17],["Success",18],[" : ",17],["Sendable",18,361],[", ",17],["Failure",18],[" : ",17],["Error",18,355]],"s":[["struct",12],[" ",17],["Task",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["Success",0,0],["Failure",1,0]],"d":"A unit of asynchronous work.\n\nWhen you create an instance of `Task`,\nyou provide a closure that contains the work for that task to perform.\nTasks can start running immediately after creation;\nyou don't explicitly start or schedule them.\nAfter creating a task, you use the instance to interact with it ---\nfor example, to wait for it to complete or to cancel it.\nIt's not a programming error to discard a reference to a task\nwithout waiting for that task to finish or canceling it.\nA task runs regardless of whether you keep a reference to it.\nHowever, if you discard the reference to a task,\nyou give up the ability\nto wait for that task's result or cancel the task.\n\nTo support operations on the current task,\nwhich can be either a detached task or child task,\n`Task` also exposes class methods like `yield()`.\nBecause these methods are asynchronous,\nthey're always invoked as part of an existing task.\n\nOnly code that's running as part of the task can interact with that task.\nTo interact with the current task,\nyou call one of the static methods on `Task`.\n\nA task's execution can be seen as a series of periods where the task ran.\nEach such period ends at a suspension point or the\ncompletion of the task.\nThese periods of execution are represented by instances of `PartialAsyncTask`.\nUnless you're implementing a custom executor,\nyou don't directly interact with partial tasks.\n\nFor information about the language-level concurrency model that `Task` is part of,\nsee [Concurrency][concurrency] in [The Swift Programming Language][tspl].\n\n[concurrency]: https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html\n[tspl]: https://docs.swift.org/swift-book/\n\nTask Cancellation\n=================\n\nTasks include a shared mechanism for indicating cancellation,\nbut not a shared implementation for how to handle cancellation.\nDepending on the work you're doing in the task,\nthe correct way to stop that work varies.\nLikewise,\nit's the responsibility of the code running as part of the task\nto check for cancellation whenever stopping is appropriate.\nIn a long-task that includes multiple pieces,\nyou might need to check for cancellation at several points,\nand handle cancellation differently at each point.\nIf you only need to throw an error to stop the work,\ncall the `Task.checkCancellation()` function to check for cancellation.\nOther responses to cancellation include\nreturning the work completed so far, returning an empty result, or returning `nil`.\n\nCancellation is a purely Boolean state;\nthere's no way to include additional information\nlike the reason for cancellation.\nThis reflects the fact that a task can be canceled for many reasons,\nand additional reasons can accrue during the cancellation process."},{"p":["UnsafeContinuation"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["UnsafeContinuation",7],["<",17],["T",0],[", ",17],["E",0],["> ",17],["where",12],[" ",17],["E",18],[" : ",17],["Error",18,355]],"s":[["struct",12],[" ",17],["UnsafeContinuation",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"A mechanism to interface\nbetween synchronous and asynchronous code,\nwithout correctness checking.\n\nA *continuation* is an opaque representation of program state.\nTo create a continuation in asynchronous code,\ncall the `withUnsafeContinuation(_:)` or\n`withUnsafeThrowingContinuation(_:)` function.\nTo resume the asynchronous task,\ncall the `resume(returning:)`,\n`resume(throwing:)`,\n`resume(with:)`,\nor `resume()` method.\n\n- Important: You must call a resume method exactly once\n  on every execution path throughout the program.\n  Resuming from a continuation more than once is undefined behavior.\n  Never resuming leaves the task in a suspended state indefinitely,\n  and leaks any associated resources.\n\n`CheckedContinuation` performs runtime checks\nfor missing or multiple resume operations.\n`UnsafeContinuation` avoids enforcing these invariants at runtime\nbecause it aims to be a low-overhead mechanism\nfor interfacing Swift tasks with\nevent loops, delegate methods, callbacks,\nand other non-`async` scheduling mechanisms.\nHowever, during development, the ability to verify that the\ninvariants are being upheld in testing is important.\nBecause both types have the same interface,\nyou can replace one with the other in most circumstances,\nwithout making other changes."},{"p":["UnownedSerialExecutor"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["UnownedSerialExecutor",7]],"s":[["struct",12],[" ",17],["UnownedSerialExecutor",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"An unowned reference to a serial executor (a `SerialExecutor`\nvalue).\n\nThis is an optimized type used internally by the core scheduling\noperations.  It is an unowned reference to avoid unnecessary\nreference-counting work even when working with actors abstractly.\nGenerally there are extra constraints imposed on core operations\nin order to allow this.  For example, keeping an actor alive must\nalso keep the actor's associated executor alive; if they are\ndifferent objects, the executor must be referenced strongly by the\nactor."},{"p":["ThrowingTaskGroup"],"f":[["@frozen",3],[" ",17],["struct",12],[" ",17],["ThrowingTaskGroup",7],["<",17],["ChildTaskResult",0],[", ",17],["Failure",0],["> ",17],["where",12],[" ",17],["ChildTaskResult",18],[" : ",17],["Sendable",18,361],[", ",17],["Failure",18],[" : ",17],["Error",18,355]],"s":[["struct",12],[" ",17],["ThrowingTaskGroup",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"A group that contains throwing, dynamically created child tasks.\n\nTo create a throwing task group,\ncall the `withThrowingTaskGroup(of:returning:body:)` method.\n\nDon't use a task group from outside the task where you created it.\nIn most cases,\nthe Swift type system prevents a task group from escaping like that\nbecause adding a child task to a task group is a mutating operation,\nand mutation operations can't be performed\nfrom concurrent execution contexts like a child task.\n\nFor information about the language-level concurrency model that `ThrowingTaskGroup` is part of,\nsee [Concurrency][concurrency] in [The Swift Programming Language][tspl].\n\n[concurrency]: https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html\n[tspl]: https://docs.swift.org/swift-book/\n"},{"p":["ThrowingTaskGroup","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"A type that provides an iteration interface\nover the results of tasks added to the group.\n\nThe elements returned by this iterator\nappear in the order that the tasks *completed*,\nnot in the order that those tasks were added to the task group.\n\nThis iterator terminates after all tasks have completed successfully,\nor after any task completes by throwing an error.\nIf a task completes by throwing an error,\nit doesn't return any further task results.\nAfter iterating over the results of each task,\nit's valid to make a new iterator for the task group,\nwhich you can use to iterate over the results of new tasks you add to the group.\nYou can also make a new iterator to resume iteration\nafter a child task thows an error.\nFor example:\n\n    group.addTask { 1 }\n    group.addTask { throw SomeError }\n    group.addTask { 2 }\n    \n    do { \n        // Assuming the child tasks complete in order, this prints \"1\"\n        // and then throws an error.\n        for try await r in group { print(r) }\n    } catch {\n        // Resolve the error.\n    }\n    \n    // Assuming the child tasks complete in order, this prints \"2\".\n    for try await r in group { print(r) }\n\n- SeeAlso: `ThrowingTaskGroup.next()`"},{"p":["AsyncThrowingStream"],"f":[["struct",12],[" ",17],["AsyncThrowingStream",7],["<",17],["Element",0],[", ",17],["Failure",0],["> ",17],["where",12],[" ",17],["Failure",18],[" : ",17],["Error",18,355]],"s":[["struct",12],[" ",17],["AsyncThrowingStream",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"An asynchronous sequence generated from an error-throwing closure that\ncalls a continuation to produce new elements.\n\n`AsyncThrowingStream` conforms to `AsyncSequence`, providing a convenient\nway to create an asynchronous sequence without manually implementing an\nasynchronous iterator. In particular, an asynchronous stream is well-suited\nto adapt callback- or delegation-based APIs to participate with\n`async`-`await`.\n\nIn contrast to `AsyncStream`, this type can throw an error from the awaited\n`next()`, which terminates the stream with the thrown error.\n\nYou initialize an `AsyncThrowingStream` with a closure that receives an\n`AsyncThrowingStream.Continuation`. Produce elements in this closure, then\nprovide them to the stream by calling the continuation's `yield(_:)` method.\nWhen there are no further elements to produce, call the continuation's\n`finish()` method. This causes the sequence iterator to produce a `nil`,\nwhich terminates the sequence. If an error occurs, call the continuation's\n`finish(throwing:)` method, which causes the iterator's `next()` method to\nthrow the error to the awaiting call point. The continuation is `Sendable`,\nwhich permits calling it from concurrent contexts external to the iteration\nof the `AsyncThrowingStream`.\n\nAn arbitrary source of elements can produce elements faster than they are\nconsumed by a caller iterating over them. Because of this, `AsyncThrowingStream`\ndefines a buffering behavior, allowing the stream to buffer a specific\nnumber of oldest or newest elements. By default, the buffer limit is\n`Int.max`, which means it's unbounded.\n\n### Adapting Existing Code to Use Streams\n\nTo adapt existing callback code to use `async`-`await`, use the callbacks\nto provide values to the stream, by using the continuation's `yield(_:)`\nmethod.\n\nConsider a hypothetical `QuakeMonitor` type that provides callers with\n`Quake` instances every time it detects an earthquake. To receive callbacks,\ncallers set a custom closure as the value of the monitor's\n`quakeHandler` property, which the monitor calls back as necessary. Callers\ncan also set an `errorHandler` to receive asychronous error notifications,\nsuch as the monitor service suddenly becoming unavailable.\n\n    class QuakeMonitor {\n        var quakeHandler: ((Quake) -> Void)?\n        var errorHandler: ((Error) -> Void)?\n\n        func startMonitoring() {…}\n        func stopMonitoring() {…}\n    }\n\nTo adapt this to use `async`-`await`, extend the `QuakeMonitor` to add a\n`quakes` property, of type `AsyncThrowingStream<Quake>`. In the getter for\nthis property, return an `AsyncThrowingStream`, whose `build` closure --\ncalled at runtime to create the stream -- uses the continuation to\nperform the following steps:\n\n1. Creates a `QuakeMonitor` instance.\n2. Sets the monitor's `quakeHandler` property to a closure that receives\neach `Quake` instance and forwards it to the stream by calling the\ncontinuation's `yield(_:)` method.\n3. Sets the monitor's `errorHandler` property to a closure that receives\nany error from the monitor and forwards it to the stream by calling the\ncontinuation's `finish(throwing:)` method. This causes the stream's\niterator to throw the error and terminate the stream.\n4. Sets the continuation's `onTermination` property to a closure that\ncalls `stopMonitoring()` on the monitor.\n5. Calls `startMonitoring` on the `QuakeMonitor`.\n\n    extension QuakeMonitor {\n\n        static var throwingQuakes: AsyncThrowingStream<Quake, Error> {\n            AsyncThrowingStream { continuation in\n                let monitor = QuakeMonitor()\n                monitor.quakeHandler = { quake in\n                    continuation.yield(quake)\n                }\n                monitor.errorHandler = { error in\n                    continuation.finish(throwing: error)\n                }\n                continuation.onTermination = { @Sendable _ in\n                    monitor.stopMonitoring()\n                }\n                monitor.startMonitoring()\n            }\n        }\n    }\n\n\nBecause the stream is an `AsyncSequence`, the call point uses the\n`for`-`await`-`in` syntax to process each `Quake` instance as produced by the stream:\n\n    do {\n        for try await quake in quakeStream {\n            print (\"Quake: \\(quake.date)\")\n        }\n        print (\"Stream done.\")\n    } catch {\n        print (\"Error: \\(error)\")\n    }\n"},{"p":["AsyncThrowingStream","Continuation"],"f":[["struct",12],[" ",17],["Continuation",7]],"s":[["struct",12],[" ",17],["Continuation",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"A mechanism to interface between synchronous code and an asynchronous\nstream.\n\nThe closure you provide to the `AsyncThrowingStream` in\n`init(_:bufferingPolicy:_:)` receives an instance of this type when\ninvoked. Use this continuation to provide elements to the stream by\ncalling one of the `yield` methods, then terminate the stream normally by\ncalling the `finish()` method. You can also use the continuation's\n`finish(throwing:)` method to terminate the stream by throwing an error.\n\n- Note: Unlike other continuations in Swift,\n`AsyncThrowingStream.Continuation` supports escaping."},{"p":["AsyncThrowingStream","Iterator"],"f":[["struct",12],[" ",17],["Iterator",7]],"s":[["struct",12],[" ",17],["Iterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Failure",1,"Error",355]],"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"The asynchronous iterator for iterating an asynchronous stream.\n\nThis type is not `Sendable`. Don't use it from multiple\nconcurrent contexts. It is a programmer error to invoke `next()` from a\nconcurrent context that contends with another such call, which\nresults in a call to `fatalError()`."},{"p":["UnsafeCurrentTask"],"f":[["struct",12],[" ",17],["UnsafeCurrentTask",7]],"s":[["struct",12],[" ",17],["UnsafeCurrentTask",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"An unsafe reference to the current task.\n\nTo get an instance of `UnsafeCurrentTask` for the current task,\ncall the `withUnsafeCurrentTask(body:)` method.\nDon't store an unsafe task reference\nfor use outside that method's closure.\nStoring an unsafe reference doesn't affect the task's actual life cycle,\nand the behavior of accessing an unsafe task reference\noutside of the `withUnsafeCurrentTask(body:)` method's closure isn't defined.\n\nOnly APIs on `UnsafeCurrentTask` that are also part of `Task`\nare safe to invoke from a task other than\nthe task that this `UnsafeCurrentTask` instance refers to.\nCalling other APIs from another task is undefined behavior,\nbreaks invariants in other parts of the program running on this task,\nand may lead to crashes or data loss.\n\nFor information about the language-level concurrency model that `UnsafeCurrentTask` is part of,\nsee [Concurrency][concurrency] in [The Swift Programming Language][tspl].\n\n[concurrency]: https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html\n[tspl]: https://docs.swift.org/swift-book/"},{"p":["TaskLocal"],"f":[["@propertyWrapper",3],[" ",17],["final",12],[" ",17],["class",12],[" ",17],["TaskLocal",7],["<",17],["Value",0],["> ",17],["where",12],[" ",17],["Value",18],[" : ",17],["Sendable",18,361]],"s":[["class",12],[" ",17],["TaskLocal",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Value",1,"Sendable",361]],"g":[["Value",0,0]],"d":"Property wrapper that defines a task-local value key.\n\nA task-local value is a value that can be bound and read in the context of a\n`Task`. It is implicitly carried with the task, and is accessible by any\nchild tasks the task creates (such as TaskGroup or `async let` created tasks).\n\n### Task-local declarations\n\nTask locals must be declared as static properties (or global properties,\nonce property wrappers support these), like this:\n\n    enum TracingExample {\n        @TaskLocal\n        static let traceID: TraceID?\n    }\n\n### Default values\nTask local values of optional types default to `nil`. It is possible to define\nnot-optional task-local values, and an explicit default value must then be\ndefined instead.\n\nThe default value is returned whenever the task-local is read\nfrom a context which either: has no task available to read the value from\n(e.g. a synchronous function, called without any asynchronous function in its call stack),\n\n\n### Reading task-local values\nReading task local values is simple and looks the same as-if reading a normal\nstatic property:\n\n    guard let traceID = TracingExample.traceID else {\n      print(\"no trace id\")\n      return\n    }\n    print(traceID)\n\nIt is possible to perform task-local value reads from either asynchronous\nor synchronous functions. Within asynchronous functions, as a \"current\" task\nis always guaranteed to exist, this will perform the lookup in the task local context.\n\nA lookup made from the context of a synchronous function, that is not called\nfrom an asynchronous function (!), will immediately return the task-local's\ndefault value.\n\n### Binding task-local values\nTask local values cannot be `set` directly and must instead be bound using\nthe scoped `$traceID.withValue() { ... }` operation. The value is only bound\nfor the duration of that scope, and is available to any child tasks which\nare created within that scope.\n\nDetached tasks do not inherit task-local values, however tasks created using\nthe `Task { ... }` initializer do inherit task-locals by copying them to the\nnew asynchronous task, even though it is an un-structured task.\n\n### Examples\n\n    @TaskLocal\n    static var traceID: TraceID?\n\n    print(\"traceID: \\(traceID)\") // traceID: nil\n\n    $traceID.withValue(1234) { // bind the value\n      print(\"traceID: \\(traceID)\") // traceID: 1234\n      call() // traceID: 1234\n\n      Task { // unstructured tasks do inherit task locals by copying\n        call() // traceID: 1234\n      }\n\n      Task.detached { // detached tasks do not inherit task-local values\n        call() // traceID: nil\n      }\n    }\n\n    func call() {\n      print(\"traceID: \\(traceID)\") // 1234\n    }\n\nThis type must be a `class` so it has a stable identity, that is used as key\nvalue for lookups in the task local storage."},{"p":["MainActor"],"f":[["@globalActor",3],[" ",17],["final",12],[" ",17],["actor",12],[" ",17],["MainActor",7]],"s":[["class",12],[" ",17],["MainActor",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A singleton actor whose executor is equivalent to the main\ndispatch queue."},{"p":["AsyncStream","Continuation","Termination","finished"],"f":[["case",12],[" ",17],["finished",7]],"s":[["case",12],[" ",17],["finished",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream finished as a result of calling the continuation's\n `finish` method."},{"p":["AsyncStream","Continuation","Termination","cancelled"],"f":[["case",12],[" ",17],["cancelled",7]],"s":[["case",12],[" ",17],["cancelled",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream finished as a result of cancellation."},{"p":["AsyncStream","Continuation","YieldResult","terminated"],"f":[["case",12],[" ",17],["terminated",7]],"s":[["case",12],[" ",17],["terminated",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream didn't enqueue the element because the stream was in a\nterminal state.\n\nThis indicates the stream terminated prior to calling `yield`, either\nbecause the stream finished normally or through cancellation."},{"p":["AsyncStream","Continuation","YieldResult","dropped(_:)"],"f":[["case",12],[" ",17],["dropped",7],["(",17],["Element",18],[")",17]],"s":[["case",12],[" ",17],["dropped",7],["(",17],["Element",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream didn't enqueue the element because the buffer was full.\n\nThe associated element for this case is the element dropped by the stream."},{"p":["AsyncStream","Continuation","YieldResult","enqueued(remaining:)"],"f":[["case",12],[" ",17],["enqueued",7],["(",17],["remaining",1],[": ",17],["Int",18,350],[")",17]],"s":[["case",12],[" ",17],["enqueued",7],["(",17],["remaining",1],[": ",17],["Int",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream successfully enqueued the element.\n\nThis value represents the successful enqueueing of an element, whether\nthe stream buffers the element or delivers it immediately to a pending\ncall to `next()`. The associated value `remaining` is a hint that\nindicates the number of remaining slots in the buffer at the time of\nthe `yield` call.\n\n- Note: From a thread safety point of view, `remaining` is a lower bound\non the number of remaining slots. This is because a subsequent call\nthat uses the `remaining` value could race on the consumption of\nvalues from the stream."},{"p":["AsyncStream","Continuation","BufferingPolicy","bufferingNewest(_:)"],"f":[["case",12],[" ",17],["bufferingNewest",7],["(",17],["Int",18,350],[")",17]],"s":[["case",12],[" ",17],["bufferingNewest",7],["(",17],["Int",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"When the buffer is full, discard the oldest element in the buffer.\n\nThis strategy enforces keeping at most the specified number of newest\nvalues."},{"p":["AsyncStream","Continuation","BufferingPolicy","bufferingOldest(_:)"],"f":[["case",12],[" ",17],["bufferingOldest",7],["(",17],["Int",18,350],[")",17]],"s":[["case",12],[" ",17],["bufferingOldest",7],["(",17],["Int",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"When the buffer is full, discard the newly received element.\n\nThis strategy enforces keeping at most the specified number of oldest\nvalues."},{"p":["AsyncStream","Continuation","BufferingPolicy","unbounded"],"f":[["case",12],[" ",17],["unbounded",7]],"s":[["case",12],[" ",17],["unbounded",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Continue to add to the buffer, without imposing a limit on the number\nof buffered elements."},{"p":["AsyncThrowingStream","Continuation","Termination","finished(_:)"],"f":[["case",12],[" ",17],["finished",7],["(",17],["Failure",18],["?)",17]],"s":[["case",12],[" ",17],["finished",7],["(",17],["Failure",18],["?)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream finished as a result of calling the continuation's\n `finish` method.\n\n The associated `Failure` value provides the error that terminated\n the stream. If no error occurred, this value is `nil`."},{"p":["AsyncThrowingStream","Continuation","Termination","cancelled"],"f":[["case",12],[" ",17],["cancelled",7]],"s":[["case",12],[" ",17],["cancelled",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream finished as a result of cancellation."},{"p":["AsyncThrowingStream","Continuation","YieldResult","terminated"],"f":[["case",12],[" ",17],["terminated",7]],"s":[["case",12],[" ",17],["terminated",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream didn't enqueue the element because the stream was in a\nterminal state.\n\nThis indicates the stream terminated prior to calling `yield`, either\nbecause the stream finished normally or through cancellation, or\nit threw an error."},{"p":["AsyncThrowingStream","Continuation","YieldResult","dropped(_:)"],"f":[["case",12],[" ",17],["dropped",7],["(",17],["Element",18],[")",17]],"s":[["case",12],[" ",17],["dropped",7],["(",17],["Element",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream didn't enqueue the element because the buffer was full.\n\nThe associated element for this case is the element that the stream\ndropped."},{"p":["AsyncThrowingStream","Continuation","YieldResult","enqueued(remaining:)"],"f":[["case",12],[" ",17],["enqueued",7],["(",17],["remaining",1],[": ",17],["Int",18,350],[")",17]],"s":[["case",12],[" ",17],["enqueued",7],["(",17],["remaining",1],[": ",17],["Int",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The stream successfully enqueued the element.\n\nThis value represents the successful enqueueing of an element, whether\nthe stream buffers the element or delivers it immediately to a pending\ncall to `next()`. The associated value `remaining` is a hint that\nindicates the number of remaining slots in the buffer at the time of\nthe `yield` call.\n\n- Note: From a thread safety perspective, `remaining` is a lower bound\non the number of remaining slots. This is because a subsequent call\nthat uses the `remaining` value could race on the consumption of\nvalues from the stream."},{"p":["AsyncThrowingStream","Continuation","BufferingPolicy","bufferingNewest(_:)"],"f":[["case",12],[" ",17],["bufferingNewest",7],["(",17],["Int",18,350],[")",17]],"s":[["case",12],[" ",17],["bufferingNewest",7],["(",17],["Int",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"When the buffer is full, discard the oldest element in the buffer.\n\nThis strategy enforces keeping the specified amount of newest values."},{"p":["AsyncThrowingStream","Continuation","BufferingPolicy","bufferingOldest(_:)"],"f":[["case",12],[" ",17],["bufferingOldest",7],["(",17],["Int",18,350],[")",17]],"s":[["case",12],[" ",17],["bufferingOldest",7],["(",17],["Int",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"When the buffer is full, discard the newly received element.\n\nThis strategy enforces keeping the specified amount of oldest values."},{"p":["AsyncThrowingStream","Continuation","BufferingPolicy","unbounded"],"f":[["case",12],[" ",17],["unbounded",7]],"s":[["case",12],[" ",17],["unbounded",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Continue to add to the buffer, treating its capacity as infinite."},{"p":["TaskLocal","init(wrappedValue:)"],"f":[["init",10],["(",17],["wrappedValue",1],[" ",17],["defaultValue",2],[": ",17],["Value",18],[")",17]],"s":[["init",10],["(",17],["wrappedValue",1],[": ",17],["Value",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Value",1,"Sendable",361]],"g":[["Value",0,0]]},{"p":["CancellationError","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["CheckedContinuation","init(continuation:function:)"],"f":[["init",10],["(",17],["continuation",1],[": ",17],["UnsafeContinuation",18,54],["<",17],["T",18],[", ",17],["E",18],[">, ",17],["function",1],[": ",17],["String",18,341],[" = ",17],["#function",12],[")",17]],"s":[["init",10],["(",17],["continuation",1],[": ",17],["UnsafeContinuation",18],["<",17],["T",18],[", ",17],["E",18],[">, ",17],["function",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Creates a checked continuation from an unsafe continuation.\n\nInstead of calling this initializer,\nmost code calls the `withCheckedContinuation(function:_:)` or\n`withCheckedThrowingContinuation(function:_:)` function instead.\nYou only need to initialize\nyour own `CheckedContinuation<T, E>` if you already have an\n`UnsafeContinuation` you want to impose checking on.\n\n- Parameters:\n  - continuation: An instance of `UnsafeContinuation`\n    that hasn't yet been resumed.\n    After passing the unsafe continuation to this initializer,\n    don't use it outside of this object.\n  - function: A string identifying the declaration that is the notional\n    source for the continuation, used to identify the continuation in\n    runtime diagnostics related to misuse of this continuation."},{"p":["TaskPriority","init(rawValue:)"],"f":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt8",18,357],[")",17]],"s":[["init",10],["(",17],["rawValue",1],[": ",17],["UInt8",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["AsyncStream","init(unfolding:onCancel:)"],"f":[["init",10],["(",17],["unfolding",1],[" ",17],["produce",2],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["Element",18],["?, ",17],["onCancel",1],[": (() -> ",17],["Void",18,354],[")? = nil)",17]],"s":[["init",10],["(",17],["unfolding",1],[": () ",17],["async",12],[" -> ",17],["Element",18],["?, ",17],["onCancel",1],[": (() -> ",17],["Void",18],[")?)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"Constructs an asynchronous stream from a given element-producing\nclosure, with an optional closure to handle cancellation.\n\n- Parameters:\n  - produce: A closure that asynchronously produces elements for the\n    stream.\n  - onCancel: A closure to execute when canceling the stream's task.\n\nUse this convenience initializer when you have an asychronous function\nthat can produce elements for the stream, and don't want to invoke\na continuation manually. This initializer \"unfolds\" your closure into\nan asynchronous stream. The created stream handles conformance\nto the `AsyncSequence` protocol automatically, including termination\n(either by cancellation or by returning `nil` from the closure to finish\niteration).\n\nThe following example shows an `AsyncStream` created with this\ninitializer that produces random numbers on a one-second interval. This\nexample uses the Swift multiple trailing closure syntax, which omits\nthe `unfolding` parameter label.\n\n    let stream = AsyncStream<Int> {\n            await Task.sleep(1 * 1_000_000_000)\n            return Int.random(in: 1...10)\n        }\n        onCancel: { @Sendable () in print (\"Canceled.\") }\n    )\n\n    // Call point:\n    for await random in stream {\n        print (\"\\(random)\")\n    }\n\n"},{"p":["AsyncStream","init(_:bufferingPolicy:_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elementType",2],[": ",17],["Element",18],[".Type = Element.self, ",17],["bufferingPolicy",1],[" ",17],["limit",2],[": ",17],["AsyncStream",18,50],["<",17],["Element",18],[">.",17],["Continuation",18,51],[".",17],["BufferingPolicy",18,12],[" = .unbounded, ",17],["_",1],[" ",17],["build",2],[": (",17],["AsyncStream",18,50],["<",17],["Element",18],[">.",17],["Continuation",18,51],[") -> ",17],["Void",18,354],[")",17]],"s":[["init",10],["(",17],["Element",18],[".Type, ",17],["bufferingPolicy",1],[": ",17],["AsyncStream",18],["<",17],["Element",18],[">.",17],["Continuation",18],[".",17],["BufferingPolicy",18],[", (",17],["AsyncStream",18],["<",17],["Element",18],[">.",17],["Continuation",18],[") -> ",17],["Void",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"Constructs an asynchronous stream for an element type, using the\nspecified buffering policy and element-producing closure.\n\n- Parameters:\n   - elementType: The type of element the `AsyncStream` produces.\n   - bufferingPolicy: A `Continuation.BufferingPolicy` value to\n      set the stream's buffering behavior. By default, the stream buffers an\n      unlimited number of elements. You can also set the policy to buffer a\n      specified number of oldest or newest elements.\n   - build: A custom closure that yields values to the\n      `AsyncStream`. This closure receives an `AsyncStream.Continuation`\n      instance that it uses to provide elements to the stream and terminate the\n      stream when finished.\n\nThe `AsyncStream.Continuation` received by the `build` closure is\nappropriate for use in concurrent contexts. It is thread safe to send and\nfinish; all calls to the continuation are serialized. However, calling\nthis from multiple concurrent contexts could result in out-of-order\ndelivery.\n\nThe following example shows an `AsyncStream` created with this\ninitializer that produces 100 random numbers on a one-second interval,\ncalling `yield(_:)` to deliver each element to the awaiting call point.\nWhen the `for` loop exits and the stream finishes by calling the\ncontinuation's `finish()` method.\n\n    let stream = AsyncStream<Int>(Int.self,\n                                  bufferingPolicy: .bufferingNewest(5)) { continuation in\n            Task.detached {\n                for _ in 0..<100 {\n                    await Task.sleep(1 * 1_000_000_000)\n                    continuation.yield(Int.random(in: 1...10))\n                }\n                continuation.finish()\n            }\n        }\n\n    // Call point:\n    for await random in stream {\n        print (\"\\(random)\")\n    }\n"},{"p":["Task","init(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["init",10],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18],[")",17]],"s":[["init",10],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",2,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",2,"Error",355]],"g":[["Success",0,0],["Failure",1,0]],"d":"Runs the given throwing operation asynchronously\nas part of a new top-level task on behalf of the current actor.\n\nUse this function when creating asynchronous work\nthat operates on behalf of the synchronous function that calls it.\nLike `Task.detached(priority:operation:)`,\nthis function creates a separate, top-level task.\nUnlike `detach(priority:operation:)`,\nthe task created by `Task.init(priority:operation:)`\ninherits the priority and actor context of the caller,\nso the operation is treated more like an asynchronous extension\nto the synchronous operation.\n\nYou need to keep a reference to the task\nif you want to cancel it by calling the `Task.cancel()` method.\nDiscarding your reference to a detached task\ndoesn't implicitly cancel that task,\nit only makes it impossible for you to explicitly cancel the task.\n\n- Parameters:\n  - priority: The priority of the task.\n    Pass `nil` to use the priority from `Task.currentPriority`.\n  - operation: The operation to perform."},{"p":["Task","init(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["init",10],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["Success",18],[")",17]],"s":[["init",10],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["Success",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",2,"Never",356]],"c":[["Success",1,"Sendable",361],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]],"d":"Runs the given nonthrowing operation asynchronously\nas part of a new top-level task on behalf of the current actor.\n\nUse this function when creating asynchronous work\nthat operates on behalf of the synchronous function that calls it.\nLike `Task.detached(priority:operation:)`,\nthis function creates a separate, top-level task.\nUnlike `Task.detached(priority:operation:)`,\nthe task created by `Task.init(priority:operation:)`\ninherits the priority and actor context of the caller,\nso the operation is treated more like an asynchronous extension\nto the synchronous operation.\n\nYou need to keep a reference to the task\nif you want to cancel it by calling the `Task.cancel()` method.\nDiscarding your reference to a detached task\ndoesn't implicitly cancel that task,\nit only makes it impossible for you to explicitly cancel the task.\n\n- Parameters:\n  - priority: The priority of the task.\n    Pass `nil` to use the priority from `Task.currentPriority`.\n  - operation: The operation to perform."},{"p":["UnownedSerialExecutor","init(ordinary:)"],"f":[["init",10],["<",17],["E",0],[">(",17],["ordinary",1],[" ",17],["executor",2],[": ",17],["E",18],[") ",17],["where",12],[" ",17],["E",18],[" : ",17],["SerialExecutor",18,4]],"s":[["init",10],["<",17],["E",0],[">(",17],["ordinary",1],[": ",17],["E",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"SerialExecutor",4]],"g":[["E",0,0]]},{"p":["AsyncThrowingStream","init(unfolding:)"],"f":[["init",10],["(",17],["unfolding",1],[" ",17],["produce",2],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Element",18],["?) ",17],["where",12],[" ",17],["Failure",18],[" == ",17],["Error",18,355]],"s":[["init",10],["(",17],["unfolding",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Element",18],["?)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",2,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"Constructs an asynchronous throwing stream from a given element-producing\nclosure.\n\n- Parameters:\n  - produce: A closure that asynchronously produces elements for the\n   stream.\n\nUse this convenience initializer when you have an asychronous function\nthat can produce elements for the stream, and don't want to invoke\na continuation manually. This initializer \"unfolds\" your closure into\na full-blown asynchronous stream. The created stream handles adherence to\nthe `AsyncSequence` protocol automatically. To terminate the stream with\nan error, throw the error from your closure.\n\nThe following example shows an `AsyncThrowingStream` created with this\ninitializer that produces random numbers on a one-second interval. If the\nrandom number is divisble by 5 with no remainder, the stream throws a\n`MyRandomNumberError`.\n\n    let stream = AsyncThrowingStream<Int, Error> {\n            await Task.sleep(1 * 1_000_000_000)\n            let random = Int.random(in: 1...10)\n            if (random % 5 == 0) {\n                throw MyRandomNumberError()\n            }\n            return random\n        }\n\n    // Call point:\n    do {\n        for try await random in stream {\n            print (\"\\(random)\")\n        }\n    } catch {\n        print (\"\\(error)\")\n    }\n"},{"p":["AsyncThrowingStream","init(_:bufferingPolicy:_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["elementType",2],[": ",17],["Element",18],[".Type = Element.self, ",17],["bufferingPolicy",1],[" ",17],["limit",2],[": ",17],["AsyncThrowingStream",18,58],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18,59],[".",17],["BufferingPolicy",18,15],[" = .unbounded, ",17],["_",1],[" ",17],["build",2],[": (",17],["AsyncThrowingStream",18,58],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18,59],[") -> ",17],["Void",18,354],[") ",17],["where",12],[" ",17],["Failure",18],[" == ",17],["Error",18,355]],"s":[["init",10],["(",17],["Element",18],[".Type, ",17],["bufferingPolicy",1],[": ",17],["AsyncThrowingStream",18],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18],[".",17],["BufferingPolicy",18],[", (",17],["AsyncThrowingStream",18],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18],[") -> ",17],["Void",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",2,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"Constructs an asynchronous stream for an element type, using the\nspecified buffering policy and element-producing closure.\n\n- Parameters:\n  - elementType: The type of element the `AsyncThrowingStream`\n  produces.\n  - limit: The maximum number of elements to\n  hold in the buffer. By default, this value is unlimited. Use a\n  `Continuation.BufferingPolicy` to buffer a specified number of oldest\n  or newest elements.\n  - build: A custom closure that yields values to the\n  `AsyncThrowingStream`. This closure receives an\n  `AsyncThrowingStream.Continuation` instance that it uses to provide\n  elements to the stream and terminate the stream when finished.\n\nThe `AsyncStream.Continuation` received by the `build` closure is\nappopriate for use in concurrent contexts. It is thread safe to send and\nfinish; all calls are to the continuation are serialized. However, calling\nthis from multiple concurrent contexts could result in out-of-order\ndelivery.\n\nThe following example shows an `AsyncStream` created with this\ninitializer that produces 100 random numbers on a one-second interval,\ncalling `yield(_:)` to deliver each element to the awaiting call point.\nWhen the `for` loop exits and the stream finishes by calling the\ncontinuation's `finish()` method. If the random number is divisble by 5\nwith no remainder, the stream throws a `MyRandomNumberError`.\n\n    let stream = AsyncThrowingStream<Int, Error>(Int.self,\n                                                 bufferingPolicy: .bufferingNewest(5)) { continuation in\n            Task.detached {\n                for _ in 0..<100 {\n                    await Task.sleep(1 * 1_000_000_000)\n                    let random = Int.random(in: 1...10)\n                    if (random % 5 == 0) {\n                        continuation.finish(throwing: MyRandomNumberError())\n                        return\n                    } else {\n                        continuation.yield(random)\n                    }\n                }\n                continuation.finish()\n            }\n        }\n\n    // Call point:\n    do {\n        for try await random in stream {\n            print (\"\\(random)\")\n        }\n    } catch {\n        print (\"\\(error)\")\n    }\n"},{"p":["GlobalActor","sharedUnownedExecutor"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sharedUnownedExecutor",7],[": ",17],["UnownedSerialExecutor",18,55],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sharedUnownedExecutor",7],[": ",17],["UnownedSerialExecutor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The shared executor instance that will be used to provide\nmutually-exclusive access for the global actor.\n\nThe value of this property must be equivalent to `shared.unownedExecutor`."},{"p":["GlobalActor","shared"],"f":[["static",12],[" ",17],["var",12],[" ",17],["shared",7],[": ",17],["Self",18],[".",17],["ActorType",18],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["shared",7],[": ",17],["Self",18],[".",17],["ActorType",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The shared actor instance that will be used to provide mutually-exclusive\naccess to declarations annotated with the given global actor type.\n\nThe value of this property must always evaluate to the same actor\ninstance."},{"p":["GlobalActor","sharedUnownedExecutor"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sharedUnownedExecutor",7],[": ",17],["UnownedSerialExecutor",18,55],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sharedUnownedExecutor",7],[": ",17],["UnownedSerialExecutor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["MainActor","sharedUnownedExecutor"],"f":[["static",12],[" ",17],["var",12],[" ",17],["sharedUnownedExecutor",7],[": ",17],["UnownedSerialExecutor",18,55],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["sharedUnownedExecutor",7],[": ",17],["UnownedSerialExecutor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["MainActor","shared"],"f":[["static",12],[" ",17],["let",12],[" ",17],["shared",7],[": ",17],["MainActor",18,63]],"s":[["static",12],[" ",17],["let",12],[" ",17],["shared",7],[": ",17],["MainActor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","background"],"f":[["static",12],[" ",17],["let",12],[" ",17],["background",7],[": ",17],["TaskPriority",18,49]],"s":[["static",12],[" ",17],["let",12],[" ",17],["background",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","unspecified"],"f":[["static",12],[" ",17],["var",12],[" ",17],["unspecified",7],[": ",17],["TaskPriority",18,49],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["unspecified",7],[": ",17],["TaskPriority",18]],"a":{"a":{"d":true,"m":"unspecified priority will be removed; use nil"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","userInitiated"],"f":[["static",12],[" ",17],["let",12],[" ",17],["userInitiated",7],[": ",17],["TaskPriority",18,49]],"s":[["static",12],[" ",17],["let",12],[" ",17],["userInitiated",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","userInteractive"],"f":[["static",12],[" ",17],["var",12],[" ",17],["userInteractive",7],[": ",17],["TaskPriority",18,49],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["userInteractive",7],[": ",17],["TaskPriority",18]],"a":{"a":{"d":true,"m":"userInteractive priority will be removed"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","low"],"f":[["static",12],[" ",17],["let",12],[" ",17],["low",7],[": ",17],["TaskPriority",18,49]],"s":[["static",12],[" ",17],["let",12],[" ",17],["low",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","high"],"f":[["static",12],[" ",17],["let",12],[" ",17],["high",7],[": ",17],["TaskPriority",18,49]],"s":[["static",12],[" ",17],["let",12],[" ",17],["high",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","medium"],"f":[["static",12],[" ",17],["var",12],[" ",17],["medium",7],[": ",17],["TaskPriority",18,49],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["medium",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","default"],"f":[["static",12],[" ",17],["let",12],[" ",17],["`default`",7],[": ",17],["TaskPriority",18,49]],"s":[["static",12],[" ",17],["let",12],[" ",17],["`default`",7],[": ",17],["TaskPriority",18]],"a":{"a":{"d":true,"r":"medium"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","utility"],"f":[["static",12],[" ",17],["let",12],[" ",17],["utility",7],[": ",17],["TaskPriority",18,49]],"s":[["static",12],[" ",17],["let",12],[" ",17],["utility",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["Task","isCancelled"],"f":[["static",12],[" ",17],["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18,348],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"d":"A Boolean value that indicates whether the task should stop executing.\n\nAfter the value of this property becomes `true`, it remains `true` indefinitely.\nThere is no way to uncancel a task.\n\n- SeeAlso: `checkCancellation()`"},{"p":["Task","currentPriority"],"f":[["static",12],[" ",17],["var",12],[" ",17],["currentPriority",7],[": ",17],["TaskPriority",18,49],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["currentPriority",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"d":"The current task's priority.\n\nIf you access this property outside of any task,\nthis queries the system to determine the\npriority at which the current function is running.\nIf the system can't provide a priority,\nthis property's value is `Priority.default`."},{"p":["TaskLocal","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,341],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskLocal","wrappedValue"],"f":[["var",12],[" ",17],["wrappedValue",7],[": ",17],["Value",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["wrappedValue",7],[": ",17],["Value",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskLocal","projectedValue"],"f":[["var",12],[" ",17],["projectedValue",7],[": ",17],["TaskLocal",18,62],["<",17],["Value",18],["> { ",17],["get",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["projectedValue",7],[": ",17],["TaskLocal",18],["<",17],["Value",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["Actor","unownedExecutor"],"f":[["nonisolated",12],[" ",17],["var",12],[" ",17],["unownedExecutor",7],[": ",17],["UnownedSerialExecutor",18,55],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["unownedExecutor",7],[": ",17],["UnownedSerialExecutor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Retrieve the executor for this actor as an optimized, unowned\nreference.\n\nThis property must always evaluate to the same executor for a\ngiven actor instance, and holding on to the actor must keep the\nexecutor alive.\n\nThis property will be implicitly accessed when work needs to be\nscheduled onto this actor.  These accesses may be merged,\neliminated, and rearranged with other work, and they may even\nbe introduced when not strictly required.  Visible side effects\nare therefore strongly discouraged within this property."},{"p":["TaskGroup","isCancelled"],"f":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18,348],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A Boolean value that indicates whether the group was canceled.\n\nTo cancel a group, call the `TaskGroup.cancelAll()` method.\n\nIf the task that's currently running this group is canceled,\nthe group is also implicitly canceled,\nwhich is also reflected in this property's value."},{"p":["TaskGroup","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,348],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A Boolean value that indicates whether the group has any remaining tasks.\n\nAt the start of the body of a `withTaskGroup(of:returning:body:)` call,\nthe task group is always empty.\nIt`s guaranteed to be empty when returning from that body\nbecause a task group waits for all child tasks to complete before returning.\n\n- Returns: `true` if the group has no pending tasks; otherwise `false`."},{"p":["MainActor","unownedExecutor"],"f":[["nonisolated",12],[" ",17],["var",12],[" ",17],["unownedExecutor",7],[": ",17],["UnownedSerialExecutor",18,55],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["unownedExecutor",7],[": ",17],["UnownedSerialExecutor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","rawValue"],"f":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt8",18,357]],"s":[["var",12],[" ",17],["rawValue",7],[": ",17],["UInt8",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["AsyncStream","Continuation","onTermination"],"f":[["var",12],[" ",17],["onTermination",7],[": ((",17],["AsyncStream",18,50],["<",17],["Element",18],[">.",17],["Continuation",18,51],[".",17],["Termination",18,10],[") -> ",17],["Void",18,354],[")? { ",17],["get",12],[" ",17],["nonmutating",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["onTermination",7],[": ((",17],["AsyncStream",18],["<",17],["Element",18],[">.",17],["Continuation",18],[".",17],["Termination",18],[") -> ",17],["Void",18],[")?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A callback to invoke when canceling iteration of an asynchronous\nstream.\n\nIf an `onTermination` callback is set, using task cancellation to\nterminate iteration of an `AsyncStream` results in a call to this\ncallback.\n\nCanceling an active iteration invokes the `onTermination` callback\nfirst, then resumes by yielding `nil`. This means that you can perform\nneeded cleanup in the cancellation handler. After reaching a terminal\nstate as a result of cancellation, the `AsyncStream` sets the callback\nto `nil`."},{"p":["Task","isCancelled"],"f":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18,348],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"d":"A Boolean value that indicates whether the task should stop executing.\n\nAfter the value of this property becomes `true`, it remains `true` indefinitely.\nThere is no way to uncancel a task.\n\n- SeeAlso: `checkCancellation()`"},{"p":["Task","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["Success",18],[" { ",17],["get",12],[" ",17],["async",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["Success",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",2,"Never",356]],"d":"The result from a nonthrowing task, after it completes.\n\nIf the task hasn't completed yet,\naccessing this property waits for it to complete\nand its priority increases to that of the current task.\nNote that this might not be as effective as\ncreating the task with the correct priority,\ndepending on the executor's scheduling details.\n\nTasks that never throw an error can still check for cancellation,\nbut they need to use an approach like returning `nil`\ninstead of throwing an error."},{"p":["Task","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["Success",18],[" { ",17],["get",12],[" ",17],["async",12],[" ",17],["throws",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["Success",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"d":"The result from a throwing task, after it completes.\n\nIf the task hasn't completed,\naccessing this property waits for it to complete\nand its priority increases to that of the current task.\nNote that this might not be as effective as\ncreating the task with the correct priority,\ndepending on the executor's scheduling details.\n\nIf the task throws an error, this property propagates that error.\nTasks that respond to cancellation by throwing `CancellationError`\nhave that error propagated here upon cancellation.\n\n- Returns: The task's result."},{"p":["Task","result"],"f":[["var",12],[" ",17],["result",7],[": ",17],["Result",18,359],["<",17],["Success",18],[", ",17],["Failure",18],["> { ",17],["get",12],[" ",17],["async",12],[" }",17]],"s":[["var",12],[" ",17],["result",7],[": ",17],["Result",18],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"d":"The result or error from a throwing task, after it completes.\n\nIf the task hasn't completed,\naccessing this property waits for it to complete\nand its priority increases to that of the current task.\nNote that this might not be as effective as\ncreating the task with the correct priority,\ndepending on the executor's scheduling details.\n\n- Returns: If the task succeeded,\n  `.success` with the task's result as the associated value;\n  otherwise, `.failure` with the error as the associated value."},{"p":["ThrowingTaskGroup","isCancelled"],"f":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18,348],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A Boolean value that indicates whether the group was canceled.\n\nTo cancel a group, call the `ThrowingTaskGroup.cancelAll()` method.\n\nIf the task that's currently running this group is canceled,\nthe group is also implicitly canceled,\nwhich is also reflected in this property's value."},{"p":["ThrowingTaskGroup","isEmpty"],"f":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18,348],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isEmpty",7],[": ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A Boolean value that indicates whether the group has any remaining tasks.\n\nAt the start of the body of a `withThrowingTaskGroup(of:returning:body:)` call,\nthe task group is always empty.\nIt's guaranteed to be empty when returning from that body\nbecause a task group waits for all child tasks to complete before returning.\n\n- Returns: `true` if the group has no pending tasks; otherwise `false`."},{"p":["AsyncThrowingStream","Continuation","onTermination"],"f":[["var",12],[" ",17],["onTermination",7],[": ((",17],["AsyncThrowingStream",18,58],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18,59],[".",17],["Termination",18,13],[") -> ",17],["Void",18,354],[")? { ",17],["get",12],[" ",17],["nonmutating",12],[" ",17],["set",12],[" }",17]],"s":[["var",12],[" ",17],["onTermination",7],[": ((",17],["AsyncThrowingStream",18],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18],[".",17],["Termination",18],[") -> ",17],["Void",18],[")?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A callback to invoke when canceling iteration of an asynchronous\nstream.\n\nIf an `onTermination` callback is set, using task cancellation to\nterminate iteration of an `AsyncThrowingStream` results in a call to this\ncallback.\n\nCanceling an active iteration invokes the `onTermination` callback\nfirst, and then resumes by yielding `nil` or throwing an error from the\niterator. This means that you can perform needed cleanup in the\n cancellation handler. After reaching a terminal state, the\n `AsyncThrowingStream` disposes of the callback."},{"p":["UnsafeCurrentTask","isCancelled"],"f":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18,348],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["isCancelled",7],[": ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"A Boolean value that indicates whether the current task was canceled.\n\nAfter the value of this property becomes `true`, it remains `true` indefinitely.\nThere is no way to uncancel a task.\n\n- SeeAlso: `checkCancellation()`"},{"p":["UnsafeCurrentTask","priority"],"f":[["var",12],[" ",17],["priority",7],[": ",17],["TaskPriority",18,49],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["priority",7],[": ",17],["TaskPriority",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"The current task's priority.\n\n- SeeAlso: `TaskPriority`\n- SeeAlso: `Task.currentPriority`"},{"p":["MainActor","run(resultType:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["run",7],["<",17],["T",0],[">(",17],["resultType",1],[": ",17],["T",18],[".Type = T.self, ",17],["body",1],[": @",17],["MainActor",18,63],[" () ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18],[" ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,361]],"s":[["static",12],[" ",17],["func",12],[" ",17],["run",7],["<",17],["T",0],[">(",17],["resultType",1],[": ",17],["T",18],[".Type, ",17],["body",1],[": () ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["T",1,"Sendable",361]],"g":[["T",0,0]],"d":"Execute the given body closure on the main actor."},{"p":["Task","runDetached(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["runDetached",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18],[") -> ",17],["Task",18,53],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["runDetached",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18],[") -> ",17],["Task",18],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"a":{"a":{"d":true,"m":"`Task.runDetached` was replaced by `Task.detached` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",2,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",2,"Error",355]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","detached(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["detached",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18],[") -> ",17],["Task",18,53],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["detached",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18],[") -> ",17],["Task",18],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",2,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",2,"Error",355]],"g":[["Success",0,0],["Failure",1,0]],"d":"Runs the given throwing operation asynchronously\nas part of a new top-level task.\n\nIf the operation throws an error, this method propagates that error.\n\nDon't use a detached task if it's possible\nto model the operation using structured concurrency features like child tasks.\nChild tasks inherit the parent task's priority and task-local storage,\nand canceling a parent task automatically cancels all of its child tasks.\nYou need to handle these considerations manually with a detached task.\n\nYou need to keep a reference to the detached task\nif you want to cancel it by calling the `Task.cancel()` method.\nDiscarding your reference to a detached task\ndoesn't implicitly cancel that task,\nit only makes it impossible for you to explicitly cancel the task.\n\n- Parameters:\n  - priority: The priority of the task.\n  - operation: The operation to perform.\n\n- Returns: A reference to the task."},{"p":["Task","detached(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["detached",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["Success",18],[") -> ",17],["Task",18,53],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"s":[["static",12],[" ",17],["func",12],[" ",17],["detached",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["Success",18],[") -> ",17],["Task",18],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",2,"Never",356]],"c":[["Success",1,"Sendable",361],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]],"d":"Runs the given nonthrowing operation asynchronously\nas part of a new top-level task.\n\nDon't use a detached task if it's possible\nto model the operation using structured concurrency features like child tasks.\nChild tasks inherit the parent task's priority and task-local storage,\nand canceling a parent task automatically cancels all of its child tasks.\nYou need to handle these considerations manually with a detached task.\n\nYou need to keep a reference to the detached task\nif you want to cancel it by calling the `Task.cancel()` method.\nDiscarding your reference to a detached task\ndoesn't implicitly cancel that task,\nit only makes it impossible for you to explicitly cancel the task.\n\n- Parameters:\n  - priority: The priority of the task.\n  - operation: The operation to perform.\n\n- Returns: A reference to the task."},{"p":["Task","CancellationError()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["CancellationError",7],["() -> ",17],["CancellationError",18,45]],"s":[["static",12],[" ",17],["func",12],[" ",17],["CancellationError",7],["() -> ",17],["CancellationError",18]],"a":{"a":{"d":true,"m":"Task.CancellationError has been removed; use CancellationError"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","checkCancellation()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["checkCancellation",7],["() ",17],["throws",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["checkCancellation",7],["() ",17],["throws",12]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]],"d":"Throws an error if the task was canceled.\n\nThe error is always an instance of `CancellationError`.\n\n- SeeAlso: `isCancelled()`"},{"p":["Task","withCancellationHandler(handler:operation:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["withCancellationHandler",7],["<",17],["T",0],[">(",17],["handler",1],[": () -> ",17],["Void",18,354],[", ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["withCancellationHandler",7],["<",17],["T",0],[">(",17],["handler",1],[": () -> ",17],["Void",18],[", ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18]],"a":{"a":{"d":true,"m":"`Task.withCancellationHandler` has been replaced by `withTaskCancellationHandler` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0],["T",0,1]]},{"p":["Task","sleep(nanoseconds:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sleep",7],["(",17],["nanoseconds",1],[" ",17],["duration",2],[": ",17],["UInt64",18,360],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sleep",7],["(",17],["nanoseconds",1],[": ",17],["UInt64",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]],"d":"Suspends the current task for at least the given duration\nin nanoseconds.\n\nIf the task is canceled before the time ends,\nthis function throws `CancellationError`.\n\nThis function doesn't block the underlying thread."},{"p":["Task","sleep(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["sleep",7],["(",17],["_",1],[" ",17],["duration",2],[": ",17],["UInt64",18,360],[") ",17],["async",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["sleep",7],["(",17],["UInt64",18],[") ",17],["async",12]],"a":{"a":{"d":true,"r":"Task.sleep(nanoseconds:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","yield()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["yield",7],["() ",17],["async",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["yield",7],["() ",17],["async",12]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]],"d":"Suspends the current task and allows other tasks to execute.\n\nA task can voluntarily suspend itself\nin the middle of a long-running operation\nthat doesn't contain any suspension points,\nto let other tasks run for a while\nbefore execution returns to this task.\n\nIf this task is the highest-priority task in the system,\nthe executor immediately resumes execution of the same task.\nAs such,\nthis method isn't necessarily a way to avoid resource starvation."},{"p":["Task","suspend()"],"f":[["static",12],[" ",17],["func",12],[" ",17],["suspend",7],["() ",17],["async",12]],"s":[["static",12],[" ",17],["func",12],[" ",17],["suspend",7],["() ",17],["async",12]],"a":{"a":{"d":true,"r":"yield()"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","withGroup(resultType:returning:body:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["withGroup",7],["<",17],["TaskResult",0],[", ",17],["BodyResult",0],[">(",17],["resultType",1],[": ",17],["TaskResult",18],[".Type, ",17],["returning",1],[" ",17],["returnType",2],[": ",17],["BodyResult",18],[".Type = BodyResult.self, ",17],["body",1],[": (",17],["inout",12],[" ",17],["Task",18,53],["<",17],["Success",18],[", ",17],["Failure",18],[">.",17],["Group",18,316],["<",17],["TaskResult",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["BodyResult",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["BodyResult",18],[" ",17],["where",12],[" ",17],["TaskResult",18],[" : ",17],["Sendable",18,361]],"s":[["static",12],[" ",17],["func",12],[" ",17],["withGroup",7],["<",17],["TaskResult",0],[", ",17],["BodyResult",0],[">(",17],["resultType",1],[": ",17],["TaskResult",18],[".Type, ",17],["returning",1],[": ",17],["BodyResult",18],[".Type, ",17],["body",1],[": (",17],["inout",12],[" ",17],["Task",18],["<",17],["Success",18],[", ",17],["Failure",18],[">.",17],["Group",18],["<",17],["TaskResult",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["BodyResult",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["BodyResult",18]],"a":{"a":{"d":true,"m":"`Task.withGroup` was replaced by `withThrowingTaskGroup` and `withTaskGroup` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356],["TaskResult",1,"Sendable",361]],"g":[["Success",0,0],["Failure",1,0],["TaskResult",0,1],["BodyResult",1,1]]},{"p":["AsyncMapSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncMapSequence",18,16],["<",17],["Base",18],[", ",17],["Transformed",18],[">.",17],["Iterator",18,17]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncMapSequence",18],["<",17],["Base",18],[", ",17],["Transformed",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]]},{"p":["AsyncMapSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Transformed",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Transformed",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"Produces the next element in the map sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns `nil`. Otherwise, `next()` returns the result of\ncalling the transforming closure on the received element."},{"p":["AsyncFilterSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncFilterSequence",18,18],["<",17],["Base",18],[">.",17],["Iterator",18,19]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncFilterSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]]},{"p":["AsyncFilterSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the filter sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns nil. Otherwise, `next()` evaluates the\nresult with the `predicate` closure. If the closure returns `true`,\n`next()` returns the received element; otherwise it awaits the next\nelement from the base iterator."},{"p":["AsyncPrefixSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncPrefixSequence",18,20],["<",17],["Base",18],[">.",17],["Iterator",18,21]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncPrefixSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]]},{"p":["AsyncPrefixSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the prefix sequence.\n\nUntil reaching the number of elements to include, this iterator calls\n`next()` on its base iterator and passes through the result. After\nreaching the maximum number of elements, subsequent calls to `next()`\nreturn `nil`."},{"p":["AsyncFlatMapSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncFlatMapSequence",18,22],["<",17],["Base",18],[", ",17],["SegmentOfResult",18],[">.",17],["Iterator",18,23]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncFlatMapSequence",18],["<",17],["Base",18],[", ",17],["SegmentOfResult",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]]},{"p":["AsyncFlatMapSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["SegmentOfResult",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["SegmentOfResult",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"Produces the next element in the flat map sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns `nil`. Otherwise, `next()` calls the\ntransforming closure on the received element, takes the resulting\nasynchronous sequence, and creates an asynchronous iterator from it.\n`next()` then consumes values from this iterator until it terminates.\nAt this point, `next()` is ready to receive the next value from the base\nsequence."},{"p":["AsyncDropFirstSequence","dropFirst(_:)"],"f":[["func",12],[" ",17],["dropFirst",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,350],[" = 1) -> ",17],["AsyncDropFirstSequence",18,24],["<",17],["Base",18],[">",17]],"s":[["func",12],[" ",17],["dropFirst",7],["(",17],["Int",18],[") -> ",17],["AsyncDropFirstSequence",18],["<",17],["Base",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Omits a specified number of elements from the base asynchronous sequence,\nthen passes through all remaining elements.\n\nWhen you call `dropFirst(_:)` on an asynchronous sequence that is already\nan `AsyncDropFirstSequence`, the returned sequence simply adds the new\ndrop count to the current drop count."},{"p":["AsyncDropFirstSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncDropFirstSequence",18,24],["<",17],["Base",18],[">.",17],["Iterator",18,25]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncDropFirstSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]]},{"p":["AsyncDropFirstSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the drop-first sequence.\n\nUntil reaching the number of elements to drop, this iterator calls\n`next()` on its base iterator and discards the result. If the base\niterator returns `nil`, indicating the end of the sequence, this\niterator returns `nil`. After reaching the number of elements to\ndrop, this iterator passes along the result of calling `next()` on\nthe base iterator."},{"p":["AsyncDropWhileSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncDropWhileSequence",18,26],["<",17],["Base",18],[">.",17],["Iterator",18,27]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncDropWhileSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Creates an instance of the drop-while sequence iterator."},{"p":["AsyncDropWhileSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the drop-while sequence.\n\nThis iterator calls `next()` on its base iterator and evaluates the\nresult with the `predicate` closure. As long as the predicate returns\n`true`, this method returns `nil`. After the predicate returns `false`,\nfor a value received from the base iterator, this method returns that\nvalue. After that, the iterator returns values received from its\nbase iterator as-is, and never executes the predicate closure again."},{"p":["AsyncCompactMapSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncCompactMapSequence",18,28],["<",17],["Base",18],[", ",17],["ElementOfResult",18],[">.",17],["Iterator",18,29]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncCompactMapSequence",18],["<",17],["Base",18],[", ",17],["ElementOfResult",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]]},{"p":["AsyncCompactMapSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["ElementOfResult",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["ElementOfResult",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"Produces the next element in the compact map sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns `nil`. Otherwise, `next()` calls the\ntransforming closure on the received element, returning it if the\ntransform returns a non-`nil` value. If the transform returns `nil`,\nthis method continues to wait for further elements until it gets one\nthat transforms to a non-`nil` value."},{"p":["AsyncPrefixWhileSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncPrefixWhileSequence",18,30],["<",17],["Base",18],[">.",17],["Iterator",18,31]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncPrefixWhileSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]]},{"p":["AsyncPrefixWhileSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the prefix-while sequence.\n\nIf the predicate hasn't yet failed, this method gets the next element\nfrom the base sequence and calls the predicate with it. If this call\nsucceeds, this method passes along the element. Otherwise, it returns\n`nil`, ending the sequence."},{"p":["AsyncThrowingMapSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingMapSequence",18,32],["<",17],["Base",18],[", ",17],["Transformed",18],[">.",17],["Iterator",18,33]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingMapSequence",18],["<",17],["Base",18],[", ",17],["Transformed",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]]},{"p":["AsyncThrowingMapSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Transformed",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Transformed",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"Produces the next element in the map sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns nil. Otherwise, `next()` returns the result of\ncalling the transforming closure on the received element. If calling\nthe closure throws an error, the sequence ends and `next()` rethrows\nthe error."},{"p":["AsyncThrowingFilterSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingFilterSequence",18,34],["<",17],["Base",18],[">.",17],["Iterator",18,35]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingFilterSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]]},{"p":["AsyncThrowingFilterSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the filter sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns nil. Otherwise, `next()` evaluates the\nresult with the `predicate` closure. If the closure returns `true`,\n`next()` returns the received element; otherwise it awaits the next\nelement from the base iterator. If calling the closure throws an error,\nthe sequence ends and `next()` rethrows the error."},{"p":["AsyncThrowingFlatMapSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingFlatMapSequence",18,36],["<",17],["Base",18],[", ",17],["SegmentOfResult",18],[">.",17],["Iterator",18,37]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingFlatMapSequence",18],["<",17],["Base",18],[", ",17],["SegmentOfResult",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]]},{"p":["AsyncThrowingFlatMapSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["SegmentOfResult",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["SegmentOfResult",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"Produces the next element in the flat map sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns `nil`. Otherwise, `next()` calls the\ntransforming closure on the received element, takes the resulting\nasynchronous sequence, and creates an asynchronous iterator from it.\n`next()` then consumes values from this iterator until it terminates.\nAt this point, `next()` is ready to receive the next value from the base\nsequence. If `transform` throws an error, the sequence terminates."},{"p":["AsyncThrowingDropWhileSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingDropWhileSequence",18,38],["<",17],["Base",18],[">.",17],["Iterator",18,39]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingDropWhileSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]]},{"p":["AsyncThrowingDropWhileSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the drop-while sequence.\n\nThis iterator calls `next()` on its base iterator and evaluates the\nresult with the `predicate` closure. As long as the predicate returns\n`true`, this method returns `nil`. After the predicate returns `false`,\nfor a value received from the base iterator, this method returns that\nvalue. After that, the iterator returns values received from its\nbase iterator as-is, and never executes the predicate closure again.\nIf calling the closure throws an error, the sequence ends and `next()`\nrethrows the error."},{"p":["AsyncThrowingCompactMapSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingCompactMapSequence",18,40],["<",17],["Base",18],[", ",17],["ElementOfResult",18],[">.",17],["Iterator",18,41]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingCompactMapSequence",18],["<",17],["Base",18],[", ",17],["ElementOfResult",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]]},{"p":["AsyncThrowingCompactMapSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ElementOfResult",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ElementOfResult",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"Produces the next element in the compact map sequence.\n\nThis iterator calls `next()` on its base iterator; if this call returns\n`nil`, `next()` returns `nil`. Otherwise, `next()` calls the\ntransforming closure on the received element, returning it if the\ntransform returns a non-`nil` value. If the transform returns `nil`,\nthis method continues to wait for further elements until it gets one\nthat transforms to a non-`nil` value. If calling the closure throws an\nerror, the sequence ends and `next()` rethrows the error."},{"p":["AsyncThrowingPrefixWhileSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingPrefixWhileSequence",18,42],["<",17],["Base",18],[">.",17],["Iterator",18,43]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingPrefixWhileSequence",18],["<",17],["Base",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]]},{"p":["AsyncThrowingPrefixWhileSequence","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Base",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"Produces the next element in the prefix-while sequence.\n\nIf the predicate hasn't failed yet, this method gets the next element\nfrom the base sequence and calls the predicate with it. If this call\nsucceeds, this method passes along the element. Otherwise, it returns\n`nil`, ending the sequence. If calling the predicate closure throws an\nerror, the sequence ends and `next()` rethrows the error."},{"p":["TaskLocal","get()"],"f":[["func",12],[" ",17],["get",7],["() -> ",17],["Value",18]],"s":[["func",12],[" ",17],["get",7],["() -> ",17],["Value",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Value",1,"Sendable",361]],"g":[["Value",0,0]],"d":"Gets the value currently bound to this task-local from the current task.\n\nIf no current task is available in the context where this call is made,\nor if the task-local has no value bound, this will return the `defaultValue`\nof the task local."},{"p":["TaskLocal","withValue(_:operation:file:line:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["withValue",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["valueDuringOperation",2],[": ",17],["Value",18],[", ",17],["operation",1],[": () ",17],["throws",12],[" -> ",17],["R",18],[", ",17],["file",1],[": ",17],["String",18,341],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,351],[" = ",17],["#line",12],[") ",17],["rethrows",12],[" -> ",17],["R",18]],"s":[["func",12],[" ",17],["withValue",7],["<",17],["R",0],[">(",17],["Value",18],[", ",17],["operation",1],[": () ",17],["throws",12],[" -> ",17],["R",18],[", ",17],["file",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["rethrows",12],[" -> ",17],["R",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Value",1,"Sendable",361]],"g":[["Value",0,0],["R",0,1]],"d":"Binds the task-local to the specific value for the duration of the\nsynchronous operation.\n\nThe value is available throughout the execution of the operation closure,\nincluding any `get` operations performed by child-tasks created during the\nexecution of the operation closure.\n\nIf the same task-local is bound multiple times, be it in the same task, or\nin specific child tasks, the \"more specific\" binding is returned when the\nvalue is read.\n\nIf the value is a reference type, it will be retained for the duration of\nthe operation closure."},{"p":["TaskLocal","withValue(_:operation:file:line:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["withValue",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["valueDuringOperation",2],[": ",17],["Value",18],[", ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["R",18],[", ",17],["file",1],[": ",17],["String",18,341],[" = ",17],["#file",12],[", ",17],["line",1],[": ",17],["UInt",18,351],[" = ",17],["#line",12],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["R",18]],"s":[["func",12],[" ",17],["withValue",7],["<",17],["R",0],[">(",17],["Value",18],[", ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["R",18],[", ",17],["file",1],[": ",17],["String",18],[", ",17],["line",1],[": ",17],["UInt",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["R",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Value",1,"Sendable",361]],"g":[["Value",0,0],["R",0,1]],"d":"Binds the task-local to the specific value for the duration of the asynchronous operation.\n\nThe value is available throughout the execution of the operation closure,\nincluding any `get` operations performed by child-tasks created during the\nexecution of the operation closure.\n\nIf the same task-local is bound multiple times, be it in the same task, or\nin specific child tasks, the more specific (i.e. \"deeper\") binding is\nreturned when the value is read.\n\nIf the value is a reference type, it will be retained for the duration of\nthe operation closure."},{"p":["CheckedContinuation","resume(with:)"],"f":[["func",12],[" ",17],["resume",7],["(",17],["with",1],[" ",17],["result",2],[": ",17],["Result",18,359],["<",17],["T",18],[", ",17],["E",18],[">)",17]],"s":[["func",12],[" ",17],["resume",7],["(",17],["with",1],[": ",17],["Result",18],["<",17],["T",18],[", ",17],["E",18],[">)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["E",1,"Error",355]],"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task awaiting the continuation by having it either\nreturn normally or throw an error based on the state of the given\n`Result` value.\n\n- Parameter result: A value to either return or throw from the\n  continuation.\n\nA continuation must be resumed exactly once. If the continuation has\nalready been resumed through this object, then the attempt to resume\nthe continuation will trap.\n\nAfter `resume` enqueues the task, control immediately returns to\nthe caller. The task continues executing when its executor is\nable to reschedule it."},{"p":["CheckedContinuation","resume(with:)"],"f":[["func",12],[" ",17],["resume",7],["<",17],["Er",0],[">(",17],["with",1],[" ",17],["result",2],[": ",17],["Result",18,359],["<",17],["T",18],[", ",17],["Er",18],[">) ",17],["where",12],[" ",17],["E",18],[" == ",17],["Error",18,355],[", ",17],["Er",18],[" : ",17],["Error",18,355]],"s":[["func",12],[" ",17],["resume",7],["<",17],["Er",0],[">(",17],["with",1],[": ",17],["Result",18],["<",17],["T",18],[", ",17],["Er",18],[">)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["E",1,"Error",355]],"c":[["E",2,"Error",355],["Er",1,"Error",355]],"g":[["T",0,0],["E",1,0],["Er",0,1]],"d":"Resume the task awaiting the continuation by having it either\nreturn normally or throw an error based on the state of the given\n`Result` value.\n\n- Parameter result: A value to either return or throw from the\n  continuation.\n\nA continuation must be resumed exactly once. If the continuation has\nalready been resumed through this object, then the attempt to resume\nthe continuation will trap.\n\nAfter `resume` enqueues the task, control immediately returns to\nthe caller. The task continues executing when its executor is\nable to reschedule it."},{"p":["CheckedContinuation","resume(throwing:)"],"f":[["func",12],[" ",17],["resume",7],["(",17],["throwing",1],[" ",17],["error",2],[": ",17],["E",18],[")",17]],"s":[["func",12],[" ",17],["resume",7],["(",17],["throwing",1],[": ",17],["E",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task awaiting the continuation by having it throw an error\nfrom its suspension point.\n\n- Parameter error: The error to throw from the continuation.\n\nA continuation must be resumed exactly once. If the continuation has\nalready been resumed through this object, then the attempt to resume\nthe continuation will trap.\n\nAfter `resume` enqueues the task, control immediately returns to\nthe caller. The task continues executing when its executor is\nable to reschedule it."},{"p":["CheckedContinuation","resume(returning:)"],"f":[["func",12],[" ",17],["resume",7],["(",17],["returning",1],[" ",17],["value",2],[": ",17],["T",18],[")",17]],"s":[["func",12],[" ",17],["resume",7],["(",17],["returning",1],[": ",17],["T",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task awaiting the continuation by having it return normally\nfrom its suspension point.\n\n- Parameter value: The value to return from the continuation.\n\nA continuation must be resumed exactly once. If the continuation has\nalready been resumed through this object, then the attempt to resume\nthe continuation will trap.\n\nAfter `resume` enqueues the task, control immediately returns to\nthe caller. The task continues executing when its executor is\nable to reschedule it."},{"p":["CheckedContinuation","resume()"],"f":[["func",12],[" ",17],["resume",7],["() ",17],["where",12],[" ",17],["T",18],[" == ",17],["Void",18,354]],"s":[["func",12],[" ",17],["resume",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["E",1,"Error",355]],"c":[["T",2,"Void"],["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task awaiting the continuation by having it return normally\nfrom its suspension point.\n\nA continuation must be resumed exactly once. If the continuation has\nalready been resumed through this object, then the attempt to resume\nthe continuation will trap.\n\nAfter `resume` enqueues the task, control immediately returns to\nthe caller. The task continues executing when its executor is\nable to reschedule it."},{"p":["Executor","enqueue(_:)"],"f":[["func",12],[" ",17],["enqueue",7],["(",17],["_",1],[" ",17],["job",2],[": ",17],["UnownedJob",18,48],[")",17]],"s":[["func",12],[" ",17],["enqueue",7],["(",17],["UnownedJob",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskGroup","waitForAll()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["waitForAll",7],["() ",17],["async",12]],"s":[["func",12],[" ",17],["waitForAll",7],["() ",17],["async",12]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"Wait for all of the group's remaining tasks to complete."},{"p":["TaskGroup","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["TaskGroup",18,46],["<",17],["ChildTaskResult",18],[">.",17],["Iterator",18,47]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["TaskGroup",18],["<",17],["ChildTaskResult",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","asyncUnlessCancelled(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["asyncUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["asyncUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18]],"a":{"a":{"d":true,"r":"addTaskUnlessCancelled(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","spawnUnlessCancelled(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["spawnUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["spawnUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18]],"a":{"a":{"d":true,"r":"addTaskUnlessCancelled(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","addTaskUnlessCancelled(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addTaskUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["addTaskUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"Adds a child task to the group, unless the group has been canceled.\n\n- Parameters:\n  - overridingPriority: The priority of the operation task.\n    Omit this parameter or pass `.unspecified`\n    to set the child task's priority to the priority of the group.\n  - operation: The operation to execute as part of the task group.\n- Returns: `true` if the child task was added to the group;\n  otherwise `false`."},{"p":["TaskGroup","add(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["add",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") ",17],["async",12],[" -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["add",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[") ",17],["async",12],[" -> ",17],["Bool",18]],"a":{"a":{"d":true,"r":"addTask(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" -> ",17],["ChildTaskResult",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" -> ",17],["ChildTaskResult",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"Wait for the next child task to complete,\nand return the value it returned.\n\nThe values returned by successive calls to this method\nappear in the order that the tasks *completed*,\nnot in the order that those tasks were added to the task group.\nFor example:\n\n    group.addTask { 1 }\n    group.addTask { 2 }\n\n    print(await group.next())\n    // Prints either \"2\" or \"1\".\n\nIf there aren't any pending tasks in the task group,\nthis method returns `nil`,\nwhich lets you write the following\nto wait for a single task to complete:\n\n    if let first = try await group.next() {\n       return first\n    }\n\nIt also lets you write code like the following\nto wait for all the child tasks to complete,\ncollecting the values they returned:\n\n    while let first = try await group.next() {\n       collected += value\n    }\n    return collected\n\nAwaiting on an empty group\nimmediate returns `nil` without suspending.\n\nYou can also use a `for`-`await`-`in` loop to collect results of a task group:\n\n    for await try value in group {\n        collected += value\n    }\n\nDon't call this method from outside the task\nwhere you created this task group.\nIn most cases, the Swift type system prevents this mistake.\nFor example, because the `add(priority:operation:)` method is mutating,\nthat method can't be called from a concurrent execution context like a child task.\n\n- Returns: The value returned by the next child task that completes."},{"p":["TaskGroup","async(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["async",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"s":[["func",12],[" ",17],["async",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"a":{"a":{"d":true,"r":"addTask(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","spawn(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["spawn",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"s":[["func",12],[" ",17],["spawn",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"a":{"a":{"d":true,"r":"addTask(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","addTask(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addTask",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"s":[["func",12],[" ",17],["addTask",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"Adds a child task to the group.\n\n- Parameters:\n  - overridingPriority: The priority of the operation task.\n    Omit this parameter or pass `.unspecified`\n    to set the child task's priority to the priority of the group.\n  - operation: The operation to execute as part of the task group."},{"p":["TaskGroup","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" -> ",17],["TaskGroup",18,46],["<",17],["ChildTaskResult",18],[">.",17],["Iterator",18,47],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" -> ",17],["TaskGroup",18],["<",17],["ChildTaskResult",18],[">.",17],["Iterator",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"Advances to and returns the result of the next child task.\n\nThe elements returned from this method\nappear in the order that the tasks *completed*,\nnot in the order that those tasks were added to the task group.\nAfter this method returns `nil`,\nthis iterator is guaranteed to never produce more values.\n\nFor more information about the iteration order and semantics,\nsee `TaskGroup.next()`.\n\n- Returns: The value returned by the next child task that completes,\n  or `nil` if there are no remaining child tasks,"},{"p":["TaskGroup","Iterator","cancel()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["cancel",7],["()",17]],"s":[["func",12],[" ",17],["cancel",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","cancelAll()"],"f":[["func",12],[" ",17],["cancelAll",7],["()",17]],"s":[["func",12],[" ",17],["cancelAll",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]],"d":"Cancel all of the remaining tasks in the group.\n\nAfter cancellation,\nany new results from the tasks in this group\nare silently discarded.\n\nIf you add a task to a group after canceling the group,\nthat task is canceled immediately after being added to the group.\n\nThis method can only be called by the parent task that created the task\ngroup.\n\n- SeeAlso: `Task.isCancelled`\n- SeeAlso: `TaskGroup.isCancelled`"},{"p":["AsyncIteratorProtocol","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Asynchronously advances to the next element and returns it, or ends the\nsequence if there is no next element.\n\n- Returns: The next element, if it exists, or `nil` to signal the end of\n  the sequence."},{"p":["MainActor","enqueue(_:)"],"f":[["nonisolated",12],[" ",17],["func",12],[" ",17],["enqueue",7],["(",17],["_",1],[" ",17],["job",2],[": ",17],["UnownedJob",18,48],[")",17]],"s":[["func",12],[" ",17],["enqueue",7],["(",17],["UnownedJob",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["AsyncStream","Continuation","yield(with:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["yield",7],["(",17],["with",1],[" ",17],["result",2],[": ",17],["Result",18,359],["<",17],["Element",18],[", ",17],["Never",18,356],[">) -> ",17],["AsyncStream",18,50],["<",17],["Element",18],[">.",17],["Continuation",18,51],[".",17],["YieldResult",18,11]],"s":[["func",12],[" ",17],["yield",7],["(",17],["with",1],[": ",17],["Result",18],["<",17],["Element",18],[", ",17],["Never",18],[">) -> ",17],["AsyncStream",18],["<",17],["Element",18],[">.",17],["Continuation",18],[".",17],["YieldResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnormally from its suspension point with a given result's success value.\n\n- Parameter result: A result to yield from the continuation.\n- Returns: A `YieldResult` that indicates the success or failure of the\n  yield operation.\n\nIf nothing is awaiting the next value, the method attempts to buffer the\nresult's element.\n\nIf you call this method repeatedly, each call returns immediately, without\nblocking for any awaiting consumption from the iteration."},{"p":["AsyncStream","Continuation","yield()"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["yield",7],["() -> ",17],["AsyncStream",18,50],["<",17],["Element",18],[">.",17],["Continuation",18,51],[".",17],["YieldResult",18,11],[" ",17],["where",12],[" ",17],["Element",18],[" == ",17],["Void",18,354]],"s":[["func",12],[" ",17],["yield",7],["() -> ",17],["AsyncStream",18],["<",17],["Element",18],[">.",17],["Continuation",18],[".",17],["YieldResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Element",2,"Void"]],"g":[["Element",0,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnormally from its suspension point.\n\n- Returns: A `YieldResult` that indicates the success or failure of the\n  yield operation.\n\nUse this method with `AsyncStream` instances whose `Element` type is\n`Void`. In this case, the `yield()` call unblocks the awaiting\niteration; there is no value to return.\n\nIf you call this method repeatedly, each call returns immediately, without\nblocking for any awaiting consumption from the iteration."},{"p":["AsyncStream","Continuation","yield(_:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["yield",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Element",18],[") -> ",17],["AsyncStream",18,50],["<",17],["Element",18],[">.",17],["Continuation",18,51],[".",17],["YieldResult",18,11]],"s":[["func",12],[" ",17],["yield",7],["(",17],["Element",18],[") -> ",17],["AsyncStream",18],["<",17],["Element",18],[">.",17],["Continuation",18],[".",17],["YieldResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnomally from its suspension point with a given element.\n\n- Parameter value: The value to yield from the continuation.\n- Returns: A `YieldResult` that indicates the success or failure of the\n  yield operation.\n\nIf nothing is awaiting the next value, this method attempts to buffer the\nresult's element.\n\nThis can be called more than once and returns to the caller immediately\nwithout blocking for any awaiting consumption from the iteration."},{"p":["AsyncStream","Continuation","finish()"],"f":[["func",12],[" ",17],["finish",7],["()",17]],"s":[["func",12],[" ",17],["finish",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnil, which signifies the end of the iteration.\n\nCalling this function more than once has no effect. After calling\nfinish, the stream enters a terminal state and doesn't produces any additional\nelements."},{"p":["AsyncStream","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncStream",18,50],["<",17],["Element",18],[">.",17],["Iterator",18,52]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncStream",18],["<",17],["Element",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"Creates the asynchronous iterator that produces elements of this\nasynchronous sequence."},{"p":["AsyncStream","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" -> ",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Element",0,0]],"d":"The next value from the asynchronous stream.\n\nWhen `next()` returns `nil`, this signifies the end of the\n`AsyncStream`.\n\nIt is a programmer error to invoke `next()` from a\nconcurrent context that contends with another such call, which\nresults in a call to `fatalError()`.\n\nIf you cancel the task this iterator is running in while `next()` is\nawaiting a value, the `AsyncStream` terminates. In this case, `next()`\nmight return `nil` immediately, or return `nil` on subsequent calls."},{"p":["Task","get()"],"f":[["func",12],[" ",17],["get",7],["() ",17],["async",12],[" -> ",17],["Success",18]],"s":[["func",12],[" ",17],["get",7],["() ",17],["async",12],[" -> ",17],["Success",18]],"a":{"a":{"d":true,"m":"get() has been replaced by .value"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",2,"Never",356]],"c":[["Success",1,"Sendable",361],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","get()"],"f":[["func",12],[" ",17],["get",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18]],"s":[["func",12],[" ",17],["get",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Success",18]],"a":{"a":{"d":true,"m":"get() has been replaced by .value"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,358],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","cancel()"],"f":[["func",12],[" ",17],["cancel",7],["()",17]],"s":[["func",12],[" ",17],["cancel",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["Success",0,0],["Failure",1,0]],"d":"Indicates that the task should stop running.\n\nTask cancellation is cooperative:\na task that supports cancellation\nchecks whether it has been canceled at various points during its work.\n\nCalling this method on a task that doesn't support cancellation\nhas no effect.\nLikewise, if the task has already run\npast the last point where it would stop early,\ncalling this method has no effect.\n\n- SeeAlso: `Task.checkCancellation()`"},{"p":["Task","getResult()"],"f":[["func",12],[" ",17],["getResult",7],["() ",17],["async",12],[" -> ",17],["Result",18,359],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"s":[["func",12],[" ",17],["getResult",7],["() ",17],["async",12],[" -> ",17],["Result",18],["<",17],["Success",18],[", ",17],["Failure",18],[">",17]],"a":{"a":{"d":true,"m":"getResult() has been replaced by .result"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["UnsafeContinuation","resume(with:)"],"f":[["func",12],[" ",17],["resume",7],["(",17],["with",1],[" ",17],["result",2],[": ",17],["Result",18,359],["<",17],["T",18],[", ",17],["E",18],[">)",17]],"s":[["func",12],[" ",17],["resume",7],["(",17],["with",1],[": ",17],["Result",18],["<",17],["T",18],[", ",17],["E",18],[">)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["E",1,"Error",355]],"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task that's awaiting the continuation\nby returning or throwing the given result value.\n\n- Parameter result: The result.\n  If it contains a `.success` value,\n  the continuation returns that value;\n  otherwise, it throws the `.error` value.\n\nA continuation must be resumed exactly once.\nIf the continuation has already resumed,\nthen calling this method results in undefined behavior.\n\nAfter calling this method,\ncontrol immediately returns to the caller.\nThe task continues executing\nwhen its executor schedules it."},{"p":["UnsafeContinuation","resume(with:)"],"f":[["func",12],[" ",17],["resume",7],["<",17],["Er",0],[">(",17],["with",1],[" ",17],["result",2],[": ",17],["Result",18,359],["<",17],["T",18],[", ",17],["Er",18],[">) ",17],["where",12],[" ",17],["E",18],[" == ",17],["Error",18,355],[", ",17],["Er",18],[" : ",17],["Error",18,355]],"s":[["func",12],[" ",17],["resume",7],["<",17],["Er",0],[">(",17],["with",1],[": ",17],["Result",18],["<",17],["T",18],[", ",17],["Er",18],[">)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["E",1,"Error",355]],"c":[["E",2,"Error",355],["Er",1,"Error",355]],"g":[["T",0,0],["E",1,0],["Er",0,1]],"d":"Resume the task that's awaiting the continuation\nby returning or throwing the given result value.\n\n- Parameter result: The result.\n  If it contains a `.success` value,\n  the continuation returns that value;\n  otherwise, it throws the `.error` value.\n\nA continuation must be resumed exactly once.\nIf the continuation has already resumed,\nthen calling this method results in undefined behavior.\n\nAfter calling this method,\ncontrol immediately returns to the caller.\nThe task continues executing\nwhen its executor schedules it."},{"p":["UnsafeContinuation","resume(throwing:)"],"f":[["func",12],[" ",17],["resume",7],["(",17],["throwing",1],[" ",17],["error",2],[": ",17],["E",18],[")",17]],"s":[["func",12],[" ",17],["resume",7],["(",17],["throwing",1],[": ",17],["E",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task that's awaiting the continuation\nby throwing the given error.\n\n- Parameter error: The error to throw from the continuation.\n\nA continuation must be resumed exactly once.\nIf the continuation has already resumed,\nthen calling this method results in undefined behavior.\n\nAfter calling this method,\ncontrol immediately returns to the caller.\nThe task continues executing\nwhen its executor schedules it."},{"p":["UnsafeContinuation","resume(returning:)"],"f":[["func",12],[" ",17],["resume",7],["(",17],["returning",1],[" ",17],["value",2],[": ",17],["T",18],[")",17]],"s":[["func",12],[" ",17],["resume",7],["(",17],["returning",1],[": ",17],["T",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task that's awaiting the continuation\nby returning the given value.\n\n- Parameter value: The value to return from the continuation.\n\nA continuation must be resumed exactly once.\nIf the continuation has already resumed,\nthen calling this method results in undefined behavior.\n\nAfter calling this method,\ncontrol immediately returns to the caller.\nThe task continues executing\nwhen its executor schedules it."},{"p":["UnsafeContinuation","resume(returning:)"],"f":[["func",12],[" ",17],["resume",7],["(",17],["returning",1],[" ",17],["value",2],[": ",17],["T",18],[") ",17],["where",12],[" ",17],["E",18],[" == ",17],["Never",18,356]],"s":[["func",12],[" ",17],["resume",7],["(",17],["returning",1],[": ",17],["T",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["E",2,"Never",356]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task that's awaiting the continuation\nby returning the given value.\n\n- Parameter value: The value to return from the continuation.\n\nA continuation must be resumed exactly once.\nIf the continuation has already resumed,\nthen calling this method results in undefined behavior.\n\nAfter calling this method,\ncontrol immediately returns to the caller.\nThe task continues executing\nwhen its executor schedules it."},{"p":["UnsafeContinuation","resume()"],"f":[["func",12],[" ",17],["resume",7],["() ",17],["where",12],[" ",17],["T",18],[" == ",17],["Void",18,354]],"s":[["func",12],[" ",17],["resume",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["E",1,"Error",355]],"c":[["T",2,"Void"],["E",1,"Error",355]],"g":[["T",0,0],["E",1,0]],"d":"Resume the task that's awaiting the continuation by returning.\n\nA continuation must be resumed exactly once.\nIf the continuation has already resumed,\nthen calling this method results in undefined behavior.\n\nAfter calling this method,\ncontrol immediately returns to the caller.\nThe task continues executing\nwhen its executor schedules it."},{"p":["SerialExecutor","asUnownedSerialExecutor()"],"f":[["func",12],[" ",17],["asUnownedSerialExecutor",7],["() -> ",17],["UnownedSerialExecutor",18,55]],"s":[["func",12],[" ",17],["asUnownedSerialExecutor",7],["() -> ",17],["UnownedSerialExecutor",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Convert this executor value to the optimized form of borrowed\nexecutor references."},{"p":["SerialExecutor","enqueue(_:)"],"f":[["func",12],[" ",17],["enqueue",7],["(",17],["_",1],[" ",17],["job",2],[": ",17],["UnownedJob",18,48],[")",17]],"s":[["func",12],[" ",17],["enqueue",7],["(",17],["UnownedJob",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["ThrowingTaskGroup","nextResult()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["nextResult",7],["() ",17],["async",12],[" -> ",17],["Result",18,359],["<",17],["ChildTaskResult",18],[", ",17],["Failure",18],[">?",17]],"s":[["func",12],[" ",17],["nextResult",7],["() ",17],["async",12],[" -> ",17],["Result",18],["<",17],["ChildTaskResult",18],[", ",17],["Failure",18],[">?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"Wait for the next child task to complete,\nand return a result containing either\nthe value that the child task returned or the error that it threw.\n\nThe values returned by successive calls to this method\nappear in the order that the tasks *completed*,\nnot in the order that those tasks were added to the task group.\nFor example:\n\n    group.addTask { 1 }\n    group.addTask { 2 }\n\n    guard let result = await group.nextResult() else {\n        return  // No task to wait on, which won't happen in this example.\n    }\n    \n    switch result { \n    case .success(let value): print(value)\n    case .failure(let error): print(\"Failure: \\(error)\")\n    }\n    // Prints either \"2\" or \"1\".\n\nIf the next child task throws an error\nand you propagate that error from this method\nout of the body of a call to the\n`ThrowingTaskGroup.withThrowingTaskGroup(of:returning:body:)` method,\nthen all remaining child tasks in that group are implicitly canceled.\n\n- Returns: A `Result.success` value\n  containing the value that the child task returned,\n  or a `Result.failure` value\n  containing the error that the child task threw.\n\n- SeeAlso: `next()`"},{"p":["ThrowingTaskGroup","waitForAll()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["waitForAll",7],["() ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["waitForAll",7],["() ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"Wait for all of the group's remaining tasks to complete."},{"p":["ThrowingTaskGroup","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["ThrowingTaskGroup",18,56],["<",17],["ChildTaskResult",18],[", ",17],["Failure",18],[">.",17],["Iterator",18,57]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["ThrowingTaskGroup",18],["<",17],["ChildTaskResult",18],[", ",17],["Failure",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","asyncUnlessCancelled(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["asyncUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["asyncUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18]],"a":{"a":{"d":true,"r":"addTaskUnlessCancelled(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","spawnUnlessCancelled(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["spawnUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["spawnUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18]],"a":{"a":{"d":true,"r":"addTaskUnlessCancelled(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","addTaskUnlessCancelled(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addTaskUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["addTaskUnlessCancelled",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"Adds a child task to the group, unless the group has been canceled.\n\nThis method doesn't throw an error, even if the child task does.\nInstead, the corresponding call to `ThrowingTaskGroup.next()` rethrows that error.\n\n- Parameters:\n  - overridingPriority: The priority of the operation task.\n    Omit this parameter or pass `.unspecified`\n    to set the child task's priority to the priority of the group.\n  - operation: The operation to execute as part of the task group.\n- Returns: `true` if the child task was added to the group;\n  otherwise `false`."},{"p":["ThrowingTaskGroup","add(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["add",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") ",17],["async",12],[" -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["add",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[") ",17],["async",12],[" -> ",17],["Bool",18]],"a":{"a":{"d":true,"r":"addTask(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"Wait for the next child task to complete,\nand return the value it returned or rethrow the error it threw.\n\nThe values returned by successive calls to this method\nappear in the order that the tasks *completed*,\nnot in the order that those tasks were added to the task group.\nFor example:\n\n    group.addTask { 1 }\n    group.addTask { 2 }\n\n    print(await group.next())\n    // Prints either \"2\" or \"1\".\n\nIf there aren't any pending tasks in the task group,\nthis method returns `nil`,\nwhich lets you write the following\nto wait for a single task to complete:\n\n    if let first = try await group.next() {\n       return first\n    }\n\nIt also lets you write code like the following\nto wait for all the child tasks to complete,\ncollecting the values they returned:\n\n    while let first = try await group.next() {\n       collected += value\n    }\n    return collected\n\nAwaiting on an empty group\nimmediate returns `nil` without suspending.\n\nYou can also use a `for`-`await`-`in` loop to collect results of a task group:\n\n    for await try value in group {\n        collected += value\n    }\n\nIf the next child task throws an error\nand you propagate that error from this method\nout of the body of a call to the\n`ThrowingTaskGroup.withThrowingTaskGroup(of:returning:body:)` method,\nthen all remaining child tasks in that group are implicitly canceled.\n\nDon't call this method from outside the task\nwhere this task group was created.\nIn most cases, the Swift type system prevents this mistake;\nfor example, because the `add(priority:operation:)` method is mutating,\nthat method can't be called from a concurrent execution context like a child task.\n\n- Returns: The value returned by the next child task that completes.\n\n- Throws: The error thrown by the next child task that completes.\n\n- SeeAlso: `nextResult()`"},{"p":["ThrowingTaskGroup","async(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["async",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"s":[["func",12],[" ",17],["async",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"a":{"a":{"d":true,"r":"addTask(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","spawn(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["spawn",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"s":[["func",12],[" ",17],["spawn",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"a":{"a":{"d":true,"r":"addTask(priority:operation:)"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","addTask(priority:operation:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["addTask",7],["(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"s":[["func",12],[" ",17],["addTask",7],["(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ChildTaskResult",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"Adds a child task to the group.\n\nThis method doesn't throw an error, even if the child task does.\nInstead, the corresponding call to `ThrowingTaskGroup.next()` rethrows that error.\n\n  - overridingPriority: The priority of the operation task.\n    Omit this parameter or pass `.unspecified`\n    to set the child task's priority to the priority of the group.\n  - operation: The operation to execute as part of the task group."},{"p":["ThrowingTaskGroup","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ThrowingTaskGroup",18,56],["<",17],["ChildTaskResult",18],[", ",17],["Failure",18],[">.",17],["Iterator",18,57],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ThrowingTaskGroup",18],["<",17],["ChildTaskResult",18],[", ",17],["Failure",18],[">.",17],["Iterator",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"Advances to and returns the result of the next child task.\n\nThe elements returned from this method\nappear in the order that the tasks *completed*,\nnot in the order that those tasks were added to the task group.\nAfter this method returns `nil`,\nthis iterator is guaranteed to never produce more values.\n\nFor more information about the iteration order and semantics,\nsee `ThrowingTaskGroup.next()` \n\n- Throws: The error thrown by the next child task that completes.\n\n- Returns: The value returned by the next child task that completes,\n  or `nil` if there are no remaining child tasks,"},{"p":["ThrowingTaskGroup","Iterator","cancel()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["cancel",7],["()",17]],"s":[["func",12],[" ",17],["cancel",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","cancelAll()"],"f":[["func",12],[" ",17],["cancelAll",7],["()",17]],"s":[["func",12],[" ",17],["cancelAll",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]],"d":"Cancel all of the remaining tasks in the group.\n\nAfter cancellation,\nany new results or errors from the tasks in this group\nare silently discarded.\n\nIf you add a task to a group after canceling the group,\nthat task is canceled immediately after being added to the group.\n\nThere are no restrictions on where you can call this method.\nCode inside a child task or even another task can cancel a group.\n\n- SeeAlso: `Task.isCancelled`\n- SeeAlso: `ThrowingTaskGroup.isCancelled`"},{"p":["AsyncSequence","allSatisfy(_:)"],"f":[["func",12],[" ",17],["allSatisfy",7],["(",17],["_",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["allSatisfy",7],["((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns a Boolean value that indicates whether all elements produced by the\nasynchronous sequence satisfies the given predicate.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `allSatisfy(_:)` method checks to see whether\nall elements produced by the sequence are less than `10`.\n\n    let allLessThanTen = await Counter(howHigh: 10)\n        .allSatisfy { $0 < 10 }\n    print(allLessThanTen)\n    // Prints: false\n\nThe predicate executes each time the asynchronous sequence produces an\nelement, until either the predicate returns `false` or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns `true`.\n\n- Parameter predicate: A closure that takes an element of the asynchronous\n  sequence as its argument and returns a Boolean value that indicates\n  whether the passed element satisfies a condition.\n- Returns: `true` if the sequence contains only elements that satisfy\n  `predicate`; otherwise, `false`."},{"p":["AsyncSequence","compactMap(_:)"],"f":[["func",12],[" ",17],["compactMap",7],["<",17],["ElementOfResult",0],[">(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["ElementOfResult",18],["?) -> ",17],["AsyncCompactMapSequence",18,28],["<",17],["Self",18],[", ",17],["ElementOfResult",18],[">",17]],"s":[["func",12],[" ",17],["compactMap",7],["<",17],["ElementOfResult",0],[">((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["ElementOfResult",18],["?) -> ",17],["AsyncCompactMapSequence",18],["<",17],["Self",18],[", ",17],["ElementOfResult",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["ElementOfResult",0,1]],"d":"Creates an asynchronous sequence that maps the given closure over the\nasynchronous sequence’s elements, omitting results that don't return a\nvalue.\n\nUse the `compactMap(_:)` method to transform every element received from\na base asynchronous sequence, while also discarding any `nil` results\nfrom the closure. Typically, you use this to transform from one type of\nelement to another.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `5`. The closure provided to the `compactMap(_:)`\nmethod takes each `Int` and looks up a corresponding `String` from a\n`romanNumeralDict` dictionary. Because there is no key for `4`, the closure\nreturns `nil` in this case, which `compactMap(_:)` omits from the\ntransformed asynchronous sequence.\n\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n        \n    let stream = Counter(howHigh: 5)\n        .compactMap { romanNumeralDict[$0] }\n    for await numeral in stream {\n        print(\"\\(numeral) \", terminator: \" \")\n    }\n    // Prints: I  II  III  V\n\n- Parameter transform: A mapping closure. `transform` accepts an element\n  of this sequence as its parameter and returns a transformed value of the\n  same or of a different type.\n- Returns: An asynchronous sequence that contains, in order, the\n  non-`nil` elements produced by the `transform` closure."},{"p":["AsyncSequence","compactMap(_:)"],"f":[["func",12],[" ",17],["compactMap",7],["<",17],["ElementOfResult",0],[">(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ElementOfResult",18],["?) -> ",17],["AsyncThrowingCompactMapSequence",18,40],["<",17],["Self",18],[", ",17],["ElementOfResult",18],[">",17]],"s":[["func",12],[" ",17],["compactMap",7],["<",17],["ElementOfResult",0],[">((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["ElementOfResult",18],["?) -> ",17],["AsyncThrowingCompactMapSequence",18],["<",17],["Self",18],[", ",17],["ElementOfResult",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["ElementOfResult",0,1]],"d":"Creates an asynchronous sequence that maps an error-throwing closure over\nthe base sequence’s elements, omitting results that don't return a value.\n\nUse the `compactMap(_:)` method to transform every element received from\na base asynchronous sequence, while also discarding any `nil` results\nfrom the closure. Typically, you use this to transform from one type of\nelement to another.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `5`. The closure provided to the `compactMap(_:)`\nmethod takes each `Int` and looks up a corresponding `String` from a\n`romanNumeralDict` dictionary. Since there is no key for `4`, the closure\nreturns `nil` in this case, which `compactMap(_:)` omits from the\ntransformed asynchronous sequence. When the value is `5`, the closure\nthrows `MyError`, terminating the sequence.\n\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n    do {\n        let stream = Counter(howHigh: 5)\n            .compactMap { (value) throws -> String? in\n                if value == 5 {\n                    throw MyError()\n                }\n                return romanNumeralDict[value]\n            }\n        for try await numeral in stream {\n            print(\"\\(numeral) \", terminator: \" \")\n        }\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n    // Prints: I  II  III  Error: MyError()\n\n- Parameter transform: An error-throwing mapping closure. `transform`\n  accepts an element of this sequence as its parameter and returns a\n  transformed value of the same or of a different type. If `transform`\n  throws an error, the sequence ends.\n- Returns: An asynchronous sequence that contains, in order, the\n  non-`nil` elements produced by the `transform` closure. The sequence\n  ends either when the base sequence ends or when `transform` throws an\n  error."},{"p":["AsyncSequence","map(_:)"],"f":[["func",12],[" ",17],["map",7],["<",17],["Transformed",0],[">(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Transformed",18],[") -> ",17],["AsyncMapSequence",18,16],["<",17],["Self",18],[", ",17],["Transformed",18],[">",17]],"s":[["func",12],[" ",17],["map",7],["<",17],["Transformed",0],[">((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Transformed",18],[") -> ",17],["AsyncMapSequence",18],["<",17],["Self",18],[", ",17],["Transformed",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Transformed",0,1]],"d":"Creates an asynchronous sequence that maps the given closure over the\nasynchronous sequence’s elements.\n\nUse the `map(_:)` method to transform every element received from a base\nasynchronous sequence. Typically, you use this to transform from one type\nof element to another.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `5`. The closure provided to the `map(_:)` method\ntakes each `Int` and looks up a corresponding `String` from a\n`romanNumeralDict` dictionary. This means the outer `for await in` loop\niterates over `String` instances instead of the underlying `Int` values\nthat `Counter` produces:\n\n    let romanNumeralDict: [Int: String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n    let stream = Counter(howHigh: 5)\n        .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    for await numeral in stream {\n        print(\"\\(numeral) \", terminator: \" \")\n    }\n    // Prints: I  II  III  (unknown)  V\n\n- Parameter transform: A mapping closure. `transform` accepts an element\n  of this sequence as its parameter and returns a transformed value of the\n  same or of a different type.\n- Returns: An asynchronous sequence that contains, in order, the elements\n  produced by the `transform` closure."},{"p":["AsyncSequence","map(_:)"],"f":[["func",12],[" ",17],["map",7],["<",17],["Transformed",0],[">(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Transformed",18],[") -> ",17],["AsyncThrowingMapSequence",18,32],["<",17],["Self",18],[", ",17],["Transformed",18],[">",17]],"s":[["func",12],[" ",17],["map",7],["<",17],["Transformed",0],[">((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Transformed",18],[") -> ",17],["AsyncThrowingMapSequence",18],["<",17],["Self",18],[", ",17],["Transformed",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Transformed",0,1]],"d":"Creates an asynchronous sequence that maps the given error-throwing\nclosure over the asynchronous sequence’s elements.\n\nUse the `map(_:)` method to transform every element received from a base\nasynchronous sequence. Typically, you use this to transform from one type\nof element to another.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `5`. The closure provided to the `map(_:)` method\ntakes each `Int` and looks up a corresponding `String` from a\n`romanNumeralDict` dictionary. This means the outer `for await in` loop\niterates over `String` instances instead of the underlying `Int` values\nthat `Counter` produces. Also, the dictionary doesn't provide a key for\n`4`, and the closure throws an error for any key it can't look up, so\nreceiving this value from `Counter` ends the modified sequence with an\nerror.\n\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n    do {\n        let stream = Counter(howHigh: 5)\n            .map { (value) throws -> String in\n                guard let roman = romanNumeralDict[value] else {\n                    throw MyError()\n                }\n                return roman\n            }\n        for try await numeral in stream {\n            print(\"\\(numeral) \", terminator: \" \")\n        }\n    } catch {\n        print (\"Error: \\(error)\")\n    }\n    // Prints: I  II  III  Error: MyError()\n\n- Parameter transform: A mapping closure. `transform` accepts an element\n  of this sequence as its parameter and returns a transformed value of the\n  same or of a different type. `transform` can also throw an error, which\n  ends the transformed sequence.\n- Returns: An asynchronous sequence that contains, in order, the elements\n  produced by the `transform` closure."},{"p":["AsyncSequence","max(by:)"],"f":[["@warn_unqualified_access",3],[" ",17],["func",12],[" ",17],["max",7],["(",17],["by",1],[" ",17],["areInIncreasingOrder",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["max",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns the maximum element in the asynchronous sequence, using the given\npredicate as the comparison between elements.\n\nUse this method when the asynchronous sequence's values don't conform\nto `Comparable`, or when you want to apply a custom ordering to the\nsequence.\n\nThe predicate must be a *strict weak ordering* over the elements. That is,\nfor any elements `a`, `b`, and `c`, the following conditions must hold:\n\n- `areInIncreasingOrder(a, a)` is always `false`. (Irreflexivity)\n- If `areInIncreasingOrder(a, b)` and `areInIncreasingOrder(b, c)` are\n  both `true`, then `areInIncreasingOrder(a, c)` is also\n  `true`. (Transitive comparability)\n- Two elements are *incomparable* if neither is ordered before the other\n  according to the predicate. If `a` and `b` are incomparable, and `b`\n  and `c` are incomparable, then `a` and `c` are also incomparable.\n  (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, `Rank`,\nwhich ranges from `ace` (low) to `king` (high). An asynchronous sequence\ncalled `RankCounter` produces all elements of the array. The predicate\nprovided to the `max(by:)` method sorts ranks based on their `rawValue`:\n\n    enum Rank: Int {\n        case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n    }\n\n    let max = await RankCounter()\n        .max { $0.rawValue < $1.rawValue }\n    print(max ?? \"none\")\n    // Prints: king\n\n- Parameter areInIncreasingOrder: A predicate that returns `true` if its\n  first argument should be ordered before its second argument; otherwise,\n  `false`.\n- Returns: The sequence’s minimum element, according to\n  `areInIncreasingOrder`. If the sequence has no elements, returns `nil`."},{"p":["AsyncSequence","min(by:)"],"f":[["@warn_unqualified_access",3],[" ",17],["func",12],[" ",17],["min",7],["(",17],["by",1],[" ",17],["areInIncreasingOrder",2],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["min",7],["(",17],["by",1],[": (",17],["Self",18],[".",17],["Element",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns the minimum element in the asynchronous sequence, using the given\npredicate as the comparison between elements.\n\nUse this method when the asynchronous sequence's values don't conform\nto `Comparable`, or when you want to apply a custom ordering to the\nsequence.\n\nThe predicate must be a *strict weak ordering* over the elements. That is,\nfor any elements `a`, `b`, and `c`, the following conditions must hold:\n\n- `areInIncreasingOrder(a, a)` is always `false`. (Irreflexivity)\n- If `areInIncreasingOrder(a, b)` and `areInIncreasingOrder(b, c)` are\n  both `true`, then `areInIncreasingOrder(a, c)` is also\n  `true`. (Transitive comparability)\n- Two elements are *incomparable* if neither is ordered before the other\n  according to the predicate. If `a` and `b` are incomparable, and `b`\n  and `c` are incomparable, then `a` and `c` are also incomparable.\n  (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, `Rank`,\nwhich ranges from `ace` (low) to `king` (high). An asynchronous sequence\ncalled `RankCounter` produces all elements of the array. The predicate\nprovided to the `min(by:)` method sorts ranks based on their `rawValue`:\n\n    enum Rank: Int {\n        case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n    }\n\n    let min = await RankCounter()\n        .min { $0.rawValue < $1.rawValue }\n    print(min ?? \"none\")\n    // Prints: ace\n\n- Parameter areInIncreasingOrder: A predicate that returns `true` if its\n  first argument should be ordered before its second argument; otherwise,\n  `false`.\n- Returns: The sequence’s minimum element, according to\n  `areInIncreasingOrder`. If the sequence has no elements, returns `nil`."},{"p":["AsyncSequence","drop(while:)"],"f":[["func",12],[" ",17],["drop",7],["(",17],["while",1],[" ",17],["predicate",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Bool",18,348],[") -> ",17],["AsyncDropWhileSequence",18,26],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["drop",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Bool",18],[") -> ",17],["AsyncDropWhileSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Omits elements from the base asynchronous sequence until a given closure\nreturns false, after which it passes through all remaining elements.\n\nUse `drop(while:)` to omit elements from an asynchronous sequence until\nthe element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `drop(while:)` method causes the modified\nsequence to ignore received values until it encounters one that is\ndivisible by `3`:\n\n    let stream = Counter(howHigh: 10)\n        .drop { $0 % 3 != 0 }\n    for await number in stream {\n        print(\"\\(number) \", terminator: \" \")\n    }\n    // prints \"3 4 5 6 7 8 9 10\"\n\nAfter the predicate returns `false`, the sequence never executes it again,\nand from then on the sequence passes through elements from its underlying\nsequence as-is.\n\n- Parameter predicate: A closure that takes an element as a parameter and\n  returns a Boolean value indicating whether to drop the element from the\n  modified sequence.\n- Returns: An asynchronous sequence that skips over values from the\n  base sequence until the provided closure returns `false`."},{"p":["AsyncSequence","drop(while:)"],"f":[["func",12],[" ",17],["drop",7],["(",17],["while",1],[" ",17],["predicate",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") -> ",17],["AsyncThrowingDropWhileSequence",18,38],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["drop",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") -> ",17],["AsyncThrowingDropWhileSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Omits elements from the base sequence until a given error-throwing closure\nreturns false, after which it passes through all remaining elements.\n\nUse `drop(while:)` to omit elements from an asynchronous sequence until\nthe element received meets a condition you specify. If the closure you\nprovide throws an error, the sequence produces no elements and throws\nthe error instead.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The predicate passed to the `drop(while:)`\nmethod throws an error if it encounters an even number, and otherwise\nreturns `true` while it receives elements less than `5`. Because the\npredicate throws when it receives `2` from the base sequence, this example\nthrows without ever printing anything.\n\n    do {\n        let stream =  Counter(howHigh: 10)\n            .drop {\n                if $0 % 2 == 0 {\n                    throw EvenError()\n                }\n                return $0 < 5\n            }\n        for try await number in stream {\n            print(\"\\(number) \")\n        }\n    } catch {\n        print (\"\\(error)\")\n    }\n    // Prints: EvenError()\n\nAfter the predicate returns `false`, the sequence never executes it again,\nand from then on the sequence passes through elements from its underlying\nsequence. A predicate that throws an error also never executes again.\n\n- Parameter predicate: An error-throwing closure that takes an element as\n  a parameter and returns a Boolean value indicating whether to drop the\n  element from the modified sequence.\n- Returns: An asynchronous sequence that skips over values until the\n  provided closure returns `false` or throws an error."},{"p":["AsyncSequence","first(where:)"],"f":[["func",12],[" ",17],["first",7],["(",17],["where",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["first",7],["(",17],["where",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns the first element of the sequence that satisfies the given\npredicate.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `first(where:)` method returns the first\nmember of the sequence that's evenly divisible by both `2` and `3`.\n\n    let divisibleBy2And3 = await Counter(howHigh: 10)\n        .first { $0 % 2 == 0 && $0 % 3 == 0 }\n    print(divisibleBy2And3 ?? \"none\")\n    // Prints: 6\n\nThe predicate executes each time the asynchronous sequence produces an\nelement, until either the predicate finds a match or the sequence ends.\n\n- Parameter predicate: A closure that takes an element of the asynchronous\n sequence as its argument and returns a Boolean value that indicates\n whether the element is a match.\n- Returns: The first element of the sequence that satisfies `predicate`,\n  or `nil` if there is no element that satisfies `predicate`."},{"p":["AsyncSequence","filter(_:)"],"f":[["func",12],[" ",17],["filter",7],["(",17],["_",1],[" ",17],["isIncluded",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Bool",18,348],[") -> ",17],["AsyncFilterSequence",18,18],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["filter",7],["((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Bool",18],[") -> ",17],["AsyncFilterSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Creates an asynchronous sequence that contains, in order, the elements of\nthe base sequence that satisfy the given predicate.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `filter(_:)` method returns `true` for even\nvalues and `false` for odd values, thereby filtering out the odd values:\n\n    let stream = Counter(howHigh: 10)\n        .filter { $0 % 2 == 0 }\n    for await number in stream {\n        print(\"\\(number) \", terminator: \" \")\n    }\n    // Prints: 2  4  6  8  10\n\n- Parameter isIncluded: A closure that takes an element of the\n  asynchronous sequence as its argument and returns a Boolean value\n  that indicates whether to include the element in the filtered sequence.\n- Returns: An asynchronous sequence that contains, in order, the elements\n  of the base sequence that satisfy the given predicate."},{"p":["AsyncSequence","filter(_:)"],"f":[["func",12],[" ",17],["filter",7],["(",17],["_",1],[" ",17],["isIncluded",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") -> ",17],["AsyncThrowingFilterSequence",18,34],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["filter",7],["((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") -> ",17],["AsyncThrowingFilterSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Creates an asynchronous sequence that contains, in order, the elements of\nthe base sequence that satisfy the given error-throwing predicate.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `filter(_:)` method returns `true` for even\nvalues and `false` for odd values, thereby filtering out the odd values,\nbut also throws an error for values divisible by 5:\n\n    do {\n        let stream =  Counter(howHigh: 10)\n            .filter {\n                if $0 % 5 == 0 {\n                    throw MyError()\n                }\n                return $0 % 2 == 0\n            }\n        for try await number in stream {\n            print(\"\\(number) \", terminator: \" \")\n        }\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n    // Prints: 2  4  Error: MyError()\n\n- Parameter isIncluded: An error-throwing closure that takes an element\n  of the asynchronous sequence as its argument and returns a Boolean value\n  that indicates whether to include the element in the filtered sequence.\n- Returns: An asynchronous sequence that contains, in order, the elements\n  of the base sequence that satisfy the given predicate. If the predicate\n  throws an error, the sequence contains only values produced prior to\n  the error."},{"p":["AsyncSequence","prefix(while:)"],"f":[["func",12],[" ",17],["prefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Bool",18,348],[") ",17],["rethrows",12],[" -> ",17],["AsyncPrefixWhileSequence",18,30],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["prefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["AsyncPrefixWhileSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns an asynchronous sequence, containing the initial, consecutive\nelements of the base sequence that satisfy the given predicate.\n\nUse `prefix(while:)` to produce values while elements from the base\nsequence meet a condition you specify. The modified sequence ends when\nthe predicate closure returns `false`.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `prefix(while:)` method causes the modified\nsequence to pass along values so long as they aren’t divisible by `2` and\n`3`. Upon reaching `6`, the sequence ends:\n\n    let stream = Counter(howHigh: 10)\n        .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\n    for try await number in stream {\n        print(\"\\(number) \", terminator: \" \")\n    }\n    // prints \"1  2  3  4  5\"\n    \n- Parameter predicate: A closure that takes an element as a parameter and\n  returns a Boolean value indicating whether the element should be\n  included in the modified sequence.\n- Returns: An asynchronous sequence of the initial, consecutive\n  elements that satisfy `predicate`."},{"p":["AsyncSequence","prefix(while:)"],"f":[["func",12],[" ",17],["prefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") ",17],["rethrows",12],[" -> ",17],["AsyncThrowingPrefixWhileSequence",18,42],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["prefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["AsyncThrowingPrefixWhileSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns an asynchronous sequence, containing the initial, consecutive\nelements of the base sequence that satisfy the given error-throwing\npredicate.\n\nUse `prefix(while:)` to produce values while elements from the base\nsequence meet a condition you specify. The modified sequence ends when\nthe predicate closure returns `false` or throws an error.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `prefix(_:)` method causes the modified\nsequence to pass through values less than `8`, but throws an\nerror when it receives a value that's divisible by `5`:\n\n    do {\n        let stream = try Counter(howHigh: 10)\n            .prefix {\n                if $0 % 5 == 0 {\n                    throw MyError()\n                }\n                return $0 < 8\n            }\n        for try await number in stream {\n            print(\"\\(number) \", terminator: \" \")\n        }\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n    // Prints: 1  2  3  4  Error: MyError()\n\n- Parameter predicate: A error-throwing closure that takes an element of\n  the asynchronous sequence as its argument and returns a Boolean value\n  that indicates whether to include the element in the modified sequence.\n- Returns: An asynchronous sequence that contains, in order, the elements\n  of the base sequence that satisfy the given predicate. If the predicate\n  throws an error, the sequence contains only values produced prior to\n  the error."},{"p":["AsyncSequence","prefix(_:)"],"f":[["func",12],[" ",17],["prefix",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,350],[") -> ",17],["AsyncPrefixSequence",18,20],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["prefix",7],["(",17],["Int",18],[") -> ",17],["AsyncPrefixSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns an asynchronous sequence, up to the specified maximum length,\ncontaining the initial elements of the base asynchronous sequence.\n\nUse `prefix(_:)` to reduce the number of elements produced by the\nasynchronous sequence.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `prefix(_:)` method causes the modified\nsequence to pass through the first six values, then end.\n\n    for await number in Counter(howHigh: 10).prefix(6) {\n        print(\"\\(number) \")\n    }\n    // prints \"1 2 3 4 5 6\"\n\nIf the count passed to `prefix(_:)` exceeds the number of elements in the\nbase sequence, the result contains all of the elements in the sequence.\n\n- Parameter count: The maximum number of elements to return. The value of\n  `count` must be greater than or equal to zero.\n- Returns: An asynchronous sequence starting at the beginning of the\n  base sequence with at most `count` elements."},{"p":["AsyncSequence","reduce(into:_:)"],"f":[["func",12],[" ",17],["reduce",7],["<",17],["Result",0],[">(",17],["into",1],[" ",17],["initialResult",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["updateAccumulatingResult",2],[": (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Void",18,354],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Result",18]],"s":[["func",12],[" ",17],["reduce",7],["<",17],["Result",0],[">(",17],["into",1],[": ",17],["Result",18],[", (",17],["inout",12],[" ",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Void",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Result",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Result",0,1]],"d":"Returns the result of combining the elements of the asynchronous sequence\nusing the given closure, given a mutable initial value.\n\nUse the `reduce(into:_:)` method to produce a single value from the\nelements of an entire sequence. For example, you can use this method on a\nsequence of numbers to find their sum or product.\n\nThe `nextPartialResult` closure executes sequentially with an accumulating\nvalue initialized to `initialResult` and each element of the sequence.\n\nPrefer this method over `reduce(_:_:)` for efficiency when the result is\na copy-on-write type, for example an `Array` or `Dictionary`.\n\n- Parameters:\n  - initialResult: The value to use as the initial accumulating value.\n    The `nextPartialResult` closure receives `initialResult` the first\n    time the closure executes.\n  - nextPartialResult: A closure that combines an accumulating value and\n    an element of the asynchronous sequence into a new accumulating value,\n    for use in the next call of the `nextPartialResult` closure or\n    returned to the caller.\n- Returns: The final accumulated value. If the sequence has no elements,\n  the result is `initialResult`."},{"p":["AsyncSequence","reduce(_:_:)"],"f":[["func",12],[" ",17],["reduce",7],["<",17],["Result",0],[">(",17],["_",1],[" ",17],["initialResult",2],[": ",17],["Result",18],[", ",17],["_",1],[" ",17],["nextPartialResult",2],[": (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Result",18]],"s":[["func",12],[" ",17],["reduce",7],["<",17],["Result",0],[">(",17],["Result",18],[", (",17],["Result",18],[", ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Result",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Result",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["Result",0,1]],"d":"Returns the result of combining the elements of the asynchronous sequence\nusing the given closure.\n\nUse the `reduce(_:_:)` method to produce a single value from the elements of\nan entire sequence. For example, you can use this method on an sequence of\nnumbers to find their sum or product.\n\nThe `nextPartialResult` closure executes sequentially with an accumulating\nvalue initialized to `initialResult` and each element of the sequence.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `4`. The `reduce(_:_:)` method sums the values\nreceived from the asynchronous sequence.\n\n    let sum = await Counter(howHigh: 4)\n        .reduce(0) {\n            $0 + $1\n        }\n    print(sum)\n    // Prints: 10\n\n\n- Parameters:\n  - initialResult: The value to use as the initial accumulating value.\n    The `nextPartialResult` closure receives `initialResult` the first\n    time the closure runs.\n  - nextPartialResult: A closure that combines an accumulating value and\n    an element of the asynchronous sequence into a new accumulating value,\n    for use in the next call of the `nextPartialResult` closure or\n    returned to the caller.\n- Returns: The final accumulated value. If the sequence has no elements,\n  the result is `initialResult`."},{"p":["AsyncSequence","flatMap(_:)"],"f":[["func",12],[" ",17],["flatMap",7],["<",17],["SegmentOfResult",0],[">(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["SegmentOfResult",18],[") -> ",17],["AsyncThrowingFlatMapSequence",18,36],["<",17],["Self",18],[", ",17],["SegmentOfResult",18],["> ",17],["where",12],[" ",17],["SegmentOfResult",18],[" : ",17],["AsyncSequence",18,5]],"s":[["func",12],[" ",17],["flatMap",7],["<",17],["SegmentOfResult",0],[">((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["SegmentOfResult",18],[") -> ",17],["AsyncThrowingFlatMapSequence",18],["<",17],["Self",18],[", ",17],["SegmentOfResult",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["SegmentOfResult",0,1]],"d":"Creates an asynchronous sequence that concatenates the results of calling\nthe given error-throwing transformation with each element of this\nsequence.\n\nUse this method to receive a single-level asynchronous sequence when your\ntransformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `5`. The transforming closure takes the received `Int`\nand returns a new `Counter` that counts that high. For example, when the\ntransform receives `3` from the base sequence, it creates a new `Counter`\nthat produces the values `1`, `2`, and `3`. The `flatMap(_:)` method\n\"flattens\" the resulting sequence-of-sequences into a single\n`AsyncSequence`. However, when the closure receives `4`, it throws an\nerror, terminating the sequence.\n\n    do {\n        let stream = Counter(howHigh: 5)\n            .flatMap { (value) -> Counter in\n                if value == 4 {\n                    throw MyError()\n                }\n                return Counter(howHigh: value)\n            }\n        for try await number in stream {\n            print (\"\\(number)\", terminator: \" \")\n        }\n    } catch {\n        print(error)\n    }\n    // Prints: 1 1 2 1 2 3 MyError()\n\n- Parameter transform: An error-throwing mapping closure. `transform`\n  accepts an element of this sequence as its parameter and returns an\n  `AsyncSequence`. If `transform` throws an error, the sequence ends.\n- Returns: A single, flattened asynchronous sequence that contains all\n  elements in all the asychronous sequences produced by `transform`. The\n  sequence ends either when the the last sequence created from the last\n  element from base sequence ends, or when `transform` throws an error."},{"p":["AsyncSequence","flatMap(_:)"],"f":[["func",12],[" ",17],["flatMap",7],["<",17],["SegmentOfResult",0],[">(",17],["_",1],[" ",17],["transform",2],[": ",17],["@escaping",12],[" (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["SegmentOfResult",18],[") -> ",17],["AsyncFlatMapSequence",18,22],["<",17],["Self",18],[", ",17],["SegmentOfResult",18],["> ",17],["where",12],[" ",17],["SegmentOfResult",18],[" : ",17],["AsyncSequence",18,5]],"s":[["func",12],[" ",17],["flatMap",7],["<",17],["SegmentOfResult",0],[">((",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" -> ",17],["SegmentOfResult",18],[") -> ",17],["AsyncFlatMapSequence",18],["<",17],["Self",18],[", ",17],["SegmentOfResult",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["SegmentOfResult",0,1]],"d":"Creates an asynchronous sequence that concatenates the results of calling\nthe given transformation with each element of this sequence.\n\nUse this method to receive a single-level asynchronous sequence when your\ntransformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `5`. The transforming closure takes the received `Int`\nand returns a new `Counter` that counts that high. For example, when the\ntransform receives `3` from the base sequence, it creates a new `Counter`\nthat produces the values `1`, `2`, and `3`. The `flatMap(_:)` method\n\"flattens\" the resulting sequence-of-sequences into a single\n`AsyncSequence`.\n\n    let stream = Counter(howHigh: 5)\n        .flatMap { Counter(howHigh: $0) }\n    for await number in stream {\n        print(\"\\(number)\", terminator: \" \")\n    }\n    // Prints: 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5\n\n- Parameter transform: A mapping closure. `transform` accepts an element\n  of this sequence as its parameter and returns an `AsyncSequence`.\n- Returns: A single, flattened asynchronous sequence that contains all\n  elements in all the asychronous sequences produced by `transform`."},{"p":["AsyncSequence","contains(where:)"],"f":[["func",12],[" ",17],["contains",7],["(",17],["where",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18,348],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["contains",7],["(",17],["where",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Returns a Boolean value that indicates whether the asynchronous sequence\ncontains an element that satisfies the given predicate.\n\nYou can use the predicate to check for an element of a type that doesn’t\nconform to the `Equatable` protocol, or to find an element that satisfies\na general condition.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `contains(where:)` method checks to see\nwhether the sequence produces a value divisible by `3`:\n\n    let containsDivisibleByThree = await Counter(howHigh: 10)\n        .contains { $0 % 3 == 0 }\n    print(containsDivisibleByThree)\n    // Prints: true\n\nThe predicate executes each time the asynchronous sequence produces an\nelement, until either the predicate finds a match or the sequence ends.\n\n- Parameter predicate: A closure that takes an element of the asynchronous\n  sequence as its argument and returns a Boolean value that indicates\n  whether the passed element represents a match.\n- Returns: `true` if the sequence contains an element that satisfies\n  predicate; otherwise, `false`."},{"p":["AsyncSequence","dropFirst(_:)"],"f":[["func",12],[" ",17],["dropFirst",7],["(",17],["_",1],[" ",17],["count",2],[": ",17],["Int",18,350],[" = 1) -> ",17],["AsyncDropFirstSequence",18,24],["<",17],["Self",18],[">",17]],"s":[["func",12],[" ",17],["dropFirst",7],["(",17],["Int",18],[") -> ",17],["AsyncDropFirstSequence",18],["<",17],["Self",18],[">",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Omits a specified number of elements from the base asynchronous sequence,\nthen passes through all remaining elements.\n\nUse `dropFirst(_:)` when you want to drop the first *n* elements from the\nbase sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `dropFirst(_:)` method causes the modified\nsequence to ignore the values `0` through `4`, and instead emit `5` through `10`:\n\n    for await number in Counter(howHigh: 10).dropFirst(3) {\n        print(\"\\(number) \", terminator: \" \")\n    }\n    // prints \"4 5 6 7 8 9 10\"\n\nIf the number of elements to drop exceeds the number of elements in the\nsequence, the result is an empty sequence.\n\n- Parameter count: The number of elements to drop from the beginning of\n  the sequence. `count` must be greater than or equal to zero.\n- Returns: An asynchronous sequence that drops the first `count`\n  elements from the base sequence."},{"p":["AsyncSequence","max()"],"f":[["@warn_unqualified_access",3],[" ",17],["func",12],[" ",17],["max",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["max",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Self.Element",1,"Comparable",325]],"c":[["Self.Element",1,"Comparable",325]],"d":"Returns the maximum element in an asynchronous sequence of comparable\nelements.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `max()` method returns the max value\nof the sequence.\n\n    let max = await Counter(howHigh: 10)\n        .max()\n    print(max ?? \"none\")\n    // Prints: 10\n\n- Returns: The sequence’s maximum element. If the sequence has no\n  elements, returns `nil`."},{"p":["AsyncSequence","min()"],"f":[["@warn_unqualified_access",3],[" ",17],["func",12],[" ",17],["min",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["min",7],["() ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Self.Element",1,"Comparable",325]],"c":[["Self.Element",1,"Comparable",325]],"d":"Returns the minimum element in an asynchronous sequence of comparable\nelements.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `min()` method returns the minimum value\nof the sequence.\n\n    let min = await Counter(howHigh: 10)\n        .min()\n    print(min ?? \"none\")\n    // Prints: 1\n\n- Returns: The sequence’s minimum element. If the sequence has no\n  elements, returns `nil`."},{"p":["AsyncSequence","contains(_:)"],"f":[["func",12],[" ",17],["contains",7],["(",17],["_",1],[" ",17],["search",2],[": ",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Bool",18,348]],"s":[["func",12],[" ",17],["contains",7],["(",17],["Self",18],[".",17],["Element",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Self.Element",1,"Equatable",338]],"c":[["Self.Element",1,"Equatable",338]],"d":"Returns a Boolean value that indicates whether the asynchronous sequence\ncontains the given element.\n\nIn this example, an asynchronous sequence called `Counter` produces `Int`\nvalues from `1` to `10`. The `contains(_:)` method checks to see whether\nthe sequence produces the value `5`:\n\n    let containsFive = await Counter(howHigh: 10)\n        .contains(5)\n    print(containsFive)\n    // Prints: true\n\n- Parameter search: The element to find in the asynchronous sequence.\n- Returns: `true` if the method found the element in the asynchronous\n  sequence; otherwise, `false`."},{"p":["AsyncSequence","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["Self",18],[".",17],["AsyncIterator",18]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["Self",18],[".",17],["AsyncIterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Creates the asynchronous iterator that produces elements of this\nasynchronous sequence.\n\n- Returns: An instance of the `AsyncIterator` type used to produce\nelements of the asynchronous sequence."},{"p":["AsyncThrowingStream","Continuation","yield(with:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["yield",7],["(",17],["with",1],[" ",17],["result",2],[": ",17],["Result",18,359],["<",17],["Element",18],[", ",17],["Failure",18],[">) -> ",17],["AsyncThrowingStream",18,58],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18,59],[".",17],["YieldResult",18,14],[" ",17],["where",12],[" ",17],["Failure",18],[" == ",17],["Error",18,355]],"s":[["func",12],[" ",17],["yield",7],["(",17],["with",1],[": ",17],["Result",18],["<",17],["Element",18],[", ",17],["Failure",18],[">) -> ",17],["AsyncThrowingStream",18],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18],[".",17],["YieldResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Failure",1,"Error",355]],"c":[["Failure",2,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnormally or throw, based on a given result.\n\n- Parameter result: A result to yield from the continuation. In the\n  `.success(_:)` case, this returns the associated value from the\n  iterator's `next()` method. If the result is the `failure(_:)` case,\n  this call terminates the stream with the result's error, by calling\n  `finish(throwing:)`.\n- Returns: A `YieldResult` that indicates the success or failure of the\n  yield operation.\n\nIf nothing is awaiting the next value and the result is success, this call\nattempts to buffer the result's element.\n\nIf you call this method repeatedly, each call returns immediately, without\nblocking for any awaiting consumption from the iteration."},{"p":["AsyncThrowingStream","Continuation","yield()"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["yield",7],["() -> ",17],["AsyncThrowingStream",18,58],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18,59],[".",17],["YieldResult",18,14],[" ",17],["where",12],[" ",17],["Element",18],[" == ",17],["Void",18,354]],"s":[["func",12],[" ",17],["yield",7],["() -> ",17],["AsyncThrowingStream",18],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18],[".",17],["YieldResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Failure",1,"Error",355]],"c":[["Element",2,"Void"],["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnomally from its suspension point.\n\n- Returns: A `YieldResult` that indicates the success or failure of the\n  yield operation.\n\nUse this method with `AsyncThrowingStream` instances whose `Element`\ntype is `Void`. In this case, the `yield()` call unblocks the\nawaiting iteration; there is no value to return.\n\nIf you call this method repeatedly, each call returns immediately,\nwithout blocking for any awaiting consumption from the iteration."},{"p":["AsyncThrowingStream","Continuation","yield(_:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["yield",7],["(",17],["_",1],[" ",17],["value",2],[": ",17],["Element",18],[") -> ",17],["AsyncThrowingStream",18,58],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18,59],[".",17],["YieldResult",18,14]],"s":[["func",12],[" ",17],["yield",7],["(",17],["Element",18],[") -> ",17],["AsyncThrowingStream",18],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Continuation",18],[".",17],["YieldResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnomally from its suspension point with a given element.\n\n- Parameter value: The value to yield from the continuation.\n- Returns: A `YieldResult` that indicates the success or failure of the\n  yield operation.\n\nIf nothing is awaiting the next value, the method attempts to buffer the\nresult's element.\n\nThis can be called more than once and returns to the caller immediately\nwithout blocking for any awaiting consumption from the iteration."},{"p":["AsyncThrowingStream","Continuation","finish(throwing:)"],"f":[["func",12],[" ",17],["finish",7],["(",17],["throwing",1],[" ",17],["error",2],[": ",17],["Failure",18],["? = nil)",17]],"s":[["func",12],[" ",17],["finish",7],["(",17],["throwing",1],[": ",17],["Failure",18],["?)",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"Resume the task awaiting the next iteration point by having it return\nnil, which signifies the end of the iteration.\n\n- Parameter error: The error to throw, or `nil`, to finish normally.\n\nCalling this function more than once has no effect. After calling\nfinish, the stream enters a terminal state and doesn't produce any additional\nelements."},{"p":["AsyncThrowingStream","makeAsyncIterator()"],"f":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingStream",18,58],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Iterator",18,60]],"s":[["func",12],[" ",17],["makeAsyncIterator",7],["() -> ",17],["AsyncThrowingStream",18],["<",17],["Element",18],[", ",17],["Failure",18],[">.",17],["Iterator",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Failure",1,"Error",355]],"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"Creates the asynchronous iterator that produces elements of this\nasynchronous sequence."},{"p":["AsyncThrowingStream","Iterator","next()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Element",18],["?",17]],"s":[["func",12],[" ",17],["next",7],["() ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Element",18],["?",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Failure",1,"Error",355]],"g":[["Element",0,0],["Failure",1,0]],"d":"The next value from the asynchronous stream.\n\nWhen `next()` returns `nil`, this signifies the end of the\n`AsyncThrowingStream`.\n\nIt is a programmer error to invoke `next()` from a concurrent context\nthat contends with another such call, which results in a call to\n `fatalError()`.\n\nIf you cancel the task this iterator is running in while `next()` is\nawaiting a value, the `AsyncThrowingStream` terminates. In this case,\n`next()` may return `nil` immediately, or else return `nil` on\nsubsequent calls."},{"p":["UnsafeCurrentTask","hash(into:)"],"f":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,358],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["UnsafeCurrentTask","cancel()"],"f":[["func",12],[" ",17],["cancel",7],["()",17]],"s":[["func",12],[" ",17],["cancel",7],["()",17]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"d":"Cancel the current task."},{"p":["TaskPriority",">(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],[">",7],[" ",17],["(",17],["lhs",2],[": ",17],["TaskPriority",18,49],[", ",17],["rhs",2],[": ",17],["TaskPriority",18,49],[") -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],[">",7],[" ",17],["(",17],["TaskPriority",18],[", ",17],["TaskPriority",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","<(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["lhs",2],[": ",17],["TaskPriority",18,49],[", ",17],["rhs",2],[": ",17],["TaskPriority",18,49],[") -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<",7],[" ",17],["(",17],["TaskPriority",18],[", ",17],["TaskPriority",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["TaskPriority",18,49],[", ",17],["rhs",2],[": ",17],["TaskPriority",18,49],[") -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["TaskPriority",18],[", ",17],["TaskPriority",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority",">=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],[">=",7],[" ",17],["(",17],["lhs",2],[": ",17],["TaskPriority",18,49],[", ",17],["rhs",2],[": ",17],["TaskPriority",18,49],[") -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],[">=",7],[" ",17],["(",17],["TaskPriority",18],[", ",17],["TaskPriority",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","<=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["<=",7],[" ",17],["(",17],["lhs",2],[": ",17],["TaskPriority",18,49],[", ",17],["rhs",2],[": ",17],["TaskPriority",18,49],[") -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["<=",7],[" ",17],["(",17],["TaskPriority",18],[", ",17],["TaskPriority",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["TaskPriority","!=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["!=",7],[" ",17],["(",17],["lhs",2],[": ",17],["TaskPriority",18,49],[", ",17],["rhs",2],[": ",17],["TaskPriority",18,49],[") -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["!=",7],[" ",17],["(",17],["TaskPriority",18],[", ",17],["TaskPriority",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["Task","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Task",18,53],["<",17],["Success",18],[", ",17],["Failure",18],[">, ",17],["rhs",2],[": ",17],["Task",18,53],["<",17],["Success",18],[", ",17],["Failure",18],[">) -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Task",18],["<",17],["Success",18],[", ",17],["Failure",18],[">, ",17],["Task",18],["<",17],["Success",18],[", ",17],["Failure",18],[">) -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["Success",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["UnsafeCurrentTask","==(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["UnsafeCurrentTask",18,61],[", ",17],["rhs",2],[": ",17],["UnsafeCurrentTask",18,61],[") -> ",17],["Bool",18,348]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["UnsafeCurrentTask",18],[", ",17],["UnsafeCurrentTask",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["asyncDetached(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["asyncDetached",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Task",18,53],["<",17],["T",18],[", ",17],["Error",18,355],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["asyncDetached",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Task",18],["<",17],["T",18],[", ",17],["Error",18],[">",17]],"a":{"a":{"d":true,"m":"`asyncDetached` was replaced by `Task.detached` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["T",1,"Sendable",361]],"g":[["T",0,0]]},{"p":["asyncDetached(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["asyncDetached",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["T",18],[") -> ",17],["Task",18,53],["<",17],["T",18],[", ",17],["Never",18,356],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["asyncDetached",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["T",18],[") -> ",17],["Task",18],["<",17],["T",18],[", ",17],["Never",18],[">",17]],"a":{"a":{"d":true,"m":"`asyncDetached` was replaced by `Task.detached` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["T",1,"Sendable",361]],"g":[["T",0,0]]},{"p":["withTaskGroup(of:returning:body:)"],"f":[["func",12],[" ",17],["withTaskGroup",7],["<",17],["ChildTaskResult",0],[", ",17],["GroupResult",0],[">(",17],["of",1],[" ",17],["childTaskResultType",2],[": ",17],["ChildTaskResult",18],[".Type, ",17],["returning",1],[" ",17],["returnType",2],[": ",17],["GroupResult",18],[".Type = GroupResult.self, ",17],["body",1],[": (",17],["inout",12],[" ",17],["TaskGroup",18,46],["<",17],["ChildTaskResult",18],[">) ",17],["async",12],[" -> ",17],["GroupResult",18],[") ",17],["async",12],[" -> ",17],["GroupResult",18],[" ",17],["where",12],[" ",17],["ChildTaskResult",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["withTaskGroup",7],["<",17],["ChildTaskResult",0],[", ",17],["GroupResult",0],[">(",17],["of",1],[": ",17],["ChildTaskResult",18],[".Type, ",17],["returning",1],[": ",17],["GroupResult",18],[".Type, ",17],["body",1],[": (",17],["inout",12],[" ",17],["TaskGroup",18],["<",17],["ChildTaskResult",18],[">) ",17],["async",12],[" -> ",17],["GroupResult",18],[") ",17],["async",12],[" -> ",17],["GroupResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0],["GroupResult",1,0]],"d":"Starts a new scope that can contain a dynamic number of child tasks.\n\nA group waits for all of its child tasks\nto complete or be canceled before it returns.\nAfter this function returns, the task group is always empty.\n\nTo collect the results of the group's child tasks,\nyou can use a `for`-`await`-`in` loop:\n\n    var sum = 0\n    for await result in group {\n        sum += result\n    }\n\nIf you need more control or only a few results,\nyou can call `next()` directly:\n\n    guard let first = await group.next() else {\n        group.cancelAll()\n        return 0\n    }\n    let second = await group.next() ?? 0\n    group.cancelAll()\n    return first + second\n\nTask Group Cancellation\n=======================\n\nYou can cancel a task group and all of its child tasks\nby calling the `cancellAll()` method on the task group,\nor by canceling the task in which the group is running.\n\nIf you call `async(priority:operation:)` to create a new task in a canceled group,\nthat task is immediately canceled after creation.\nAlternatively, you can call `asyncUnlessCancelled(priority:operation:)`,\nwhich doesn't create the task if the group has already been canceled\nChoosing between these two functions\nlets you control how to react to cancellation within a group:\nsome child tasks need to run regardless of cancellation,\nbut other tasks are better not even being created\nwhen you know they can't produce useful results.\n\nBecause the tasks you add to a group with this method are nonthrowing,\nthose tasks can't respond to cancellation by throwing `CancellationError`.\nThe tasks must handle cancellation in some other way,\nsuch as returning the work completed so far, returning an empty result, or returning `nil`.\nFor tasks that need to handle cancellation by throwing an error,\nuse the `withThrowingTaskGroup(of:returning:body:)` method instead."},{"p":["withThrowingTaskGroup(of:returning:body:)"],"f":[["func",12],[" ",17],["withThrowingTaskGroup",7],["<",17],["ChildTaskResult",0],[", ",17],["GroupResult",0],[">(",17],["of",1],[" ",17],["childTaskResultType",2],[": ",17],["ChildTaskResult",18],[".Type, ",17],["returning",1],[" ",17],["returnType",2],[": ",17],["GroupResult",18],[".Type = GroupResult.self, ",17],["body",1],[": (",17],["inout",12],[" ",17],["ThrowingTaskGroup",18,56],["<",17],["ChildTaskResult",18],[", ",17],["Error",18,355],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["GroupResult",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["GroupResult",18],[" ",17],["where",12],[" ",17],["ChildTaskResult",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["withThrowingTaskGroup",7],["<",17],["ChildTaskResult",0],[", ",17],["GroupResult",0],[">(",17],["of",1],[": ",17],["ChildTaskResult",18],[".Type, ",17],["returning",1],[": ",17],["GroupResult",18],[".Type, ",17],["body",1],[": (",17],["inout",12],[" ",17],["ThrowingTaskGroup",18],["<",17],["ChildTaskResult",18],[", ",17],["Error",18],[">) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["GroupResult",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["GroupResult",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0],["GroupResult",1,0]],"d":"Starts a new scope that can contain a dynamic number of throwing child tasks.\n\nA group waits for all of its child tasks\nto complete, throw an error, or be canceled before it returns.\nAfter this function returns, the task group is always empty.\n\nTo collect the results of the group's child tasks,\nyou can use a `for`-`await`-`in` loop:\n\n    var sum = 0\n    for await result in group {\n        sum += result\n    }\n\nIf you need more control or only a few results,\nyou can call `next()` directly:\n\n    guard let first = await group.next() else {\n        group.cancelAll()\n        return 0\n    }\n    let second = await group.next() ?? 0\n    group.cancelAll()\n    return first + second\n\nTask Group Cancellation\n=======================\n\nYou can cancel a task group and all of its child tasks\nby calling the `cancellAll()` method on the task group,\nor by canceling the task in which the group is running.\n\nIf you call `async(priority:operation:)` to create a new task in a canceled group,\nthat task is immediately canceled after creation.\nAlternatively, you can call `asyncUnlessCancelled(priority:operation:)`,\nwhich doesn't create the task if the group has already been canceled\nChoosing between these two functions\nlets you control how to react to cancellation within a group:\nsome child tasks need to run regardless of cancellation,\nbut other tasks are better not even being created\nwhen you know they can't produce useful results.\n\nThrowing an error in one of the tasks of a task group\ndoesn't immediately cancel the other tasks in that group.\nHowever,\nif you call `next()` in the task group and propagate its error,\nall other tasks are canceled.\nFor example, in the code below,\nnothing is canceled and the group doesn't throw an error:\n\n    withThrowingTaskGroup { group in\n        group.addTask { throw SomeError() }\n    }\n\nIn contrast, this example throws `SomeError`\nand cancels all of the tasks in the group:\n\n    withThrowingTaskGroup { group in\n        group.addTask { throw SomeError() }\n        try group.next()\n    }\n\nAn individual task throws its error\nin the corresponding call to `Group.next()`,\nwhich gives you a chance to handle the individual error\nor to let the group rethrow the error."},{"p":["withUnsafeCurrentTask(body:)"],"f":[["func",12],[" ",17],["withUnsafeCurrentTask",7],["<",17],["T",0],[">(",17],["body",1],[": (",17],["UnsafeCurrentTask",18,61],["?) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeCurrentTask",7],["<",17],["T",0],[">(",17],["body",1],[": (",17],["UnsafeCurrentTask",18],["?) ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["rethrows",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]],"d":"Calls a closure with an unsafe reference to the current task.\n\nIf you call this function from the body of an asynchronous function,\nthe unsafe task handle passed to the closure is always non-`nil`\nbecause an asynchronous function always runs in the context of a task.\nHowever, if you call this function from the body of a synchronous function,\nand that function isn't executing in the context of any task,\nthe unsafe task handle is `nil`.\n\nDon't store an unsafe task reference\nfor use outside this method's closure.\nStoring an unsafe reference doesn't affect the task's actual life cycle,\nand the behavior of accessing an unsafe task reference\noutside of the `withUnsafeCurrentTask(body:)` method's closure isn't defined.\nThere's no safe way to retrieve a reference to the current task\nand save it for long-term use.\nTo query the current task without saving a reference to it,\nuse properties like `currentPriority`.\nIf you need to store a reference to a task,\ncreate an unstructured task using `Task.detached(priority:operation:)` instead.\n\n- Parameters:\n  - body: A closure that takes an `UnsafeCurrentTask` parameter.\n    If `body` has a return value,\n    that value is also used as the return value\n    for the `withUnsafeCurrentTask(body:)` function.\n\n- Returns: The return value, if any, of the `body` closure."},{"p":["withUnsafeContinuation(_:)"],"f":[["func",12],[" ",17],["withUnsafeContinuation",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["fn",2],[": (",17],["UnsafeContinuation",18,54],["<",17],["T",18],[", ",17],["Never",18,356],[">) -> ",17],["Void",18,354],[") ",17],["async",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeContinuation",7],["<",17],["T",0],[">((",17],["UnsafeContinuation",18],["<",17],["T",18],[", ",17],["Never",18],[">) -> ",17],["Void",18],[") ",17],["async",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]],"d":"Suspends the current task,\nthen calls the given closure with an unsafe continuation for the current task.\n\n- Parameter fn: A closure that takes an `UnsafeContinuation` parameter.\nYou must resume the continuation exactly once.\n\n- Returns: The value passed to the continuation by the closure."},{"p":["withCheckedContinuation(function:_:)"],"f":[["func",12],[" ",17],["withCheckedContinuation",7],["<",17],["T",0],[">(",17],["function",1],[": ",17],["String",18,341],[" = ",17],["#function",12],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["CheckedContinuation",18,44],["<",17],["T",18],[", ",17],["Never",18,356],[">) -> ",17],["Void",18,354],[") ",17],["async",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withCheckedContinuation",7],["<",17],["T",0],[">(",17],["function",1],[": ",17],["String",18],[", (",17],["CheckedContinuation",18],["<",17],["T",18],[", ",17],["Never",18],[">) -> ",17],["Void",18],[") ",17],["async",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]],"d":"Suspends the current task,\nthen calls the given closure with a checked continuation for the current task.\n\n- Parameters:\n  - function: A string identifying the declaration that is the notional\n    source for the continuation, used to identify the continuation in\n    runtime diagnostics related to misuse of this continuation.\n  - body: A closure that takes a `CheckedContinuation` parameter.\n    You must resume the continuation exactly once."},{"p":["withTaskCancellationHandler(handler:operation:)"],"f":[["func",12],[" ",17],["withTaskCancellationHandler",7],["<",17],["T",0],[">(",17],["handler",1],[": () -> ",17],["Void",18,354],[", ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withTaskCancellationHandler",7],["<",17],["T",0],[">(",17],["handler",1],[": () -> ",17],["Void",18],[", ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]]},{"p":["withTaskCancellationHandler(operation:onCancel:)"],"f":[["func",12],[" ",17],["withTaskCancellationHandler",7],["<",17],["T",0],[">(",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[", ",17],["onCancel",1],[" ",17],["handler",2],[": () -> ",17],["Void",18,354],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withTaskCancellationHandler",7],["<",17],["T",0],[">(",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[", ",17],["onCancel",1],[": () -> ",17],["Void",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]],"d":"Execute an operation with a cancellation handler that's immediately\ninvoked if the current task is canceled.\n\nThis differs from the operation cooperatively checking for cancellation\nand reacting to it in that the cancellation handler is _always_ and\n_immediately_ invoked when the task is canceled. For example, even if the\noperation is running code that never checks for cancellation, a cancellation\nhandler still runs and provides a chance to run some cleanup code.\n\nDoesn't check for cancellation, and always executes the passed `operation`.\n\nThis function returns immediately and never suspends."},{"p":["swift_deletedAsyncMethodError()"],"f":[["func",12],[" ",17],["swift_deletedAsyncMethodError",7],["() ",17],["async",12]],"s":[["func",12],[" ",17],["swift_deletedAsyncMethodError",7],["() ",17],["async",12]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["withUnsafeThrowingContinuation(_:)"],"f":[["func",12],[" ",17],["withUnsafeThrowingContinuation",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["fn",2],[": (",17],["UnsafeContinuation",18,54],["<",17],["T",18],[", ",17],["Error",18,355],[">) -> ",17],["Void",18,354],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withUnsafeThrowingContinuation",7],["<",17],["T",0],[">((",17],["UnsafeContinuation",18],["<",17],["T",18],[", ",17],["Error",18],[">) -> ",17],["Void",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]],"d":"Suspends the current task,\nthen calls the given closure with an unsafe throwing continuation for the current task.\n\n- Parameter fn: A closure that takes an `UnsafeContinuation` parameter.\nYou must resume the continuation exactly once.\n\n- Returns: The value passed to the continuation by the closure.\n\nIf `resume(throwing:)` is called on the continuation,\nthis function throws that error."},{"p":["withCheckedThrowingContinuation(function:_:)"],"f":[["func",12],[" ",17],["withCheckedThrowingContinuation",7],["<",17],["T",0],[">(",17],["function",1],[": ",17],["String",18,341],[" = ",17],["#function",12],[", ",17],["_",1],[" ",17],["body",2],[": (",17],["CheckedContinuation",18,44],["<",17],["T",18],[", ",17],["Error",18,355],[">) -> ",17],["Void",18,354],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18]],"s":[["func",12],[" ",17],["withCheckedThrowingContinuation",7],["<",17],["T",0],[">(",17],["function",1],[": ",17],["String",18],[", (",17],["CheckedContinuation",18],["<",17],["T",18],[", ",17],["Error",18],[">) -> ",17],["Void",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]],"d":"Suspends the current task,\nthen calls the given closure with a checked throwing continuation for the current task.\n\n- Parameters:\n  - function: A string identifying the declaration that is the notional\n    source for the continuation, used to identify the continuation in\n    runtime diagnostics related to misuse of this continuation.\n  - body: A closure that takes an `UnsafeContinuation` parameter.\n    You must resume the continuation exactly once.\n\nIf `resume(throwing:)` is called on the continuation,\nthis function throws that error."},{"p":["async(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["async",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Task",18,53],["<",17],["T",18],[", ",17],["Error",18,355],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["async",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Task",18],["<",17],["T",18],[", ",17],["Error",18],[">",17]],"a":{"a":{"d":true,"m":"`async` was replaced by `Task.init` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["T",1,"Sendable",361]],"g":[["T",0,0]]},{"p":["async(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["async",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["T",18],[") -> ",17],["Task",18,53],["<",17],["T",18],[", ",17],["Never",18,356],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["async",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["T",18],[") -> ",17],["Task",18],["<",17],["T",18],[", ",17],["Never",18],[">",17]],"a":{"a":{"d":true,"m":"`async` was replaced by `Task.init` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["T",1,"Sendable",361]],"g":[["T",0,0]]},{"p":["detach(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["detach",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Task",18,53],["<",17],["T",18],[", ",17],["Error",18,355],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["detach",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") -> ",17],["Task",18],["<",17],["T",18],[", ",17],["Error",18],[">",17]],"a":{"a":{"d":true,"m":"`detach` was replaced by `Task.detached` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["T",1,"Sendable",361]],"g":[["T",0,0]]},{"p":["detach(priority:operation:)"],"f":[["@discardableResult",3],[" ",17],["func",12],[" ",17],["detach",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18,49],["? = nil, ",17],["operation",1],[": ",17],["@escaping",12],[" () ",17],["async",12],[" -> ",17],["T",18],[") -> ",17],["Task",18,53],["<",17],["T",18],[", ",17],["Never",18,356],["> ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,361]],"s":[["func",12],[" ",17],["detach",7],["<",17],["T",0],[">(",17],["priority",1],[": ",17],["TaskPriority",18],["?, ",17],["operation",1],[": () ",17],["async",12],[" -> ",17],["T",18],[") -> ",17],["Task",18],["<",17],["T",18],[", ",17],["Never",18],[">",17]],"a":{"a":{"d":true,"m":"`detach` was replaced by `Task.detached` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["T",1,"Sendable",361]],"g":[["T",0,0]]},{"p":["AsyncMapSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncMapSequence",18,16],["<",17],["Base",18],[", ",17],["Transformed",18],[">.",17],["Iterator",18,17]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncMapSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Transformed",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe map sequence produces whatever type of element its transforming\nclosure produces."},{"p":["PartialAsyncTask"],"f":[["typealias",12],[" ",17],["PartialAsyncTask",7],[" = ",17],["UnownedJob",18,48]],"s":[["typealias",12],[" ",17],["PartialAsyncTask",7]],"a":{"a":{"d":true,"r":"UnownedJob"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["AsyncFilterSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncFilterSequence",18,18],["<",17],["Base",18],[">.",17],["Iterator",18,19]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncFilterSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe filter sequence produces whatever type of element its base\nsequence produces."},{"p":["AsyncPrefixSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncPrefixSequence",18,20],["<",17],["Base",18],[">.",17],["Iterator",18,21]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncPrefixSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe prefix sequence produces whatever type of element its base iterator\nproduces."},{"p":["AsyncFlatMapSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncFlatMapSequence",18,22],["<",17],["Base",18],[", ",17],["SegmentOfResult",18],[">.",17],["Iterator",18,23]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncFlatMapSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["SegmentOfResult",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe flat map sequence produces the type of element in the asynchronous\nsequence produced by the `transform` closure."},{"p":["AsyncDropFirstSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncDropFirstSequence",18,24],["<",17],["Base",18],[">.",17],["Iterator",18,25]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncDropFirstSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe drop-first sequence produces whatever type of element its base\niterator produces."},{"p":["AsyncDropWhileSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncDropWhileSequence",18,26],["<",17],["Base",18],[">.",17],["Iterator",18,27]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncDropWhileSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe drop-while sequence produces whatever type of element its base\nsequence produces."},{"p":["AsyncCompactMapSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncCompactMapSequence",18,28],["<",17],["Base",18],[", ",17],["ElementOfResult",18],[">.",17],["Iterator",18,29]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncCompactMapSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ElementOfResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe compact map sequence produces whatever type of element its\ntransforming closure produces."},{"p":["AsyncCompactMapSequence","Iterator","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ElementOfResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]]},{"p":["AsyncPrefixWhileSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncPrefixWhileSequence",18,30],["<",17],["Base",18],[">.",17],["Iterator",18,31]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncPrefixWhileSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe prefix-while sequence produces whatever type of element its base\niterator produces."},{"p":["AsyncThrowingMapSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncThrowingMapSequence",18,32],["<",17],["Base",18],[", ",17],["Transformed",18],[">.",17],["Iterator",18,33]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncThrowingMapSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Transformed",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["Transformed",1,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe map sequence produces whatever type of element its the transforming\nclosure produces."},{"p":["UnsafeThrowingContinuation"],"f":[["typealias",12],[" ",17],["UnsafeThrowingContinuation",7],["<",17],["T",0],["> = ",17],["UnsafeContinuation",18,54],["<",17],["T",18],[", ",17],["Error",18,355],[">",17]],"s":[["typealias",12],[" ",17],["UnsafeThrowingContinuation",7]],"a":{"a":{"d":true,"m":"please use UnsafeContinuation<..., Error>"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"g":[["T",0,0]]},{"p":["AsyncThrowingFilterSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncThrowingFilterSequence",18,34],["<",17],["Base",18],[">.",17],["Iterator",18,35]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncThrowingFilterSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe filter sequence produces whatever type of element its base\nsequence produces."},{"p":["AsyncThrowingFlatMapSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncThrowingFlatMapSequence",18,36],["<",17],["Base",18],[", ",17],["SegmentOfResult",18],[">.",17],["Iterator",18,37]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncThrowingFlatMapSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["SegmentOfResult",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],"g":[["Base",0,0],["SegmentOfResult",1,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe flat map sequence produces the type of element in the asynchronous\nsequence produced by the `transform` closure."},{"p":["AsyncThrowingDropWhileSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncThrowingDropWhileSequence",18,38],["<",17],["Base",18],[">.",17],["Iterator",18,39]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncThrowingDropWhileSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe drop-while sequence produces whatever type of element its base\nsequence produces."},{"p":["AsyncThrowingCompactMapSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncThrowingCompactMapSequence",18,40],["<",17],["Base",18],[", ",17],["ElementOfResult",18],[">.",17],["Iterator",18,41]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncThrowingCompactMapSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ElementOfResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe compact map sequence produces whatever type of element its\ntransforming closure produces."},{"p":["AsyncThrowingCompactMapSequence","Iterator","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ElementOfResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0],["ElementOfResult",1,0]]},{"p":["AsyncThrowingPrefixWhileSequence","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["AsyncThrowingPrefixWhileSequence",18,42],["<",17],["Base",18],[">.",17],["Iterator",18,43]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of iterator that produces elements of the sequence."},{"p":["AsyncThrowingPrefixWhileSequence","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["Base",18],[".",17],["Element",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Base",1,"AsyncSequence",5]],"c":[["Base",1,"AsyncSequence",5]],"g":[["Base",0,0]],"d":"The type of element produced by this asynchronous sequence.\n\nThe prefix-while sequence produces whatever type of element its base\niterator produces."},{"p":["TaskGroup","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["TaskGroup",18,46],["<",17],["ChildTaskResult",18],[">.",17],["Iterator",18,47]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ChildTaskResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361]],"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskGroup","Iterator","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ChildTaskResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361]],"g":[["ChildTaskResult",0,0]]},{"p":["TaskPriority","RawValue"],"f":[["typealias",12],[" ",17],["RawValue",7],[" = ",17],["UInt8",18,357]],"s":[["typealias",12],[" ",17],["RawValue",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}}},{"p":["Task","Group"],"f":[["typealias",12],[" ",17],["Group",7],["<",17],["TaskResult",0],["> = ",17],["ThrowingTaskGroup",18,56],["<",17],["TaskResult",18],[", ",17],["Error",18,355],["> ",17],["where",12],[" ",17],["TaskResult",18],[" : ",17],["Sendable",18,361]],"s":[["typealias",12],[" ",17],["Group",7]],"a":{"a":{"d":true,"m":"`Task.Group` was replaced by `ThrowingTaskGroup` and `TaskGroup` and will be removed shortly."},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356],["TaskResult",1,"Sendable",361]],"g":[["Success",0,0],["Failure",1,0],["TaskResult",0,1]]},{"p":["Task","Handle"],"f":[["typealias",12],[" ",17],["Handle",7],[" = ",17],["Task",18,53]],"s":[["typealias",12],[" ",17],["Handle",7]],"a":{"a":{"d":true,"m":"Task.Handle has been removed; use Task"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["Task","Priority"],"f":[["typealias",12],[" ",17],["Priority",7],[" = ",17],["TaskPriority",18,49]],"s":[["typealias",12],[" ",17],["Priority",7]],"a":{"a":{"d":true,"m":"Task.Priority has been removed; use TaskPriority"},"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["Success",2,"Never",356],["Failure",2,"Never",356]],"c":[["Success",2,"Never",356],["Failure",2,"Never",356]],"g":[["Success",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","AsyncIterator"],"f":[["typealias",12],[" ",17],["AsyncIterator",7],[" = ",17],["ThrowingTaskGroup",18,56],["<",17],["ChildTaskResult",18],[", ",17],["Failure",18],[">.",17],["Iterator",18,57]],"s":[["typealias",12],[" ",17],["AsyncIterator",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ChildTaskResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"e":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]},{"p":["ThrowingTaskGroup","Iterator","Element"],"f":[["typealias",12],[" ",17],["Element",7],[" = ",17],["ChildTaskResult",18]],"s":[["typealias",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"13.0"},"macOS":{"i":"10.15"},"tvOS":{"i":"13.0"},"watchOS":{"i":"6.0"}},"c":[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],"g":[["ChildTaskResult",0,0],["Failure",1,0]]}],"edges":{"conformer":[1,361,[],2,361,[],4,2,[],4,361,[],10,323,[],10,338,[],16,5,[["Base",1,"AsyncSequence",5]],17,3,[],18,5,[["Base",1,"AsyncSequence",5]],19,3,[],20,5,[["Base",1,"AsyncSequence",5]],21,3,[],22,5,[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],23,3,[],24,5,[["Base",1,"AsyncSequence",5]],25,3,[],26,5,[["Base",1,"AsyncSequence",5]],27,3,[],28,5,[["Base",1,"AsyncSequence",5]],29,3,[],30,5,[["Base",1,"AsyncSequence",5]],31,3,[],32,5,[["Base",1,"AsyncSequence",5]],33,3,[],34,5,[["Base",1,"AsyncSequence",5]],35,3,[],36,5,[["Base",1,"AsyncSequence",5],["SegmentOfResult",1,"AsyncSequence",5]],37,3,[],38,5,[["Base",1,"AsyncSequence",5]],39,3,[],40,5,[["Base",1,"AsyncSequence",5]],41,3,[],42,5,[["Base",1,"AsyncSequence",5]],43,3,[],44,361,[["T",1,"Sendable",361],["E",1,"Error",355]],45,355,[],45,361,[],46,5,[["ChildTaskResult",1,"Sendable",361]],46,361,[["ChildTaskResult",1,"Sendable",361]],47,3,[],48,361,[],49,322,[],49,325,[],49,338,[],49,342,[],49,349,[],49,361,[],50,5,[],51,361,[],52,3,[],53,323,[["Success",1,"Sendable",361],["Failure",1,"Error",355]],53,338,[["Success",1,"Sendable",361],["Failure",1,"Error",355]],53,361,[],54,361,[["T",1,"Sendable",361],["E",1,"Error",355]],55,361,[],56,5,[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],56,361,[["ChildTaskResult",1,"Sendable",361],["Failure",1,"Error",355]],57,3,[],58,5,[["Failure",1,"Error",355]],59,361,[],60,3,[],61,323,[],61,338,[],61,361,[],62,352,[],62,361,[],63,0,[],63,1,[],63,361,[]],"feature":[93,63,223,16,223,18,223,20,223,22,223,24,223,26,223,28,223,30,223,32,223,34,223,36,223,38,223,40,223,42,223,46,223,50,223,56,223,58,224,16,224,18,224,20,224,22,224,24,224,26,224,28,224,30,224,32,224,34,224,36,224,38,224,40,224,42,224,46,224,50,224,56,224,58,225,16,225,18,225,20,225,22,225,24,225,26,225,28,225,30,225,32,225,34,225,36,225,38,225,40,225,42,225,46,225,50,225,56,225,58,226,16,226,18,226,20,226,22,226,24,226,26,226,28,226,30,226,32,226,34,226,36,226,38,226,40,226,42,226,46,226,50,226,56,226,58,227,16,227,18,227,20,227,22,227,24,227,26,227,28,227,30,227,32,227,34,227,36,227,38,227,40,227,42,227,46,227,50,227,56,227,58,228,16,228,18,228,20,228,22,228,24,228,26,228,28,228,30,228,32,228,34,228,36,228,38,228,40,228,42,228,46,228,50,228,56,228,58,229,16,229,18,229,20,229,22,229,24,229,26,229,28,229,30,229,32,229,34,229,36,229,38,229,40,229,42,229,46,229,50,229,56,229,58,230,16,230,18,230,20,230,22,230,24,230,26,230,28,230,30,230,32,230,34,230,36,230,38,230,40,230,42,230,46,230,50,230,56,230,58,232,16,232,18,232,20,232,22,232,24,232,26,232,28,232,30,232,32,232,34,232,36,232,38,232,40,232,42,232,46,232,50,232,56,232,58,233,16,233,18,233,20,233,22,233,24,233,26,233,28,233,30,233,32,233,34,233,36,233,38,233,40,233,42,233,46,233,50,233,56,233,58,235,16,235,18,235,20,235,22,235,24,235,26,235,28,235,30,235,32,235,34,235,36,235,38,235,40,235,42,235,46,235,50,235,56,235,58,237,16,237,18,237,20,237,22,237,24,237,26,237,28,237,30,237,32,237,34,237,36,237,38,237,40,237,42,237,46,237,50,237,56,237,58,238,16,238,18,238,20,238,22,238,24,238,26,238,28,238,30,238,32,238,34,238,36,238,38,238,40,238,42,238,46,238,50,238,56,238,58,239,16,239,18,239,20,239,22,239,24,239,26,239,28,239,30,239,32,239,34,239,36,239,38,239,40,239,42,239,46,239,50,239,56,239,58,240,16,240,18,240,20,240,22,240,24,240,26,240,28,240,30,240,32,240,34,240,36,240,38,240,40,240,42,240,46,240,50,240,56,240,58,241,16,241,18,241,20,241,22,241,24,241,26,241,28,241,30,241,32,241,34,241,36,241,38,241,40,241,42,241,46,241,50,241,56,241,58,242,16,242,18,242,20,242,22,242,24,242,26,242,28,242,30,242,32,242,34,242,36,242,38,242,40,242,42,242,46,242,50,242,56,242,58,243,16,243,18,243,20,243,22,243,26,243,28,243,30,243,32,243,34,243,36,243,38,243,40,243,42,243,46,243,50,243,56,243,58,244,16,244,18,244,20,244,22,244,24,244,26,244,28,244,30,244,32,244,34,244,36,244,38,244,40,244,42,244,46,244,50,244,56,244,58,245,16,245,18,245,20,245,22,245,24,245,26,245,28,245,30,245,32,245,34,245,36,245,38,245,40,245,42,245,46,245,50,245,56,245,58,246,16,246,18,246,20,246,22,246,24,246,26,246,28,246,30,246,32,246,34,246,36,246,38,246,40,246,42,246,46,246,50,246,56,246,58,330,49,331,49,332,49,333,49,334,49,335,49,336,49,337,49,340,10,340,49,340,53,340,61,346,49,347,49],"member":[10,51,11,51,12,51,13,59,14,59,15,59,17,16,19,18,21,20,23,22,25,24,27,26,29,28,31,30,33,32,35,34,37,36,39,38,41,40,43,42,47,46,51,50,52,50,57,56,59,58,60,58,64,10,65,10,66,11,67,11,68,11,69,12,70,12,71,12,72,13,73,13,74,14,75,14,76,14,77,15,78,15,79,15,80,62,81,45,82,44,83,49,84,50,85,50,86,53,87,53,88,55,89,58,90,58,94,63,95,63,96,49,97,49,98,49,99,49,100,49,101,49,102,49,103,49,104,49,105,53,106,53,107,62,108,62,109,62,111,46,112,46,113,63,114,49,115,51,116,53,117,53,118,53,119,53,120,56,121,56,122,59,123,61,124,61,125,63,126,53,127,53,128,53,129,53,130,53,131,53,132,53,133,53,134,53,135,53,136,53,137,16,138,17,139,18,140,19,141,20,142,21,143,22,144,23,145,24,146,24,147,25,148,26,149,27,150,28,151,29,152,30,153,31,154,32,155,33,156,34,157,35,158,36,159,37,160,38,161,39,162,40,163,41,164,42,165,43,166,62,167,62,168,62,169,44,170,44,171,44,172,44,173,44,175,46,176,46,177,46,178,46,179,46,180,46,181,46,182,46,183,46,184,46,185,47,186,47,187,46,189,63,190,51,191,51,192,51,193,51,194,50,195,52,196,53,197,53,198,53,199,53,200,53,201,54,202,54,203,54,204,54,205,54,206,54,209,56,210,56,211,56,212,56,213,56,214,56,215,56,216,56,217,56,218,56,219,56,220,57,221,57,222,56,223,5,224,5,225,5,226,5,227,5,228,5,229,5,230,5,231,5,232,5,233,5,234,5,235,5,236,5,237,5,238,5,239,5,240,5,241,5,242,5,243,5,244,5,245,5,246,5,248,59,249,59,250,59,251,59,252,58,253,60,254,61,255,61,256,49,257,49,258,49,259,49,260,49,261,49,262,53,263,61,280,16,281,16,283,18,284,18,285,20,286,20,287,22,288,22,289,24,290,24,291,26,292,26,293,28,294,28,295,29,296,30,297,30,298,32,299,32,301,34,302,34,303,36,304,36,305,38,306,38,307,40,308,40,309,41,310,42,311,42,312,46,313,46,314,47,315,49,316,53,317,53,318,53,319,56,320,56,321,57],"requirement":[6,0,7,3,8,5,9,5,91,0,92,0,110,1,174,2,188,3,207,4,208,4,247,5],"defaultImplementation":[93,91]},"hints":[83,345,93,91,94,91,95,92,107,353,113,110,114,344,137,247,138,188,139,247,140,188,141,247,142,188,143,247,144,188,146,247,147,188,148,247,149,188,150,247,151,188,152,247,153,188,154,247,155,188,156,247,157,188,158,247,159,188,160,247,161,188,162,247,163,188,164,247,165,188,176,247,185,188,194,247,195,188,198,324,211,247,220,188,223,223,224,224,225,225,226,226,227,227,228,228,229,229,230,230,232,232,233,233,235,235,237,237,238,238,239,239,240,240,241,241,242,242,243,243,244,244,245,245,246,246,252,247,253,188,254,324,256,326,257,327,258,339,259,328,260,329,262,339,263,339,280,8,281,9,283,8,284,9,285,8,286,9,287,8,288,9,289,8,290,9,291,8,292,9,293,8,294,9,295,7,296,8,297,9,298,8,299,9,301,8,302,9,303,8,304,9,305,8,306,9,307,8,308,9,309,7,310,8,311,9,312,8,313,9,314,7,315,343,319,8,320,9,321,7,330,330,331,331,332,332,333,333,334,334,335,335,336,336,337,337,340,340,346,346,347,347],"sourcemap":[]}