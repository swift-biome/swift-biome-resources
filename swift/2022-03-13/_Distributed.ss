{"culture":"_Distributed","dependencies":[{"package":"swift-standard-library","modules":["Swift","_Concurrency"]}],"extensions":[],"partitions":[{"namespace":"_Distributed","communities":[{"community":"protocol","startIndex":0,"endIndex":6},{"community":"associatedtype","startIndex":6,"endIndex":14},{"community":"struct","startIndex":14,"endIndex":17},{"community":"init","startIndex":17,"endIndex":20},{"community":"property","startIndex":20,"endIndex":25},{"community":"type.method","startIndex":25,"endIndex":27},{"community":"method","startIndex":27,"endIndex":44},{"community":"type.op","startIndex":44,"endIndex":45},{"community":"typealias","startIndex":45,"endIndex":46}]},{"namespace":"Swift","communities":[{"community":"type.property","startIndex":46,"endIndex":47}]}],"identifiers":["s12_Distributed0A11ActorSystemP","s12_Distributed0A16ActorSystemErrorP","s12_Distributed0A23TargetInvocationDecoderP","s12_Distributed0A23TargetInvocationEncoderP","s12_Distributed0A29TargetInvocationResultHandlerP","s12_Distributed0A5ActorP","s12_Distributed0A11ActorSystemP0B2IDQa","s12_Distributed0A11ActorSystemP17InvocationDecoderQa","s12_Distributed0A11ActorSystemP17InvocationEncoderQa","s12_Distributed0A11ActorSystemP24SerializationRequirementQa","s12_Distributed0A23TargetInvocationDecoderP24SerializationRequirementQa","s12_Distributed0A23TargetInvocationEncoderP24SerializationRequirementQa","s12_Distributed0A29TargetInvocationResultHandlerP24SerializationRequirementQa","s12_Distributed0A5ActorP0B6SystemQa","s12_Distributed07ExecuteA11TargetErrorV","s12_Distributed0A16ActorCodingErrorV","s12_Distributed16RemoteCallTargetV","s12_Distributed07ExecuteA11TargetErrorV7messageACSS_tcfc","s12_Distributed0A16ActorCodingErrorV7messageACSS_tcfc","s12_Distributed0A5ActorPAASe2IDRpzrlE4fromxs7Decoder_p_tKcfc","s12_Distributed0A16ActorCodingErrorV7messageSSvp","s12_Distributed0A5ActorP11actorSystem0bD0Qzvp","s12_Distributed0A5ActorP2id2IDQzvp","s12_Distributed16RemoteCallTargetV11mangledNameSSvp","s12_Distributed16RemoteCallTargetV8fullNameSSvp","s12_Distributed0A16ActorCodingErrorV07missingB14SystemUserInfoyACxmAA0aB0RzlFZ","s12_Distributed0A5ActorP7resolve2id5usingx2IDQz_0B6SystemQztKFZ","s12_Distributed0A11ActorSystemP10actorReadyyyqd__AA0aB0Rd__2IDQyd__0bF0RtzlF","s12_Distributed0A11ActorSystemP21makeInvocationEncoder0eF0QzyF","s12_Distributed0A11ActorSystemP7resolve2id2asqd__Sg0B2IDQz_qd__mtKAA0aB0Rd__0G0Qyd__AIRSlF","s12_Distributed0A11ActorSystemP8assignIDy0bE0Qzqd__mAA0aB0Rd__0E0Qyd__AFRSlF","s12_Distributed0A11ActorSystemP8resignIDyy0bE0QzF","s12_Distributed0A11ActorSystemPAAE07executeA6Target2on07mangledE4Name17invocationDecoder7handleryqd___SS010InvocationJ0Qzzqd_0_tYaKAA0aB0Rd__AA0aeL13ResultHandlerRd_0_r0_lF","s12_Distributed0A23TargetInvocationDecoderP15decodeErrorTypeypXpSgyKF","s12_Distributed0A23TargetInvocationDecoderP16decodeReturnTypeypXpSgyKF","s12_Distributed0A23TargetInvocationDecoderP26decodeGenericSubstitutionsSayypXpGyKF","s12_Distributed0A23TargetInvocationEncoderP13doneRecordingyyKF","s12_Distributed0A23TargetInvocationEncoderP25recordGenericSubstitutionyyqd__mKlF","s12_Distributed0A29TargetInvocationResultHandlerP12onReturnVoidyyYaKF","s12_Distributed0A29TargetInvocationResultHandlerP7onThrow5erroryqd___tYaKs5ErrorRd__lF","s12_Distributed0A29TargetInvocationResultHandlerP8onReturn5valueyqd___tYaKlF","s12_Distributed0A5ActorPAAE4hash4intoys6HasherVz_tF","s12_Distributed0A5ActorPAAE9whenLocalyqd__Sgqd__xYiYaYbKXEYaKs8SendableRd__lF","s12_Distributed0A5ActorPAASE2IDRpzrlE6encode2toys7Encoder_p_tKF","s12_Distributed0A5ActorPAAE2eeoiySbx_xtFZ","s12_Distributed0A5ActorP24SerializationRequirementa","ss17CodingUserInfoKeyV12_DistributedE011actorSystemD0ABvpZ","s12_Concurrency8AnyActorP","sSE","sSH","sSH4hash4intoys6HasherVz_tF","sSQ","sSQ2eeoiySbx_xtFZ","sSS","sSb","sSe","ss12IdentifiableP","ss12IdentifiableP2id2IDQzvp","ss17CodingUserInfoKeyV","ss5ErrorP","ss6HasherV","ss7DecoderP","ss7EncoderP","ss8SendableP"],"vertices":[{"p":["DistributedActorSystem"],"f":[["protocol",12],[" ",17],["DistributedActorSystem",7],[" : ",17],["Sendable",18,63]],"s":[["protocol",12],[" ",17],["DistributedActorSystem",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActorSystemError"],"f":[["protocol",12],[" ",17],["DistributedActorSystemError",7],[" : ",17],["Error",18,59]],"s":[["protocol",12],[" ",17],["DistributedActorSystemError",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Error protocol to which errors thrown by any `DistributedActorSystem` should conform."},{"p":["DistributedTargetInvocationDecoder"],"f":[["protocol",12],[" ",17],["DistributedTargetInvocationDecoder",7]],"s":[["protocol",12],[" ",17],["DistributedTargetInvocationDecoder",7]],"d":"Decoder that must be provided to `executeDistributedTarget` and is used\nby the Swift runtime to decode arguments of the invocation."},{"p":["DistributedTargetInvocationEncoder"],"f":[["protocol",12],[" ",17],["DistributedTargetInvocationEncoder",7]],"s":[["protocol",12],[" ",17],["DistributedTargetInvocationEncoder",7]],"d":"Used to encode an invocation of a distributed target (method or computed property).\n\n## Forming an invocation\n\nOn the sending-side an instance of an invocation is constructed by the runtime,\nand calls to: `recordGenericSubstitution`, `recordArgument`, `recordReturnType`,\n`recordErrorType`, and finally `doneRecording` are made (in this order).\n\nIf the return type of the target is `Void` the `recordReturnType` is not invoked.\n\nIf the error type thrown by the target is not defined the `recordErrorType` is not invoked.\n\nAn invocation implementation may decide to perform serialization right-away in the\n`record...` invocations, or it may choose to delay doing so until the invocation is passed\nto the `remoteCall`. This decision largely depends on if serialization is allowed to happen\non the caller's task, and if any smarter encoding can be used once all parameter calls have been\nrecorded (e.g. it may be possible to run-length encode values of certain types etc.)\n\nOnce encoded, the system should use some underlying transport mechanism to send the\nbytes serialized by the invocation to the remote peer.\n\n## Decoding an invocation\nSince every actor system is going to deal with a concrete invocation type, they may\nimplement decoding them whichever way is most optimal for the given system.\n\nOnce decided, the invocation must be passed to `executeDistributedTarget`\nwhich will decode the substitutions, argument values, return and error types (in that order).\n\nNote that the decoding will be provided the specific types that the sending side used to preform the call,\nso decoding can rely on simply invoking e.g. `Codable` (if that is the `SerializationRequirement`) decoding\nentry points on the provided types."},{"p":["DistributedTargetInvocationResultHandler"],"f":[["protocol",12],[" ",17],["DistributedTargetInvocationResultHandler",7]],"s":[["protocol",12],[" ",17],["DistributedTargetInvocationResultHandler",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActor"],"f":[["protocol",12],[" ",17],["DistributedActor",7],[" : ",17],["Hashable",18,49],[", ",17],["Identifiable",18,56],[", ",17],["AnyActor",18,47]],"s":[["protocol",12],[" ",17],["DistributedActor",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Common protocol to which all distributed actors conform implicitly.\n\nIt is not possible to conform to this protocol manually explicitly.\nOnly a 'distributed actor' declaration or protocol with 'DistributedActor'\nrequirement may conform to this protocol.\n\nThe 'DistributedActor' protocol provides the core functionality of any\ndistributed actor.\n\n## Implicit `Codable` conformance\nIf created with an actor system whose `ActorID` is `Codable`, the\ncompiler will synthesize code for the concrete distributed actor to conform\nto `Codable` as well. This is necessary to support distributed calls where\nthe `SerializationRequirement` is `Codable` and thus users may want to pass\nactors as arguments to remote calls.\n\nThe synthesized implementations use a single `SingleValueContainer` to\nencode/decode the `self.id` property of the actor. The `Decoder` required\n`init(from:)` is implemented by retrieving an actor system from the\ndecoders' `userInfo`, effectively like this:\n`decoder.userInfo[.actorSystemKey] as? ActorSystem`. The obtained actor\nsystem is then used to `resolve(id:using:)` the decoded ID.\n\nUse the `CodingUserInfoKey.actorSystemKey` to provide the necessary\nactor system for the decoding initializer when decoding a distributed actor."},{"p":["DistributedActorSystem","ActorID"],"f":[["associatedtype",12],[" ",17],["ActorID",7],[" : ",17],["Hashable",18,49],[", ",17],["Sendable",18,63]],"s":[["associatedtype",12],[" ",17],["ActorID",7],[" : ",17],["Hashable",18],[", ",17],["Sendable",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The identity used by actors that communicate via this transport"},{"p":["DistributedActorSystem","InvocationDecoder"],"f":[["associatedtype",12],[" ",17],["InvocationDecoder",7],[" : ",17],["DistributedTargetInvocationDecoder",18,2],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["InvocationDecoder",18],[".",17],["SerializationRequirement",18],[" == ",17],["Self",18],[".",17],["InvocationEncoder",18],[".",17],["SerializationRequirement",18]],"s":[["associatedtype",12],[" ",17],["InvocationDecoder",7],[" : ",17],["DistributedTargetInvocationDecoder",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActorSystem","InvocationEncoder"],"f":[["associatedtype",12],[" ",17],["InvocationEncoder",7],[" : ",17],["DistributedTargetInvocationEncoder",18,3]],"s":[["associatedtype",12],[" ",17],["InvocationEncoder",7],[" : ",17],["DistributedTargetInvocationEncoder",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActorSystem","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["SerializationRequirement",18],[" == ",17],["Self",18],[".",17],["InvocationDecoder",18],[".",17],["SerializationRequirement",18]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The serialization requirement that will be applied to all distributed targets used with this system."},{"p":["DistributedTargetInvocationDecoder","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]]},{"p":["DistributedTargetInvocationEncoder","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]]},{"p":["DistributedTargetInvocationResultHandler","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActor","ActorSystem"],"f":[["associatedtype",12],[" ",17],["ActorSystem",7],[" : ",17],["DistributedActorSystem",18,0],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["ID",18],[" == ",17],["Self",18],[".",17],["ActorSystem",18],[".",17],["ActorID",18]],"s":[["associatedtype",12],[" ",17],["ActorSystem",7],[" : ",17],["DistributedActorSystem",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The type of transport used to communicate with actors of this type."},{"p":["ExecuteDistributedTargetError"],"f":[["struct",12],[" ",17],["ExecuteDistributedTargetError",7]],"s":[["struct",12],[" ",17],["ExecuteDistributedTargetError",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActorCodingError"],"f":[["struct",12],[" ",17],["DistributedActorCodingError",7]],"s":[["struct",12],[" ",17],["DistributedActorCodingError",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["RemoteCallTarget"],"f":[["struct",12],[" ",17],["RemoteCallTarget",7]],"s":[["struct",12],[" ",17],["RemoteCallTarget",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"A distributed 'target' can be a `distributed func` or `distributed` computed property."},{"p":["ExecuteDistributedTargetError","init(message:)"],"f":[["init",10],["(",17],["message",1],[": ",17],["String",18,53],[")",17]],"s":[["init",10],["(",17],["message",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActorCodingError","init(message:)"],"f":[["init",10],["(",17],["message",1],[": ",17],["String",18,53],[")",17]],"s":[["init",10],["(",17],["message",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActor","init(from:)"],"f":[["nonisolated",12],[" ",17],["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,61],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.ID",1,"Decodable",55]],"c":[["Self.ID",1,"Decodable",55]]},{"p":["DistributedActorCodingError","message"],"f":[["let",12],[" ",17],["message",7],[": ",17],["String",18,53]],"s":[["let",12],[" ",17],["message",7],[": ",17],["String",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActor","actorSystem"],"f":[["nonisolated",12],[" ",17],["var",12],[" ",17],["actorSystem",7],[": ",17],["Self",18],[".",17],["ActorSystem",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["actorSystem",7],[": ",17],["Self",18],[".",17],["ActorSystem",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The `ActorSystem` that is managing this distributed actor.\n\nIt is immutable and equal to the system passed in the local/resolve\ninitializer.\n\nConformance to this requirement is synthesized automatically for any\n`distributed actor` declaration."},{"p":["DistributedActor","id"],"f":[["override",12],[" ",17],["nonisolated",12],[" ",17],["var",12],[" ",17],["id",7],[": ",17],["Self",18],[".",17],["ID",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["id",7],[": ",17],["Self",18],[".",17],["ID",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Logical identity of this distributed actor.\n\nMany distributed actor references may be pointing at, logically, the same actor.\nFor example, calling `resolve(id:using:)` multiple times, is not guaranteed\nto return the same exact resolved actor instance, however all the references would\nrepresent logically references to the same distributed actor, e.g. on a different node.\n\nConformance to this requirement is synthesized automatically for any\n`distributed actor` declaration."},{"p":["RemoteCallTarget","mangledName"],"f":[["var",12],[" ",17],["mangledName",7],[": ",17],["String",18,53],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["mangledName",7],[": ",17],["String",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["RemoteCallTarget","fullName"],"f":[["var",12],[" ",17],["fullName",7],[": ",17],["String",18,53],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["fullName",7],[": ",17],["String",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActorCodingError","missingActorSystemUserInfo(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["missingActorSystemUserInfo",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) -> ",17],["DistributedActorCodingError",18,15],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5]],"s":[["static",12],[" ",17],["func",12],[" ",17],["missingActorSystemUserInfo",7],["<",17],["Act",0],[">(",17],["Act",18],[".Type) -> ",17],["DistributedActorCodingError",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"c":[["Act",1,"DistributedActor",5]],"g":[["Act",0,0]]},{"p":["DistributedActor","resolve(id:using:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["resolve",7],["(",17],["id",1],[": ",17],["Self",18],[".",17],["ID",18],[", ",17],["using",1],[" ",17],["system",2],[": ",17],["Self",18],[".",17],["ActorSystem",18],[") ",17],["throws",12],[" -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["resolve",7],["(",17],["id",1],[": ",17],["Self",18],[".",17],["ID",18],[", ",17],["using",1],[": ",17],["Self",18],[".",17],["ActorSystem",18],[") ",17],["throws",12],[" -> ",17],["Self",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Resolves the passed in `id` against the `system`, returning\neither a local or remote actor reference.\n\nThe system will be asked to `resolve` the identity and return either\na local instance or request a proxy to be created for this identity.\n\nA remote distributed actor reference will forward all invocations through\nthe system, allowing it to take over the remote messaging with the\nremote actor instance.\n\n- Parameter id: identity uniquely identifying a, potentially remote, actor in the system\n- Parameter system: `system` which should be used to resolve the `identity`, and be associated with the returned actor"},{"p":["DistributedActorSystem","actorReady(_:)"],"f":[["func",12],[" ",17],["actorReady",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actor",2],[": ",17],["Act",18],[") ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Self",18],[".",17],["ActorID",18],[" == ",17],["Act",18],[".",17],["ID",18]],"s":[["func",12],[" ",17],["actorReady",7],["<",17],["Act",0],[">(",17],["Act",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"c":[["Act",1,"DistributedActor",5],["Self.ActorID",2,"Act.ID"]],"g":[["Act",0,1]],"d":"Invoked during a distributed actor's initialization, as soon as it becomes fully initialized.\n\nThe system is expected to store the reference to this actor, and maintain an `ActorID: DistributedActor`\nmapping for the purpose of implementing the `resolve(id:as:)` method.\n\nThe system usually should NOT retain the passed reference, and it will be informed via\n`resignID(_:)` when the actor has been deallocated so it can remove the stale reference from its\ninternal `ActorID: DistributedActor` mapping.\n\nThe `actor.id` of the passed actor must be an `ActorID` that this system previously has assigned.\n\nIf the `actorReady` gets called with some unknown ID, it should crash immediately as it signifies some\nvery unexpected use of the system.\n\n- Parameter actor: reference to the (local) actor that was just fully initialized."},{"p":["DistributedActorSystem","makeInvocationEncoder()"],"f":[["func",12],[" ",17],["makeInvocationEncoder",7],["() -> ",17],["Self",18],[".",17],["InvocationEncoder",18]],"s":[["func",12],[" ",17],["makeInvocationEncoder",7],["() -> ",17],["Self",18],[".",17],["InvocationEncoder",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Invoked by the Swift runtime when a distributed remote call is about to be made.\n\nThe returned `DistributedTargetInvocation` will be populated with all\narguments, generic substitutions, and specific error and return types\nthat are associated with this specific invocation."},{"p":["DistributedActorSystem","resolve(id:as:)"],"f":[["func",12],[" ",17],["resolve",7],["<",17],["Act",0],[">(",17],["id",1],[": ",17],["Self",18],[".",17],["ActorID",18],[", ",17],["as",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) ",17],["throws",12],[" -> ",17],["Act",18],["? ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Self",18],[".",17],["ActorID",18],[" == ",17],["Act",18],[".",17],["ID",18]],"s":[["func",12],[" ",17],["resolve",7],["<",17],["Act",0],[">(",17],["id",1],[": ",17],["Self",18],[".",17],["ActorID",18],[", ",17],["as",1],[": ",17],["Act",18],[".Type) ",17],["throws",12],[" -> ",17],["Act",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"c":[["Act",1,"DistributedActor",5],["Self.ActorID",2,"Act.ID"]],"g":[["Act",0,1]],"d":"Resolve a local or remote actor address to a real actor instance, or throw if unable to.\nThe returned value is either a local actor or proxy to a remote actor.\n\nResolving an actor is called when a specific distributed actors `init(from:)`\ndecoding initializer is invoked. Once the actor's identity is deserialized\nusing the `decodeIdentity(from:)` call, it is fed into this function, which\nis responsible for resolving the identity to a remote or local actor reference.\n\nIf the resolve fails, meaning that it cannot locate a local actor managed for\nthis identity, managed by this transport, nor can a remote actor reference\nbe created for this identity on this transport, then this function must throw.\n\nIf this function returns correctly, the returned actor reference is immediately\nusable. It may not necessarily imply the strict *existence* of a remote actor\nthe identity was pointing towards, e.g. when a remote system allocates actors\nlazily as they are first time messaged to, however this should not be a concern\nof the sending side.\n\nDetecting liveness of such remote actors shall be offered / by transport libraries\nby other means, such as \"watching an actor for termination\" or similar."},{"p":["DistributedActorSystem","assignID(_:)"],"f":[["func",12],[" ",17],["assignID",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) -> ",17],["Self",18],[".",17],["ActorID",18],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Self",18],[".",17],["ActorID",18],[" == ",17],["Act",18],[".",17],["ID",18]],"s":[["func",12],[" ",17],["assignID",7],["<",17],["Act",0],[">(",17],["Act",18],[".Type) -> ",17],["Self",18],[".",17],["ActorID",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"c":[["Act",1,"DistributedActor",5],["Self.ActorID",2,"Act.ID"]],"g":[["Act",0,1]],"d":"Create an `ActorID` for the passed actor type.\n\nThis function is invoked by an distributed actor during its initialization,\nand the returned address value is stored along with it for the time of its\nlifetime.\n\nThe address MUST uniquely identify the actor, and allow resolving it.\nE.g. if an actor is created under address `addr1` then immediately invoking\n`system.resolve(id: addr1, as: Greeter.self)` MUST return a reference\nto the same actor."},{"p":["DistributedActorSystem","resignID(_:)"],"f":[["func",12],[" ",17],["resignID",7],["(",17],["_",1],[" ",17],["id",2],[": ",17],["Self",18],[".",17],["ActorID",18],[")",17]],"s":[["func",12],[" ",17],["resignID",7],["(",17],["Self",18],[".",17],["ActorID",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Called during when a distributed actor is deinitialized, or fails to initialize completely (e.g. by throwing\nout of an `init` that did not completely initialize all of the the actors stored properties yet).\n\nThis method is guaranteed to be called at-most-once for a given id (assuming IDs are unique,\nand not re-cycled by the system), i.e. if it is called during a failure to initialize completely,\nthe call from the actor's deinitalizer will not happen (as under these circumstances, `deinit` will be run).\n\nIf the `actorReady` gets called with some unknown ID, it should crash immediately as it signifies some\nvery unexpected use of the system.\n\n- Parameter id: the id of an actor managed by this system that has begun its `deinit`."},{"p":["DistributedActorSystem","executeDistributedTarget(on:mangledTargetName:invocationDecoder:handler:)"],"f":[["func",12],[" ",17],["executeDistributedTarget",7],["<",17],["Act",0],[", ",17],["ResultHandler",0],[">(",17],["on",1],[" ",17],["actor",2],[": ",17],["Act",18],[", ",17],["mangledTargetName",1],[": ",17],["String",18,53],[", ",17],["invocationDecoder",1],[": ",17],["inout",12],[" ",17],["Self",18],[".",17],["InvocationDecoder",18],[", ",17],["handler",1],[": ",17],["ResultHandler",18],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["ResultHandler",18],[" : ",17],["DistributedTargetInvocationResultHandler",18,4]],"s":[["func",12],[" ",17],["executeDistributedTarget",7],["<",17],["Act",0],[", ",17],["ResultHandler",0],[">(",17],["on",1],[": ",17],["Act",18],[", ",17],["mangledTargetName",1],[": ",17],["String",18],[", ",17],["invocationDecoder",1],[": ",17],["inout",12],[" ",17],["Self",18],[".",17],["InvocationDecoder",18],[", ",17],["handler",1],[": ",17],["ResultHandler",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"c":[["Act",1,"DistributedActor",5],["ResultHandler",1,"DistributedTargetInvocationResultHandler",4]],"g":[["Act",0,1],["ResultHandler",1,1]],"d":"Prepare and execute a call to the distributed function identified by the passed arguments,\non the passed `actor`, and collect its results using the `ResultHandler`.\n\nThis method encapsulates multiple steps that are invoked in executing a distributed function,\ninto one very efficient implementation. The steps involved are:\n\n- looking up the distributed function based on its name\n- decoding, in an efficient manner, all arguments from the `Args` container into a well-typed representation\n- using that representation to perform the call on the target method\n\nThe reason for this API using a `ResultHandler` rather than returning values directly,\nis that thanks to this approach it can avoid any existential boxing, and can serve the most\nlatency sensitive-use-cases."},{"p":["DistributedTargetInvocationDecoder","decodeErrorType()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeErrorType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"s":[["func",12],[" ",17],["decodeErrorType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]]},{"p":["DistributedTargetInvocationDecoder","decodeReturnType()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeReturnType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"s":[["func",12],[" ",17],["decodeReturnType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]]},{"p":["DistributedTargetInvocationDecoder","decodeGenericSubstitutions()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeGenericSubstitutions",7],["() ",17],["throws",12],[" -> [",17],["Any",12],[".Type]",17]],"s":[["func",12],[" ",17],["decodeGenericSubstitutions",7],["() ",17],["throws",12],[" -> [",17],["Any",12],[".Type]",17]]},{"p":["DistributedTargetInvocationEncoder","doneRecording()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["doneRecording",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["doneRecording",7],["() ",17],["throws",12]]},{"p":["DistributedTargetInvocationEncoder","recordGenericSubstitution(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["recordGenericSubstitution",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["T",18],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["recordGenericSubstitution",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12]],"g":[["T",0,1]],"d":"The arguments must be encoded order-preserving, and once `decodeGenericSubstitutions`\nis called, the substitutions must be returned in the same order in which they were recorded."},{"p":["DistributedTargetInvocationResultHandler","onReturnVoid()"],"f":[["func",12],[" ",17],["onReturnVoid",7],["() ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["onReturnVoid",7],["() ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedTargetInvocationResultHandler","onThrow(error:)"],"f":[["func",12],[" ",17],["onThrow",7],["<",17],["Err",0],[">(",17],["error",1],[": ",17],["Err",18],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Err",18],[" : ",17],["Error",18,59]],"s":[["func",12],[" ",17],["onThrow",7],["<",17],["Err",0],[">(",17],["error",1],[": ",17],["Err",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"c":[["Err",1,"Error",59]],"g":[["Err",0,1]]},{"p":["DistributedTargetInvocationResultHandler","onReturn(value:)"],"f":[["func",12],[" ",17],["onReturn",7],["<",17],["Res",0],[">(",17],["value",1],[": ",17],["Res",18],[") ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["onReturn",7],["<",17],["Res",0],[">(",17],["value",1],[": ",17],["Res",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Res",0,1]]},{"p":["DistributedActor","hash(into:)"],"f":[["nonisolated",12],[" ",17],["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,60],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActor","whenLocal(_:)"],"f":[["nonisolated",12],[" ",17],["func",12],[" ",17],["whenLocal",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["isolated",12],[" ",17],["Self",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,63]],"s":[["func",12],[" ",17],["whenLocal",7],["<",17],["T",0],[">((",17],["isolated",12],[" ",17],["Self",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"c":[["T",1,"Sendable",63]],"g":[["T",0,1]],"d":"Executes the passed 'body' only when the distributed actor is local instance.\n\nThe `Self` passed to the the body closure is isolated, meaning that the\nclosure can be used to call non-distributed functions, or even access actor\nstate.\n\nWhen the actor is remote, the closure won't be executed and this function will return nil."},{"p":["DistributedActor","encode(to:)"],"f":[["nonisolated",12],[" ",17],["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["encoder",2],[": ",17],["Encoder",18,62],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Encoder",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.ID",1,"Encodable",48]],"c":[["Self.ID",1,"Encodable",48]]},{"p":["DistributedActor","==(_:_:)"],"f":[["nonisolated",12],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Self",18],[", ",17],["rhs",2],[": ",17],["Self",18],[") -> ",17],["Bool",18,54]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["DistributedActor","SerializationRequirement"],"f":[["typealias",12],[" ",17],["SerializationRequirement",7],[" = ",17],["Self",18],[".",17],["ActorSystem",18],[".",17],["SerializationRequirement",18]],"s":[["typealias",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The serialization requirement to apply to all distributed declarations inside the actor."},{"p":["CodingUserInfoKey","actorSystemKey"],"f":[["static",12],[" ",17],["let",12],[" ",17],["actorSystemKey",7],[": ",17],["CodingUserInfoKey",18,58]],"s":[["static",12],[" ",17],["let",12],[" ",17],["actorSystemKey",7],[": ",17],["CodingUserInfoKey",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}}],"edges":{"conformer":[0,63,[],1,59,[],1,63,[],5,47,[],5,49,[],5,51,[],5,56,[],5,63,[],14,1,[],14,59,[],14,63,[],15,1,[],15,59,[],15,63,[]],"member":[17,14,18,15,19,5,20,15,23,16,24,16,25,15,32,0,41,5,42,5,43,5,44,5,45,5,46,58],"override":[22,57],"requirement":[6,0,7,0,8,0,9,0,10,2,11,3,12,4,13,5,21,5,22,5,26,5,27,0,28,0,29,0,30,0,31,0,33,2,34,2,35,2,36,3,37,3,38,4,39,4,40,4],"defaultImplementation":[41,50]},"hints":[41,50,44,52],"sourcemap":[]}