{"culture":"_StringProcessing","dependencies":[{"package":"swift-standard-library","modules":["Swift","_RegexParser"]}],"extensions":[],"partitions":[{"namespace":"_StringProcessing","communities":[{"community":"protocol","startIndex":0,"endIndex":2},{"community":"associatedtype","startIndex":2,"endIndex":3},{"community":"struct","startIndex":3,"endIndex":10},{"community":"init","startIndex":10,"endIndex":18},{"community":"subscript","startIndex":18,"endIndex":24},{"community":"type.property","startIndex":24,"endIndex":31},{"community":"property","startIndex":31,"endIndex":44},{"community":"method","startIndex":44,"endIndex":65},{"community":"type.op","startIndex":65,"endIndex":67}]},{"namespace":"Swift","communities":[{"community":"method","startIndex":67,"endIndex":100}]}],"identifiers":["s17_StringProcessing14RegexComponentP","s17_StringProcessing29CustomConsumingRegexComponentP","s17_StringProcessing14RegexComponentP0C6OutputQa","s17_StringProcessing14AnyRegexOutputV","s17_StringProcessing14AnyRegexOutputV7ElementV","s17_StringProcessing18RegexSemanticLevelV","s17_StringProcessing21RegexWordBoundaryKindV","s17_StringProcessing23RegexRepetitionBehaviorV","s17_StringProcessing5RegexV","s17_StringProcessing5RegexV5MatchV","s17_StringProcessing14AnyRegexOutputVyAcA0D0V5MatchVyx_Gclufc","s17_StringProcessing5RegexV5MatchVA2A03AnyC6OutputVRszlEyAEyAG_GAEyqd___Gclufc","s17_StringProcessing5RegexV7quotingACyxGSS_tcfc","s17_StringProcessing5RegexV8verbatimACyxGSS_tcfc","s17_StringProcessing5RegexVA2A03AnyC6OutputVRszlEyACyAEGACyqd__Gclufc","s17_StringProcessing5RegexVA2A03AnyC6OutputVRszlEyACyAEGSSKcfc","s17_StringProcessing5RegexV_2asACyxGSS_xmtKcfc","s17_StringProcessing5RegexV_2asACyxGSgACyAA03AnyC6OutputVG_xmtcfc","s17_StringProcessing14AnyRegexOutputVyAC7ElementVSgSScip","s17_StringProcessing14AnyRegexOutputVyAC7ElementVSicip","s17_StringProcessing5RegexV5MatchV13dynamicMemberqd__s7KeyPathCyxqd__G_tcluip","s17_StringProcessing5RegexV5MatchV13dynamicMemberxs7KeyPathCyx_yt9_doNotUsetxG_tcip","s17_StringProcessing5RegexV5MatchVA2A03AnyC6OutputVRszlE13dynamicMemberSss7KeyPathCySs_yt9_doNotUsetSsG_tcip","s17_StringProcessing5RegexV5MatchVA2A03AnyC6OutputVRszlEyAG7ElementVSgSScip","s17_StringProcessing18RegexSemanticLevelV13unicodeScalarACvpZ","s17_StringProcessing18RegexSemanticLevelV15graphemeClusterACvpZ","s17_StringProcessing21RegexWordBoundaryKindV13unicodeLevel1ACvpZ","s17_StringProcessing21RegexWordBoundaryKindV13unicodeLevel2ACvpZ","s17_StringProcessing23RegexRepetitionBehaviorV10possessiveACvpZ","s17_StringProcessing23RegexRepetitionBehaviorV5eagerACvpZ","s17_StringProcessing23RegexRepetitionBehaviorV9reluctantACvpZ","s17_StringProcessing14AnyRegexOutputV10startIndexSivp","s17_StringProcessing14AnyRegexOutputV5countSivp","s17_StringProcessing14AnyRegexOutputV7ElementV4nameSSSgvp","s17_StringProcessing14AnyRegexOutputV7ElementV4typeypXpvp","s17_StringProcessing14AnyRegexOutputV7ElementV5rangeSnySS5IndexVGSgvp","s17_StringProcessing14AnyRegexOutputV7ElementV5valueypSgvp","s17_StringProcessing14AnyRegexOutputV7ElementV9substringSsSgvp","s17_StringProcessing14AnyRegexOutputV8endIndexSivp","s17_StringProcessing14RegexComponentP5regexAA0C0Vy0C6OutputQzGvp","s17_StringProcessing29CustomConsumingRegexComponentPAAE5regexAA0E0Vy0E6OutputQzGvp","s17_StringProcessing5RegexV5MatchV5rangeSnySS5IndexVGvp","s17_StringProcessing5RegexV5MatchV6outputxvp","s17_StringProcessing5RegexV5regexACyxGvp","s17_StringProcessing14AnyRegexOutputV13extractValues2asxSgxm_tlF","s17_StringProcessing14AnyRegexOutputV5index5afterS2i_tF","s17_StringProcessing14AnyRegexOutputV5index6beforeS2i_tF","s17_StringProcessing14RegexComponentPAAE11ignoresCaseyAA0C0Vy0C6OutputQzGSbF","s17_StringProcessing14RegexComponentPAAE15asciiOnlyDigitsyAA0C0Vy0C6OutputQzGSbF","s17_StringProcessing14RegexComponentPAAE16wordBoundaryKindyAA0C0Vy0C6OutputQzGAA0c4WordfG0VF","s17_StringProcessing14RegexComponentPAAE17matchingSemanticsyAA0C0Vy0C6OutputQzGAA0C13SemanticLevelVF","s17_StringProcessing14RegexComponentPAAE18dotMatchesNewlinesyAA0C0Vy0C6OutputQzGSbF","s17_StringProcessing14RegexComponentPAAE18repetitionBehavioryAA0C0Vy0C6OutputQzGAA0c10RepetitionF0VF","s17_StringProcessing14RegexComponentPAAE19asciiOnlyWhitespaceyAA0C0Vy0C6OutputQzGSbF","s17_StringProcessing14RegexComponentPAAE23anchorsMatchLineEndingsyAA0C0Vy0C6OutputQzGSbF","s17_StringProcessing14RegexComponentPAAE23asciiOnlyWordCharactersyAA0C0Vy0C6OutputQzGSbF","s17_StringProcessing14RegexComponentPAAE25asciiOnlyCharacterClassesyAA0C0Vy0C6OutputQzGSbF","s17_StringProcessing29CustomConsumingRegexComponentP9consuming_10startingAt2inSS5IndexV10upperBound_0E6OutputQz6outputtSgSS_AHSnyAHGtKF","s17_StringProcessing5RegexV10firstMatch2inAC0E0Vyx_GSgSS_tKF","s17_StringProcessing5RegexV10firstMatch2inAC0E0Vyx_GSgSs_tKF","s17_StringProcessing5RegexV10wholeMatch2inAC0E0Vyx_GSgSS_tKF","s17_StringProcessing5RegexV10wholeMatch2inAC0E0Vyx_GSgSs_tKF","s17_StringProcessing5RegexV11prefixMatch2inAC0E0Vyx_GSgSS_tKF","s17_StringProcessing5RegexV11prefixMatch2inAC0E0Vyx_GSgSs_tKF","s17_StringProcessing5RegexV8contains12captureNamedSbSS_tF","s17_StringProcessing14RegexComponentPAAE2teoiySbx_SStFZ","s17_StringProcessing14RegexComponentPAAE2teoiySbx_SstFZ","sSK17_StringProcessingSL7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSK17_StringProcessingSs11SubSequenceRtzrlE10firstMatch2ofAA5RegexV0F0Vyqd___GSgqd_0__t0H6OutputQyd_0_Rsd__AA0H9ComponentRd_0_r0_lF","sSK17_StringProcessingSs11SubSequenceRtzrlE10firstRange2ofSnySS5IndexVGSgqd___tAA14RegexComponentRd__lF","sSK17_StringProcessingSs11SubSequenceRtzrlE10wholeMatch2ofAA5RegexV0F0Vy0H6OutputQyd___GSgqd___tAA0H9ComponentRd__lF","sSK17_StringProcessingSs11SubSequenceRtzrlE11prefixMatch2ofAA5RegexV0F0Vy0H6OutputQyd___GSgqd___tAA0H9ComponentRd__lF","sSK17_StringProcessingSs11SubSequenceRtzrlE14trimmingPrefixySsqd__AA14RegexComponentRd__lF","sSK17_StringProcessingSs11SubSequenceRtzrlE5split9separator9maxSplits25omittingEmptySubsequencesSaySsGqd___SiSbtAA14RegexComponentRd__lF","sSK17_StringProcessingSs11SubSequenceRtzrlE6ranges2ofSaySnySS5IndexVGGqd___tAA14RegexComponentRd__lF","sSK17_StringProcessingSs11SubSequenceRtzrlE6starts4withSbqd___tAA14RegexComponentRd__lF","sSK17_StringProcessingSs11SubSequenceRtzrlE7matches2ofSayAA5RegexV5MatchVyqd___GGqd_0__t0G6OutputQyd_0_Rsd__AA0G9ComponentRd_0_r0_lF","sSK17_StringProcessingSs11SubSequenceRtzrlE8containsySbqd__AA14RegexComponentRd__lF","sSl17_StringProcessing11SubSequenceQzRszSQ7ElementRpzrlE10trimPrefixyyqd__STRd__ADQyd__AERSlF","sSl17_StringProcessing11SubSequenceQzRszrlE10trimPrefix5whileySb7ElementQzKXE_tKF","sSl17_StringProcessingE14trimmingPrefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSl17_StringProcessingSQ7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGqd___SiSbtSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE6ranges2ofSaySny5IndexQzGGqd___tSlRd__ABQyd__ACRSlF","sSl17_StringProcessingSQ7ElementRpzrlE8containsySbqd__SlRd__ABQyd__ACRSlF","sSm17_StringProcessingE10trimPrefix5whileySb7ElementQzKXE_tKF","sSm17_StringProcessingSKRzSs11SubSequenceSlRtzrlE10trimPrefixyyqd__AA14RegexComponentRd__lF","sSm17_StringProcessingSQ7ElementRpzrlE10trimPrefixyyqd__STRd__ABQyd__ACRSlF","sSm17_StringProcessingSQ7ElementRpzrlE7replace_4with15maxReplacementsyqd___qd_0_SitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AGRSr0_lF","sSm17_StringProcessingSQ7ElementRpzrlE9replacing_4with15maxReplacementsxqd___qd_0_SitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AGRSr0_lF","sSm17_StringProcessingSQ7ElementRpzrlE9replacing_4with8subrange15maxReplacementsxqd___qd_0_Sny5IndexQzGSitSlRd__SlRd_0_ABQyd__ACRSABQyd_0_AKRSr0_lF","sSm17_StringProcessingSs11SubSequenceRtzrlE7replace_15maxReplacements4withyqd_1__Siqd_0_AA5RegexV5MatchVyqd___GKXEtK0I6OutputQyd_1_Rsd__SlRd_0_AA0I9ComponentRd_1_SJ7ElementRtd_0_r1_lF","sSm17_StringProcessingSs11SubSequenceRtzrlE7replace_4with15maxReplacementsyqd_0__qd__SitSlRd__AA14RegexComponentRd_0_SJ7ElementRtd__r0_lF","sSm17_StringProcessingSs11SubSequenceRtzrlE9replacing_15maxReplacements4withxqd_1__Siqd_0_AA5RegexV5MatchVyqd___GKXEtK0I6OutputQyd_1_Rsd__SlRd_0_AA0I9ComponentRd_1_SJ7ElementRtd_0_r1_lF","sSm17_StringProcessingSs11SubSequenceRtzrlE9replacing_4with15maxReplacementsxqd_0__qd__SitSlRd__AA14RegexComponentRd_0_SJ7ElementRtd__r0_lF","sSm17_StringProcessingSs11SubSequenceRtzrlE9replacing_4with8subrange15maxReplacementsxqd_0__qd__SnySS5IndexVGSitSlRd__AA14RegexComponentRd_0_SJ7ElementRtd__r0_lF","sSm17_StringProcessingSs11SubSequenceRtzrlE9replacing_8subrange15maxReplacements4withxqd_1__SnySS5IndexVGSiqd_0_AA5RegexV5MatchVyqd___GKXEtK0K6OutputQyd_1_Rsd__SlRd_0_AA0K9ComponentRd_1_SJ7ElementRtd_0_r1_lF","sSy17_StringProcessingE8containsySbSSF","sSy17_StringProcessingE8containsySbSsF","sSH","sSJ","sSK","sSK12_RegexParserE10mapOffsetsySny5IndexQzGSi5lower_Si5uppert_tF","sSK12_RegexParserE14flatmapOffsetsySny5IndexQzGSi5lower_Si5uppertSgF","sSK9formIndex6beforey0B0Qzz_tF","sSKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF","sSKsE4last5where7ElementQzSgSbADKXE_tKF","sSKsE4last7ElementQzSgvp","sSKsE6suffixy11SubSequenceQzSiF","sSKsE8dropLasty11SubSequenceQzSiF","sSKsE8reverseds18ReversedCollectionVyxGyF","sSKsE9formIndex6beforey0B0Qzz_tF","sSKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSL","sSQ","sSQsE2neoiySbx_xtFZ","sSS","sSS5IndexV","sST","sST12_RegexParserE3allyS2b7ElementQzXEF","sST12_RegexParserE3anyyS2b7ElementQzXEF","sST12_RegexParserE4noneyS2b7ElementQzXEF","sST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE10allSatisfyyS2b7ElementQzKXEKF","sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE10enumerateds18EnumeratedSequenceVyxGyF","sSTsE13elementsEqual_2bySbqd___Sb7ElementQz_ACQyd__tKXEtKSTRd__lF","sSTsE19underestimatedCountSivp","sSTsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF","sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF","sSTsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSTsE3max2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE3min2by7ElementQzSgSbAD_ADtKXE_tKF","sSTsE4lazys12LazySequenceVyxGvp","sSTsE5first5where7ElementQzSgSbADKXE_tKF","sSTsE6filterySay7ElementQzGSbACKXEKF","sSTsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF","sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF","sSTsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF","sSTsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF","sSTsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF","sSTsE7flatMapySayqd__Gqd__Sg7ElementQzKXEKlF","sSTsE7forEachyyy7ElementQzKXEKF","sSTsE8contains5whereS2b7ElementQzKXE_tKF","sSTsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF","sSTsE8shuffledSay7ElementQzGyF","sSb","sSi","sSk","sSk5index5after5IndexQzAD_tF","sSk5index6before5IndexQzAD_tF","sSk7ElementQa","sSksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF","sSl","sSl10startIndex0B0Qzvp","sSl12_RegexParserE15convertByOffset_2in5IndexQyd__ADQz_qd__tSlRd__lF","sSl12_RegexParserE15convertByOffset_2inSny5IndexQyd__GSnyADQzG_qd__tSlRd__lF","sSl12_RegexParserE5index8atOffset5IndexQzSi_tF","sSl12_RegexParserE5split6around11SubSequenceQz6prefix_A2E6suffixtSny5IndexQzG_tF","sSl12_RegexParserE6offset2ofSi5IndexQz_tF","sSl12_RegexParserE6offset7ofIndexSi0E0Qz_tF","sSl12_RegexParserE7offsets2ofSnySiGSny5IndexQzG_tF","sSl5countSivp","sSl8endIndex0B0Qzvp","sSlsE10firstIndex5where0B0QzSgSb7ElementQzKXE_tKF","sSlsE13randomElement0B0QzSgyF","sSlsE13randomElement5using0B0QzSgqd__z_tSGRd__lF","sSlsE19underestimatedCountSivp","sSlsE3mapySayqd__Gqd__7ElementQzKXEKlF","sSlsE4drop5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE5countSivp","sSlsE5first7ElementQzSgvp","sSlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF","sSlsE6prefix4upTo11SubSequenceQz5IndexQz_tF","sSlsE6prefix5while11SubSequenceQzSb7ElementQzKXE_tKF","sSlsE6prefix7through11SubSequenceQz5IndexQz_tF","sSlsE6prefixy11SubSequenceQzSiF","sSlsE6suffix4from11SubSequenceQz5IndexQz_tF","sSlsE7isEmptySbvp","sSlsE9dropFirsty11SubSequenceQzSiF","sSlsE9formIndex5aftery0B0Qzz_tF","sSlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF","sSlsE9formIndex_8offsetByy0B0Qzz_SitF","sSlsEy11SubSequenceQzqd__cSXRd__5BoundQyd__5IndexRtzluip","sSlsEy11SubSequenceQzys15UnboundedRange_OXEcip","sSlss16IndexingIteratorVyxG0B0RtzrlE04makeB0ACyF","sSlss5SliceVyxG11SubSequenceRtzrlEyACSny5IndexQzGcip","sSly7ElementQz5IndexQzcip","sSm","sSn","sSs","sSy","ss7KeyPathC"],"vertices":[{"p":["RegexComponent"],"f":[["protocol",12],[" ",17],["RegexComponent",7],["<",17],["RegexOutput",18],[">",17]],"s":[["protocol",12],[" ",17],["RegexComponent",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"A type that represents a regular expression."},{"p":["CustomConsumingRegexComponent"],"f":[["protocol",12],[" ",17],["CustomConsumingRegexComponent",7],[" : ",17],["RegexComponent",18,0]],"s":[["protocol",12],[" ",17],["CustomConsumingRegexComponent",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["RegexComponent","RegexOutput"],"f":[["associatedtype",12],[" ",17],["RegexOutput",7]],"s":[["associatedtype",12],[" ",17],["RegexOutput",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["AnyRegexOutput"],"f":[["struct",12],[" ",17],["AnyRegexOutput",7]],"s":[["struct",12],[" ",17],["AnyRegexOutput",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"A type-erased regex output."},{"p":["AnyRegexOutput","Element"],"f":[["struct",12],[" ",17],["Element",7]],"s":[["struct",12],[" ",17],["Element",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"An individual type-erased output value.","o":152},{"p":["RegexSemanticLevel"],"f":[["struct",12],[" ",17],["RegexSemanticLevel",7]],"s":[["struct",12],[" ",17],["RegexSemanticLevel",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["RegexWordBoundaryKind"],"f":[["struct",12],[" ",17],["RegexWordBoundaryKind",7]],"s":[["struct",12],[" ",17],["RegexWordBoundaryKind",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["RegexRepetitionBehavior"],"f":[["struct",12],[" ",17],["RegexRepetitionBehavior",7]],"s":[["struct",12],[" ",17],["RegexRepetitionBehavior",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Specifies how much to attempt to match when using a quantifier."},{"p":["Regex"],"f":[["struct",12],[" ",17],["Regex",7],["<",17],["Output",0],[">",17]],"s":[["struct",12],[" ",17],["Regex",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"A regular expression.\n\n    let regex = try Regex(\"a(.*)b\")\n    let match = \"cbaxb\".firstMatch(of: regex)\n    print(match.0) // \"axb\"\n    print(match.1) // \"x\"\n"},{"p":["Regex","Match"],"f":[["@dynamicMemberLookup",3],[" ",17],["struct",12],[" ",17],["Match",7]],"s":[["struct",12],[" ",17],["Match",7]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"The result of matching a regex against a string.\n\nA `Match` forwards API to the `Output` generic parameter,\nproviding direct access to captures."},{"p":["AnyRegexOutput","init(_:)"],"f":[["init",10],["<",17],["Output",0],[">(",17],["_",1],[" ",17],["match",2],[": ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],[")",17]],"s":[["init",10],["<",17],["Output",0],[">(",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Creates a type-erased regex output from an existing match.\n\nUse this initializer to fit a strongly-typed regex match into the\nuse site of a type-erased regex output."},{"p":["Regex","Match","init(_:)"],"f":[["init",10],["<",17],["Output",0],[">(",17],["_",1],[" ",17],["match",2],[": ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],[")",17]],"s":[["init",10],["<",17],["Output",0],[">(",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Output",2,"AnyRegexOutput",3]],"c":[["Output",2,"AnyRegexOutput",3]],"g":[["Output",0,0],["Output",0,1]],"d":"Creates a type-erased regex match from an existing match.\n\nUse this initializer to fit a regex match with strongly-typed captures into the\nuse site of a type-erased regex match."},{"p":["Regex","init(quoting:)"],"f":[["init",10],["(",17],["quoting",1],[" ",17],["string",2],[": ",17],["String",18,117],[")",17]],"s":[["init",10],["(",17],["quoting",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]]},{"p":["Regex","init(verbatim:)"],"f":[["init",10],["(",17],["verbatim",1],[": ",17],["String",18,117],[")",17]],"s":[["init",10],["(",17],["verbatim",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Produces a regex that matches `verbatim` exactly, as though every\nmetacharacter in it was escaped."},{"p":["Regex","init(_:)"],"f":[["init",10],["<",17],["Output",0],[">(",17],["_",1],[" ",17],["regex",2],[": ",17],["Regex",18,8],["<",17],["Output",18],[">)",17]],"s":[["init",10],["<",17],["Output",0],[">(",17],["Regex",18],["<",17],["Output",18],[">)",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Output",2,"AnyRegexOutput",3]],"c":[["Output",2,"AnyRegexOutput",3]],"g":[["Output",0,0],["Output",0,1]],"d":"Creates a type-erased regex from an existing regex.\n\nUse this initializer to fit a regex with strongly-typed captures into the\nuse site of a type-erased regex, i.e. one that was created from a string."},{"p":["Regex","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["pattern",2],[": ",17],["String",18,117],[") ",17],["throws",12]],"s":[["init",10],["(",17],["String",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Output",2,"AnyRegexOutput",3]],"c":[["Output",2,"AnyRegexOutput",3]],"g":[["Output",0,0]],"d":"Parses and compiles a regular expression, resulting in a type-erased capture list.\n\n- Parameter pattern: The regular expression."},{"p":["Regex","init(_:as:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["pattern",2],[": ",17],["String",18,117],[", ",17],["as",1],[": ",17],["Output",18],[".Type = Output.self) ",17],["throws",12]],"s":[["init",10],["(",17],["String",18],[", ",17],["as",1],[": ",17],["Output",18],[".Type) ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Parses and compiles a regular expression.\n\n- Parameter pattern: The regular expression.\n- Parameter as: The desired type for the output."},{"p":["Regex","init(_:as:)"],"f":[["init",10],["?(",17],["_",1],[" ",17],["erased",2],[": ",17],["Regex",18,8],["<",17],["AnyRegexOutput",18,3],[">, ",17],["as",1],[": ",17],["Output",18],[".Type = Output.self)",17]],"s":[["init",10],["?(",17],["Regex",18],["<",17],["AnyRegexOutput",18],[">, ",17],["as",1],[": ",17],["Output",18],[".Type)",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Creates a strongly-typed regex from a type-erased regex.\n\nUse this initializer to create a strongly-typed regex from\none that was created from a string. Returns `nil` if the types\ndon't match."},{"p":["AnyRegexOutput","subscript(_:)"],"f":[["subscript",10],["(",17],["name",2],[": ",17],["String",18,117],[") -> ",17],["AnyRegexOutput",18,3],[".",17],["Element",18,4],["? { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["String",18],[") -> ",17],["AnyRegexOutput",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Access a capture by name. Returns `nil` if no capture with that name was present in the Regex."},{"p":["AnyRegexOutput","subscript(_:)"],"f":[["subscript",10],["(",17],["position",2],[": ",17],["Int",18,148],[") -> ",17],["AnyRegexOutput",18,3],[".",17],["Element",18,4],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["Int",18],[") -> ",17],["AnyRegexOutput",18],[".",17],["Element",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"o":188},{"p":["Regex","Match","subscript(dynamicMember:)"],"f":[["subscript",10],["<",17],["T",0],[">(",17],["dynamicMember",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,193],["<",17],["Output",18],[", ",17],["T",18],[">) -> ",17],["T",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["<",17],["T",0],[">(",17],["dynamicMember",1],[" _: ",17],["KeyPath",18],["<",17],["Output",18],[", ",17],["T",18],[">) -> ",17],["T",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0],["T",0,1]],"d":"Accesses a capture by its name or number."},{"p":["Regex","Match","subscript(dynamicMember:)"],"f":[["subscript",10],["(",17],["dynamicMember",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,193],["<(",17],["Output",18],[", _doNotUse",17],[": ()), ",17],["Output",18],[">) -> ",17],["Output",18],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["dynamicMember",1],[" _: ",17],["KeyPath",18],["<(",17],["Output",18],[", _doNotUse",17],[": ()), ",17],["Output",18],[">) -> ",17],["Output",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Accesses a capture using the `.0` syntax, even when the match isn't a tuple."},{"p":["Regex","Match","subscript(dynamicMember:)"],"f":[["subscript",10],["(",17],["dynamicMember",1],[" ",17],["keyPath",2],[": ",17],["KeyPath",18,193],["<(",17],["Substring",18,191],[", _doNotUse",17],[": ()), ",17],["Substring",18,191],[">) -> ",17],["Substring",18,191],[" { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["dynamicMember",1],[" _: ",17],["KeyPath",18],["<(",17],["Substring",18],[", _doNotUse",17],[": ()), ",17],["Substring",18],[">) -> ",17],["Substring",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Output",2,"AnyRegexOutput",3]],"c":[["Output",2,"AnyRegexOutput",3]],"g":[["Output",0,0]],"d":"Accesses the whole match using the `.0` syntax."},{"p":["Regex","Match","subscript(_:)"],"f":[["subscript",10],["(",17],["name",2],[": ",17],["String",18,117],[") -> ",17],["AnyRegexOutput",18,3],[".",17],["Element",18,4],["? { ",17],["get",12],[" }",17]],"s":[["subscript",10],["(",17],["String",18],[") -> ",17],["AnyRegexOutput",18],[".",17],["Element",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Output",2,"AnyRegexOutput",3]],"c":[["Output",2,"AnyRegexOutput",3]],"g":[["Output",0,0]],"d":"Access a capture by name. Returns `nil` if there's no capture with that name."},{"p":["RegexSemanticLevel","unicodeScalar"],"f":[["static",12],[" ",17],["var",12],[" ",17],["unicodeScalar",7],[": ",17],["RegexSemanticLevel",18,5],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["unicodeScalar",7],[": ",17],["RegexSemanticLevel",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Match at the Unicode scalar level.\n\nAt this semantic level, the string's `UnicodeScalarView` is used for matching,\nand each matched element is a `UnicodeScalar` value."},{"p":["RegexSemanticLevel","graphemeCluster"],"f":[["static",12],[" ",17],["var",12],[" ",17],["graphemeCluster",7],[": ",17],["RegexSemanticLevel",18,5],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["graphemeCluster",7],[": ",17],["RegexSemanticLevel",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Match at the character level.\n\nAt this semantic level, each matched element is a `Character` value.\nThis is the default semantic level."},{"p":["RegexWordBoundaryKind","unicodeLevel1"],"f":[["static",12],[" ",17],["var",12],[" ",17],["unicodeLevel1",7],[": ",17],["RegexWordBoundaryKind",18,6],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["unicodeLevel1",7],[": ",17],["RegexWordBoundaryKind",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"A word boundary algorithm that implements the \"simple word boundary\"\nUnicode recommendation.\n\nA simple word boundary is a position in the input between two characters\nthat match `/\\w\\W/` or `/\\W\\w/`, or between the start or end of the input\nand a `\\w` character. Word boundaries therefore depend on the option-\ndefined behavior of `\\w`."},{"p":["RegexWordBoundaryKind","unicodeLevel2"],"f":[["static",12],[" ",17],["var",12],[" ",17],["unicodeLevel2",7],[": ",17],["RegexWordBoundaryKind",18,6],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["unicodeLevel2",7],[": ",17],["RegexWordBoundaryKind",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"A word boundary algorithm that implements the \"default word boundary\"\nUnicode recommendation.\n\nDefault word boundaries use a Unicode algorithm that handles some cases\nbetter than simple word boundaries, such as words with internal\npunctuation, changes in script, and Emoji."},{"p":["RegexRepetitionBehavior","possessive"],"f":[["static",12],[" ",17],["var",12],[" ",17],["possessive",7],[": ",17],["RegexRepetitionBehavior",18,7],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["possessive",7],[": ",17],["RegexRepetitionBehavior",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Match as much of the input string as possible, performing no backtracking."},{"p":["RegexRepetitionBehavior","eager"],"f":[["static",12],[" ",17],["var",12],[" ",17],["eager",7],[": ",17],["RegexRepetitionBehavior",18,7],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["eager",7],[": ",17],["RegexRepetitionBehavior",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Match as much of the input string as possible, backtracking when\nnecessary."},{"p":["RegexRepetitionBehavior","reluctant"],"f":[["static",12],[" ",17],["var",12],[" ",17],["reluctant",7],[": ",17],["RegexRepetitionBehavior",18,7],[" { ",17],["get",12],[" }",17]],"s":[["static",12],[" ",17],["var",12],[" ",17],["reluctant",7],[": ",17],["RegexRepetitionBehavior",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Match as little of the input string as possible, expanding the matched\nregion as necessary to complete a match."},{"p":["AnyRegexOutput","startIndex"],"f":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18,148],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["startIndex",7],[": ",17],["Int",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"o":155},{"p":["AnyRegexOutput","count"],"f":[["var",12],[" ",17],["count",7],[": ",17],["Int",18,148],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["count",7],[": ",17],["Int",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"o":163},{"p":["AnyRegexOutput","Element","name"],"f":[["var",12],[" ",17],["name",7],[": ",17],["String",18,117],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["name",7],[": ",17],["String",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The name of this capture, if it has one, otherwise `nil`."},{"p":["AnyRegexOutput","Element","type"],"f":[["var",12],[" ",17],["type",7],[": ",17],["Any",12],[".Type { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["type",7],[": ",17],["Any",12],[".Type",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["AnyRegexOutput","Element","range"],"f":[["var",12],[" ",17],["range",7],[": ",17],["Range",18,190],["<",17],["String",18,117],[".",17],["Index",18,118],[">? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["range",7],[": ",17],["Range",18],["<",17],["String",18],[".",17],["Index",18],[">?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The range over which a value was captured. `nil` for no-capture."},{"p":["AnyRegexOutput","Element","value"],"f":[["var",12],[" ",17],["value",7],[": ",17],["Any",12],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["value",7],[": ",17],["Any",12],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The captured value, `nil` for no-capture."},{"p":["AnyRegexOutput","Element","substring"],"f":[["var",12],[" ",17],["substring",7],[": ",17],["Substring",18,191],["? { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["substring",7],[": ",17],["Substring",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The slice of the input over which a value was captured. `nil` for no-capture."},{"p":["AnyRegexOutput","endIndex"],"f":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18,148],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["endIndex",7],[": ",17],["Int",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"o":164},{"p":["RegexComponent","regex"],"f":[["var",12],[" ",17],["regex",7],[": ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["regex",7],[": ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["CustomConsumingRegexComponent","regex"],"f":[["var",12],[" ",17],["regex",7],[": ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["regex",7],[": ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["Regex","Match","range"],"f":[["let",12],[" ",17],["range",7],[": ",17],["Range",18,190],["<",17],["String",18,117],[".",17],["Index",18,118],[">",17]],"s":[["let",12],[" ",17],["range",7],[": ",17],["Range",18],["<",17],["String",18],[".",17],["Index",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The range of the overall match."},{"p":["Regex","Match","output"],"f":[["var",12],[" ",17],["output",7],[": ",17],["Output",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["output",7],[": ",17],["Output",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"The output produced from the match operation."},{"p":["Regex","regex"],"f":[["var",12],[" ",17],["regex",7],[": ",17],["Regex",18,8],["<",17],["Output",18],["> { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["regex",7],[": ",17],["Regex",18],["<",17],["Output",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"o":39},{"p":["AnyRegexOutput","extractValues(as:)"],"f":[["func",12],[" ",17],["extractValues",7],["<",17],["Output",0],[">(",17],["as",1],[" ",17],["type",2],[": ",17],["Output",18],[".Type = Output.self) -> ",17],["Output",18],["?",17]],"s":[["func",12],[" ",17],["extractValues",7],["<",17],["Output",0],[">(",17],["as",1],[": ",17],["Output",18],[".Type) -> ",17],["Output",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Returns a strongly-typed output by converting type-erased values to the specified type.\n\n- Parameter type: The expected output type.\n- Returns: The output, if the underlying value can be converted to the\n  output type; otherwise `nil`."},{"p":["AnyRegexOutput","index(after:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["after",1],[" ",17],["i",2],[": ",17],["Int",18,148],[") -> ",17],["Int",18,148]],"s":[["func",12],[" ",17],["index",7],["(",17],["after",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"o":150},{"p":["AnyRegexOutput","index(before:)"],"f":[["func",12],[" ",17],["index",7],["(",17],["before",1],[" ",17],["i",2],[": ",17],["Int",18,148],[") -> ",17],["Int",18,148]],"s":[["func",12],[" ",17],["index",7],["(",17],["before",1],[": ",17],["Int",18],[") -> ",17],["Int",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"o":151},{"p":["RegexComponent","ignoresCase(_:)"],"f":[["func",12],[" ",17],["ignoresCase",7],["(",17],["_",1],[" ",17],["ignoresCase",2],[": ",17],["Bool",18,147],[" = true) -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["ignoresCase",7],["(",17],["Bool",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression that ignores case when matching.\n\n- Parameter ignoresCase: A Boolean value indicating whether to ignore case.\n- Returns: The modified regular expression."},{"p":["RegexComponent","asciiOnlyDigits(_:)"],"f":[["func",12],[" ",17],["asciiOnlyDigits",7],["(",17],["_",1],[" ",17],["useASCII",2],[": ",17],["Bool",18,147],[" = true) -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["asciiOnlyDigits",7],["(",17],["Bool",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression that matches only ASCII characters as digits.\n\n- Parameter useasciiOnlyDigits: A Boolean value indicating whether to\n  match only ASCII characters as digits.\n- Returns: The modified regular expression."},{"p":["RegexComponent","wordBoundaryKind(_:)"],"f":[["func",12],[" ",17],["wordBoundaryKind",7],["(",17],["_",1],[" ",17],["wordBoundaryKind",2],[": ",17],["RegexWordBoundaryKind",18,6],[") -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["wordBoundaryKind",7],["(",17],["RegexWordBoundaryKind",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression that uses the specified word boundary algorithm.\n\n- Parameter wordBoundaryKind: The algorithm to use for determining word boundaries.\n- Returns: The modified regular expression."},{"p":["RegexComponent","matchingSemantics(_:)"],"f":[["func",12],[" ",17],["matchingSemantics",7],["(",17],["_",1],[" ",17],["semanticLevel",2],[": ",17],["RegexSemanticLevel",18,5],[") -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["matchingSemantics",7],["(",17],["RegexSemanticLevel",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression that matches with the specified semantic\nlevel.\n\nWhen matching with grapheme cluster semantics (the default),\nmetacharacters like `.` and `\\w`, custom character classes, and character\nclass instances like `.any` match a grapheme cluster when possible,\ncorresponding with the default string representation. In addition,\nmatching with grapheme cluster semantics compares characters using their\ncanonical representation, corresponding with how strings comparison works.\n\nWhen matching with Unicode scalar semantics, metacharacters and character\nclasses always match a single Unicode scalar value, even if that scalar\ncomprises part of a grapheme cluster.\n\nThese semantic levels can lead to different results, especially when\nworking with strings that have decomposed characters. In the following\nexample, `queRegex` matches any 3-character string that begins with `\"q\"`.\n\n    let composed = \"qué\"\n    let decomposed = \"que\\u{301}\"\n\n    let queRegex = /^q..$/\n\n    print(composed.contains(queRegex))\n    // Prints \"true\"\n    print(decomposed.contains(queRegex))\n    // Prints \"true\"\n\nWhen using Unicode scalar semantics, however, the regular expression only\nmatches the composed version of the string, because each `.` matches a\nsingle Unicode scalar value.\n\n    let queRegexScalar = queRegex.matchingSemantics(.unicodeScalar)\n    print(composed.contains(queRegexScalar))\n    // Prints \"true\"\n    print(decomposed.contains(queRegexScalar))\n    // Prints \"false\"\n\n- Parameter semanticLevel: The semantics to use during matching.\n- Returns: The modified regular expression."},{"p":["RegexComponent","dotMatchesNewlines(_:)"],"f":[["func",12],[" ",17],["dotMatchesNewlines",7],["(",17],["_",1],[" ",17],["dotMatchesNewlines",2],[": ",17],["Bool",18,147],[" = true) -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["dotMatchesNewlines",7],["(",17],["Bool",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression where the start and end of input\nanchors (`^` and `$`) also match against the start and end of a line.\n\n- Parameter dotMatchesNewlines: A Boolean value indicating whether `.`\n  should match a newline character.\n- Returns: The modified regular expression."},{"p":["RegexComponent","repetitionBehavior(_:)"],"f":[["func",12],[" ",17],["repetitionBehavior",7],["(",17],["_",1],[" ",17],["behavior",2],[": ",17],["RegexRepetitionBehavior",18,7],[") -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["repetitionBehavior",7],["(",17],["RegexRepetitionBehavior",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression where quantifiers use the specified behavior\nby default.\n\nThis setting does not affect calls to quantifier methods, such as\n`OneOrMore`, that include an explicit `behavior` parameter.\n\nPassing `.eager` or `.reluctant` to this method corresponds to applying\nthe `(?-U)` or `(?U)` option in regex syntax, respectively.\n\n- Parameter behavior: The default behavior to use for quantifiers."},{"p":["RegexComponent","asciiOnlyWhitespace(_:)"],"f":[["func",12],[" ",17],["asciiOnlyWhitespace",7],["(",17],["_",1],[" ",17],["useASCII",2],[": ",17],["Bool",18,147],[" = true) -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["asciiOnlyWhitespace",7],["(",17],["Bool",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression that matches only ASCII characters as space\ncharacters.\n\n- Parameter asciiOnlyWhitespace: A Boolean value indicating whether to\nmatch only ASCII characters as space characters.\n- Returns: The modified regular expression."},{"p":["RegexComponent","anchorsMatchLineEndings(_:)"],"f":[["func",12],[" ",17],["anchorsMatchLineEndings",7],["(",17],["_",1],[" ",17],["matchLineEndings",2],[": ",17],["Bool",18,147],[" = true) -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["anchorsMatchLineEndings",7],["(",17],["Bool",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression where the start and end of input\nanchors (`^` and `$`) also match against the start and end of a line.\n\nThis method corresponds to applying the `m` option in regex syntax. For\nthis behavior in the `RegexBuilder` syntax, see\n``Anchor.startOfLine``, ``Anchor.endOfLine``, ``Anchor.startOfInput``,\nand ``Anchor.endOfInput``.\n\n- Parameter matchLineEndings: A Boolean value indicating whether `^` and\n  `$` should match the start and end of lines, respectively.\n- Returns: The modified regular expression."},{"p":["RegexComponent","asciiOnlyWordCharacters(_:)"],"f":[["func",12],[" ",17],["asciiOnlyWordCharacters",7],["(",17],["_",1],[" ",17],["useASCII",2],[": ",17],["Bool",18,147],[" = true) -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["asciiOnlyWordCharacters",7],["(",17],["Bool",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression that matches only ASCII characters as word\ncharacters.\n\n- Parameter useASCII: A Boolean value indicating whether to match only\n  ASCII characters as word characters.\n- Returns: The modified regular expression."},{"p":["RegexComponent","asciiOnlyCharacterClasses(_:)"],"f":[["func",12],[" ",17],["asciiOnlyCharacterClasses",7],["(",17],["_",1],[" ",17],["useASCII",2],[": ",17],["Bool",18,147],[" = true) -> ",17],["Regex",18,8],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"s":[["func",12],[" ",17],["asciiOnlyCharacterClasses",7],["(",17],["Bool",18],[") -> ",17],["Regex",18],["<",17],["Self",18],[".",17],["RegexOutput",18],[">",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Returns a regular expression that matches only ASCII characters when\nmatching character classes.\n\n- Parameter useASCII: A Boolean value indicating whether to match only\n  ASCII characters when matching character classes.\n- Returns: The modified regular expression."},{"p":["CustomConsumingRegexComponent","consuming(_:startingAt:in:)"],"f":[["func",12],[" ",17],["consuming",7],["(",17],["_",1],[" ",17],["input",2],[": ",17],["String",18,117],[", ",17],["startingAt",1],[" ",17],["index",2],[": ",17],["String",18,117],[".",17],["Index",18,118],[", ",17],["in",1],[" ",17],["bounds",2],[": ",17],["Range",18,190],["<",17],["String",18,117],[".",17],["Index",18,118],[">) ",17],["throws",12],[" -> (upperBound",17],[": ",17],["String",18,117],[".",17],["Index",18,118],[", output",17],[": ",17],["Self",18],[".",17],["RegexOutput",18],[")?",17]],"s":[["func",12],[" ",17],["consuming",7],["(",17],["String",18],[", ",17],["startingAt",1],[": ",17],["String",18],[".",17],["Index",18],[", ",17],["in",1],[": ",17],["Range",18],["<",17],["String",18],[".",17],["Index",18],[">) ",17],["throws",12],[" -> (upperBound",17],[": ",17],["String",18],[".",17],["Index",18],[", output",17],[": ",17],["Self",18],[".",17],["RegexOutput",18],[")?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"d":"Process the input string within the specified bounds, beginning at the given index, and return\nthe end position (upper bound) of the match and the produced output.\n- Parameters:\n  - input: The string in which the match is performed.\n  - index: An index of `input` at which to begin matching.\n  - bounds: The bounds in `input` in which the match is performed.\n- Returns: The upper bound where the match terminates and a matched instance, or `nil` if\n  there isn't a match."},{"p":["Regex","firstMatch(in:)"],"f":[["func",12],[" ",17],["firstMatch",7],["(",17],["in",1],[" ",17],["s",2],[": ",17],["String",18,117],[") ",17],["throws",12],[" -> ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["?",17]],"s":[["func",12],[" ",17],["firstMatch",7],["(",17],["in",1],[": ",17],["String",18],[") ",17],["throws",12],[" -> ",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Finds the first match in a string.\n\n- Parameter s: The string to match this regular expression against.\n- Returns: The match, or `nil` if no match was found."},{"p":["Regex","firstMatch(in:)"],"f":[["func",12],[" ",17],["firstMatch",7],["(",17],["in",1],[" ",17],["s",2],[": ",17],["Substring",18,191],[") ",17],["throws",12],[" -> ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["?",17]],"s":[["func",12],[" ",17],["firstMatch",7],["(",17],["in",1],[": ",17],["Substring",18],[") ",17],["throws",12],[" -> ",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Finds the first match in a substring.\n\n- Parameter s: The substring to match this regular expression against.\n- Returns: The match, or `nil` if no match was found."},{"p":["Regex","wholeMatch(in:)"],"f":[["func",12],[" ",17],["wholeMatch",7],["(",17],["in",1],[" ",17],["s",2],[": ",17],["String",18,117],[") ",17],["throws",12],[" -> ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["?",17]],"s":[["func",12],[" ",17],["wholeMatch",7],["(",17],["in",1],[": ",17],["String",18],[") ",17],["throws",12],[" -> ",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Matches a string in its entirety.\n\n- Parameter s: The string to match this regular expression against.\n- Returns: The match, or `nil` if no match was found."},{"p":["Regex","wholeMatch(in:)"],"f":[["func",12],[" ",17],["wholeMatch",7],["(",17],["in",1],[" ",17],["s",2],[": ",17],["Substring",18,191],[") ",17],["throws",12],[" -> ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["?",17]],"s":[["func",12],[" ",17],["wholeMatch",7],["(",17],["in",1],[": ",17],["Substring",18],[") ",17],["throws",12],[" -> ",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Matches a substring in its entirety.\n\n- Parameter s: The substring to match this regular expression against.\n- Returns: The match, or `nil` if no match was found."},{"p":["Regex","prefixMatch(in:)"],"f":[["func",12],[" ",17],["prefixMatch",7],["(",17],["in",1],[" ",17],["s",2],[": ",17],["String",18,117],[") ",17],["throws",12],[" -> ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["?",17]],"s":[["func",12],[" ",17],["prefixMatch",7],["(",17],["in",1],[": ",17],["String",18],[") ",17],["throws",12],[" -> ",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Matches part of a string, starting at its beginning.\n\n- Parameter s: The string to match this regular expression against.\n- Returns: The match, or `nil` if no match was found."},{"p":["Regex","prefixMatch(in:)"],"f":[["func",12],[" ",17],["prefixMatch",7],["(",17],["in",1],[" ",17],["s",2],[": ",17],["Substring",18,191],[") ",17],["throws",12],[" -> ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["?",17]],"s":[["func",12],[" ",17],["prefixMatch",7],["(",17],["in",1],[": ",17],["Substring",18],[") ",17],["throws",12],[" -> ",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Matches part of a substring, starting at its beginning.\n\n- Parameter s: The substring to match this regular expression against.\n- Returns: The match, or `nil` if no match was found."},{"p":["Regex","contains(captureNamed:)"],"f":[["func",12],[" ",17],["contains",7],["(",17],["captureNamed",1],[" ",17],["name",2],[": ",17],["String",18,117],[") -> ",17],["Bool",18,147]],"s":[["func",12],[" ",17],["contains",7],["(",17],["captureNamed",1],[": ",17],["String",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"g":[["Output",0,0]],"d":"Returns whether a named-capture with `name` exists"},{"p":["RegexComponent","~=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["~=",7],[" ",17],["(",17],["regex",2],[": ",17],["Self",18],[", ",17],["input",2],[": ",17],["String",18,117],[") -> ",17],["Bool",18,147]],"s":[["static",12],[" ",17],["func",12],[" ",17],["~=",7],[" ",17],["(",17],["Self",18],[", ",17],["String",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["RegexComponent","~=(_:_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["~=",7],[" ",17],["(",17],["regex",2],[": ",17],["Self",18],[", ",17],["input",2],[": ",17],["Substring",18,191],[") -> ",17],["Bool",18,147]],"s":[["static",12],[" ",17],["func",12],[" ",17],["~=",7],[" ",17],["(",17],["Self",18],[", ",17],["Substring",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["BidirectionalCollection","firstRange(of:)"],"f":[["func",12],[" ",17],["firstRange",7],["<",17],["C",0],[">(",17],["of",1],[" ",17],["other",2],[": ",17],["C",18],[") -> ",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">? ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["firstRange",7],["<",17],["C",0],[">(",17],["of",1],[": ",17],["C",18],[") -> ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Comparable",114]],"c":[["C",1,"Collection",154],["Self.Element",1,"Comparable",114],["Self.Element",2,"C.Element"]],"g":[["C",0,1]],"d":"Finds and returns the range of the first occurrence of a given collection\nwithin this collection.\n\n- Parameter other: The collection to search for.\n- Returns: A range in the collection of the first occurrence of `sequence`.\nReturns `nil` if `sequence` is not found."},{"p":["BidirectionalCollection","firstMatch(of:)"],"f":[["func",12],[" ",17],["firstMatch",7],["<",17],["Output",0],[">(",17],["of",1],[" ",17],["r",2],[": some ",17],["RegexComponent",18,0],[") -> ",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["?",17]],"s":[["func",12],[" ",17],["firstMatch",7],["<",17],["Output",0],[">(",17],["of",1],[": some ",17],["RegexComponent",18],[") -> ",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Output",2,"(some RegexComponent).RegexOutput"],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"g":[["Output",0,1]],"d":"Returns the first match of the specified regex within the collection.\n- Parameter regex: The regex to search for.\n- Returns: The first match of `regex` in the collection, or `nil` if\nthere isn't a match."},{"p":["BidirectionalCollection","firstRange(of:)"],"f":[["func",12],[" ",17],["firstRange",7],["(",17],["of",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[") -> ",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">?",17]],"s":[["func",12],[" ",17],["firstRange",7],["(",17],["of",1],[": some ",17],["RegexComponent",18],[") -> ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"d":"Finds and returns the range of the first occurrence of a given regex\nwithin the collection.\n- Parameter regex: The regex to search for.\n- Returns: A range in the collection of the first occurrence of `regex`.\nReturns `nil` if `regex` is not found."},{"p":["BidirectionalCollection","wholeMatch(of:)"],"f":[["func",12],[" ",17],["wholeMatch",7],["<",17],["R",0],[">(",17],["of",1],[" ",17],["r",2],[": ",17],["R",18],[") -> ",17],["Regex",18,8],["<",17],["R",18],[".",17],["RegexOutput",18],[">.",17],["Match",18,9],["? ",17],["where",12],[" ",17],["R",18],[" : ",17],["RegexComponent",18,0]],"s":[["func",12],[" ",17],["wholeMatch",7],["<",17],["R",0],[">(",17],["of",1],[": ",17],["R",18],[") -> ",17],["Regex",18],["<",17],["R",18],[".",17],["RegexOutput",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["R",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"g":[["R",0,1]],"d":"Checks for a match against the string in its entirety.\n\n- Parameter r: The regular expression being matched.\n- Returns: The match, or `nil` if no match was found."},{"p":["BidirectionalCollection","prefixMatch(of:)"],"f":[["func",12],[" ",17],["prefixMatch",7],["<",17],["R",0],[">(",17],["of",1],[" ",17],["r",2],[": ",17],["R",18],[") -> ",17],["Regex",18,8],["<",17],["R",18],[".",17],["RegexOutput",18],[">.",17],["Match",18,9],["? ",17],["where",12],[" ",17],["R",18],[" : ",17],["RegexComponent",18,0]],"s":[["func",12],[" ",17],["prefixMatch",7],["<",17],["R",0],[">(",17],["of",1],[": ",17],["R",18],[") -> ",17],["Regex",18],["<",17],["R",18],[".",17],["RegexOutput",18],[">.",17],["Match",18],["?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["R",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"g":[["R",0,1]],"d":"Checks for a match against the string, starting at its beginning.\n\n- Parameter r: The regular expression being matched.\n- Returns: The match, or `nil` if no match was found."},{"p":["BidirectionalCollection","trimmingPrefix(_:)"],"f":[["func",12],[" ",17],["trimmingPrefix",7],["(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[") -> ",17],["Self",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["trimmingPrefix",7],["(some ",17],["RegexComponent",18],[") -> ",17],["Self",18],[".",17],["SubSequence",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"d":"Returns a new collection of the same type by removing `prefix` from the\nstart.\n- Parameter prefix: The collection to remove from this collection.\n- Returns: A collection containing the elements that does not match\n`prefix` from the start."},{"p":["BidirectionalCollection","split(separator:maxSplits:omittingEmptySubsequences:)"],"f":[["func",12],[" ",17],["split",7],["(",17],["separator",1],[": some ",17],["RegexComponent",18,0],[", ",17],["maxSplits",1],[": ",17],["Int",18,148],[" = .max, ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18,147],[" = true) -> [",17],["Self",18],[".",17],["SubSequence",18],["]",17]],"s":[["func",12],[" ",17],["split",7],["(",17],["separator",1],[": some ",17],["RegexComponent",18],[", ",17],["maxSplits",1],[": ",17],["Int",18],[", ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18],[") -> [",17],["Self",18],[".",17],["SubSequence",18],["]",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"d":"Returns the longest possible subsequences of the collection, in order,\naround elements equal to the given separator.\n\n- Parameter separator: A regex describing elements to be split upon.\n- Returns: A collection of substrings, split from this collection's\n  elements."},{"p":["BidirectionalCollection","ranges(of:)"],"f":[["func",12],[" ",17],["ranges",7],["(",17],["of",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[") -> [",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">]",17]],"s":[["func",12],[" ",17],["ranges",7],["(",17],["of",1],[": some ",17],["RegexComponent",18],[") -> [",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">]",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"d":"Finds and returns the ranges of the all occurrences of a given sequence\nwithin the collection.\n\n- Parameter regex: The regex to search for.\n- Returns: A collection or ranges in the receiver of all occurrences of\n`regex`. Returns an empty collection if `regex` is not found."},{"p":["BidirectionalCollection","starts(with:)"],"f":[["func",12],[" ",17],["starts",7],["(",17],["with",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[") -> ",17],["Bool",18,147]],"s":[["func",12],[" ",17],["starts",7],["(",17],["with",1],[": some ",17],["RegexComponent",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"d":"Returns a Boolean value indicating whether the initial elements of the\nsequence are the same as the elements in the specified regex.\n\n- Parameter regex: A regex to compare to this sequence.\n- Returns: `true` if the initial elements of the sequence matches the\n  beginning of `regex`; otherwise, `false`."},{"p":["BidirectionalCollection","matches(of:)"],"f":[["func",12],[" ",17],["matches",7],["<",17],["Output",0],[">(",17],["of",1],[" ",17],["r",2],[": some ",17],["RegexComponent",18,0],[") -> [",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],["]",17]],"s":[["func",12],[" ",17],["matches",7],["<",17],["Output",0],[">(",17],["of",1],[": some ",17],["RegexComponent",18],[") -> [",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],["]",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Output",2,"(some RegexComponent).RegexOutput"],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"g":[["Output",0,1]],"d":"Returns a collection containing all matches of the specified regex.\n- Parameter regex: The regex to search for.\n- Returns: A collection of matches of `regex`."},{"p":["BidirectionalCollection","contains(_:)"],"f":[["func",12],[" ",17],["contains",7],["(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[") -> ",17],["Bool",18,147]],"s":[["func",12],[" ",17],["contains",7],["(some ",17],["RegexComponent",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"d":"Returns a Boolean value indicating whether the collection contains the\ngiven regex.\n- Parameter regex: A regex to search for within this collection.\n- Returns: `true` if the regex was found in the collection, otherwise\n`false`."},{"p":["Collection","trimPrefix(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimPrefix",7],["<",17],["Prefix",0],[">(",17],["_",1],[" ",17],["prefix",2],[": ",17],["Prefix",18],[") ",17],["where",12],[" ",17],["Prefix",18],[" : ",17],["Sequence",18,119],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["Prefix",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["trimPrefix",7],["<",17],["Prefix",0],[">(",17],["Prefix",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self",2,"Self.SubSequence"],["Self.Element",1,"Equatable",115]],"c":[["Self",2,"Self.SubSequence"],["Prefix",1,"Sequence",119],["Self.Element",1,"Equatable",115],["Self.Element",2,"Prefix.Element"]],"g":[["Prefix",0,1]],"d":"Removes the initial elements that satisfy the given predicate from the\nstart of the sequence.\n- Parameter predicate: A closure that takes an element of the sequence\nas its argument and returns a Boolean value indicating whether the\nelement should be removed from the collection."},{"p":["Collection","trimPrefix(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,147],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self",2,"Self.SubSequence"]],"c":[["Self",2,"Self.SubSequence"]]},{"p":["Collection","trimmingPrefix(while:)"],"f":[["func",12],[" ",17],["trimmingPrefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,147],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"s":[["func",12],[" ",17],["trimmingPrefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[".",17],["SubSequence",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["Collection","firstRange(of:)"],"f":[["func",12],[" ",17],["firstRange",7],["<",17],["C",0],[">(",17],["of",1],[" ",17],["other",2],[": ",17],["C",18],[") -> ",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">? ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["firstRange",7],["<",17],["C",0],[">(",17],["of",1],[": ",17],["C",18],[") -> ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">?",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["Self.Element",1,"Equatable",115],["Self.Element",2,"C.Element"]],"g":[["C",0,1]],"d":"Finds and returns the range of the first occurrence of a given collection\nwithin this collection.\n\n- Parameter other: The collection to search for.\n- Returns: A range in the collection of the first occurrence of `sequence`.\nReturns nil if `sequence` is not found."},{"p":["Collection","trimmingPrefix(_:)"],"f":[["func",12],[" ",17],["trimmingPrefix",7],["<",17],["Prefix",0],[">(",17],["_",1],[" ",17],["prefix",2],[": ",17],["Prefix",18],[") -> ",17],["Self",18],[".",17],["SubSequence",18],[" ",17],["where",12],[" ",17],["Prefix",18],[" : ",17],["Sequence",18,119],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["Prefix",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["trimmingPrefix",7],["<",17],["Prefix",0],[">(",17],["Prefix",18],[") -> ",17],["Self",18],[".",17],["SubSequence",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["Prefix",1,"Sequence",119],["Self.Element",1,"Equatable",115],["Self.Element",2,"Prefix.Element"]],"g":[["Prefix",0,1]],"d":"Returns a new collection of the same type by removing initial elements\nthat satisfy the given predicate from the start.\n- Parameter predicate: A closure that takes an element of the sequence\nas its argument and returns a Boolean value indicating whether the\nelement should be removed from the collection.\n- Returns: A collection containing the elements of the collection that are\n not removed by `predicate`."},{"p":["Collection","split(separator:maxSplits:omittingEmptySubsequences:)"],"f":[["func",12],[" ",17],["split",7],["<",17],["C",0],[">(",17],["separator",1],[": ",17],["C",18],[", ",17],["maxSplits",1],[": ",17],["Int",18,148],[" = .max, ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18,147],[" = true) -> [",17],["Self",18],[".",17],["SubSequence",18],["] ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["split",7],["<",17],["C",0],[">(",17],["separator",1],[": ",17],["C",18],[", ",17],["maxSplits",1],[": ",17],["Int",18],[", ",17],["omittingEmptySubsequences",1],[": ",17],["Bool",18],[") -> [",17],["Self",18],[".",17],["SubSequence",18],["]",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["Self.Element",1,"Equatable",115],["Self.Element",2,"C.Element"]],"g":[["C",0,1]],"d":"Returns the longest possible subsequences of the collection, in order,\naround elements equal to the given separator.\n\n- Parameter separator: The element to be split upon.\n- Returns: A collection of subsequences, split from this collection's\n  elements."},{"p":["Collection","ranges(of:)"],"f":[["func",12],[" ",17],["ranges",7],["<",17],["C",0],[">(",17],["of",1],[" ",17],["other",2],[": ",17],["C",18],[") -> [",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">] ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["ranges",7],["<",17],["C",0],[">(",17],["of",1],[": ",17],["C",18],[") -> [",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">]",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["Self.Element",1,"Equatable",115],["Self.Element",2,"C.Element"]],"g":[["C",0,1]],"d":"Finds and returns the ranges of the all occurrences of a given sequence\nwithin the collection.\n- Parameter other: The sequence to search for.\n- Returns: A collection of ranges of all occurrences of `other`. Returns\n an empty collection if `other` is not found."},{"p":["Collection","contains(_:)"],"f":[["func",12],[" ",17],["contains",7],["<",17],["C",0],[">(",17],["_",1],[" ",17],["other",2],[": ",17],["C",18],[") -> ",17],["Bool",18,147],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["contains",7],["<",17],["C",0],[">(",17],["C",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["Self.Element",1,"Equatable",115],["Self.Element",2,"C.Element"]],"g":[["C",0,1]],"d":"Returns a Boolean value indicating whether the collection contains the\ngiven sequence.\n- Parameter other: A sequence to search for within this collection.\n- Returns: `true` if the collection contains the specified sequence,\notherwise `false`."},{"p":["RangeReplaceableCollection","trimPrefix(while:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[" ",17],["predicate",2],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18,147],[") ",17],["rethrows",12]],"s":[["func",12],[" ",17],["trimPrefix",7],["(",17],["while",1],[": (",17],["Self",18],[".",17],["Element",18],[") ",17],["throws",12],[" -> ",17],["Bool",18],[") ",17],["rethrows",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["RangeReplaceableCollection","trimPrefix(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimPrefix",7],["(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[")",17]],"s":[["func",12],[" ",17],["trimPrefix",7],["(some ",17],["RegexComponent",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self",1,"BidirectionalCollection",102],["Self.SubSequence",2,"Substring",191]],"c":[["Self",1,"BidirectionalCollection",102],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191]],"d":"Removes the initial elements that matches the given regex.\n- Parameter regex: The regex to remove from this collection."},{"p":["RangeReplaceableCollection","trimPrefix(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["trimPrefix",7],["<",17],["Prefix",0],[">(",17],["_",1],[" ",17],["prefix",2],[": ",17],["Prefix",18],[") ",17],["where",12],[" ",17],["Prefix",18],[" : ",17],["Sequence",18,119],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["Prefix",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["trimPrefix",7],["<",17],["Prefix",0],[">(",17],["Prefix",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["Prefix",1,"Sequence",119],["Self.Element",1,"Equatable",115],["Self.Element",2,"Prefix.Element"]],"g":[["Prefix",0,1]],"d":"Removes the initial elements that satisfy the given predicate from the\nstart of the sequence.\n- Parameter predicate: A closure that takes an element of the sequence\nas its argument and returns a Boolean value indicating whether the\nelement should be removed from the collection."},{"p":["RangeReplaceableCollection","replace(_:with:maxReplacements:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replace",7],["<",17],["C",0],[", ",17],["Replacement",0],[">(",17],["_",1],[" ",17],["other",2],[": ",17],["C",18],[", ",17],["with",1],[" ",17],["replacement",2],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max) ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[".",17],["Element",18],[" == ",17],["Replacement",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["replace",7],["<",17],["C",0],[", ",17],["Replacement",0],[">(",17],["C",18],[", ",17],["with",1],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["C",1,"Collection",154],["Replacement",1,"Collection",154],["Self.Element",1,"Equatable",115],["Self.Element",2,"C.Element"],["C.Element",2,"Replacement.Element"]],"g":[["C",0,1],["Replacement",1,1]],"d":"Replaces all occurrences of a target sequence with a given collection\n- Parameters:\n  - other: The sequence to replace.\n  - replacement: The new elements to add to the collection.\n  - maxReplacements: A number specifying how many occurrences of `other`\n  to replace. Default is `Int.max`."},{"p":["RangeReplaceableCollection","replacing(_:with:maxReplacements:)"],"f":[["func",12],[" ",17],["replacing",7],["<",17],["C",0],[", ",17],["Replacement",0],[">(",17],["_",1],[" ",17],["other",2],[": ",17],["C",18],[", ",17],["with",1],[" ",17],["replacement",2],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max) -> ",17],["Self",18],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[".",17],["Element",18],[" == ",17],["Replacement",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["replacing",7],["<",17],["C",0],[", ",17],["Replacement",0],[">(",17],["C",18],[", ",17],["with",1],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18],[") -> ",17],["Self",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["C",1,"Collection",154],["Replacement",1,"Collection",154],["Self.Element",1,"Equatable",115],["Self.Element",2,"C.Element"],["C.Element",2,"Replacement.Element"]],"g":[["C",0,1],["Replacement",1,1]],"d":"Returns a new collection in which all occurrences of a target sequence\nare replaced by another collection.\n- Parameters:\n  - other: The sequence to replace.\n  - replacement: The new elements to add to the collection.\n  - maxReplacements: A number specifying how many occurrences of `other`\n  to replace. Default is `Int.max`.\n- Returns: A new collection in which all occurrences of `other` in\n`subrange` of the collection are replaced by `replacement`."},{"p":["RangeReplaceableCollection","replacing(_:with:subrange:maxReplacements:)"],"f":[["func",12],[" ",17],["replacing",7],["<",17],["C",0],[", ",17],["Replacement",0],[">(",17],["_",1],[" ",17],["other",2],[": ",17],["C",18],[", ",17],["with",1],[" ",17],["replacement",2],[": ",17],["Replacement",18],[", ",17],["subrange",1],[": ",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max) -> ",17],["Self",18],[" ",17],["where",12],[" ",17],["C",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Self",18],[".",17],["Element",18],[" == ",17],["C",18],[".",17],["Element",18],[", ",17],["C",18],[".",17],["Element",18],[" == ",17],["Replacement",18],[".",17],["Element",18]],"s":[["func",12],[" ",17],["replacing",7],["<",17],["C",0],[", ",17],["Replacement",0],[">(",17],["C",18],[", ",17],["with",1],[": ",17],["Replacement",18],[", ",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["maxReplacements",1],[": ",17],["Int",18],[") -> ",17],["Self",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.Element",1,"Equatable",115]],"c":[["C",1,"Collection",154],["Replacement",1,"Collection",154],["Self.Element",1,"Equatable",115],["Self.Element",2,"C.Element"],["C.Element",2,"Replacement.Element"]],"g":[["C",0,1],["Replacement",1,1]],"d":"Returns a new collection in which all occurrences of a target sequence\nare replaced by another collection.\n- Parameters:\n  - other: The sequence to replace.\n  - replacement: The new elements to add to the collection.\n  - subrange: The range in the collection in which to search for `other`.\n  - maxReplacements: A number specifying how many occurrences of `other`\n  to replace. Default is `Int.max`.\n- Returns: A new collection in which all occurrences of `other` in\n`subrange` of the collection are replaced by `replacement`."},{"p":["RangeReplaceableCollection","replace(_:maxReplacements:with:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replace",7],["<",17],["Output",0],[", ",17],["Replacement",0],[">(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[", ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max, ",17],["with",1],[" ",17],["replacement",2],[": (",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],[") ",17],["throws",12],[" -> ",17],["Replacement",18],[") ",17],["rethrows",12],[" ",17],["where",12],[" ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[".",17],["Element",18],[" == ",17],["Character",18,101]],"s":[["func",12],[" ",17],["replace",7],["<",17],["Output",0],[", ",17],["Replacement",0],[">(some ",17],["RegexComponent",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18],[", ",17],["with",1],[": (",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],[") ",17],["throws",12],[" -> ",17],["Replacement",18],[") ",17],["rethrows",12]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Output",2,"(some RegexComponent).RegexOutput"],["Replacement",1,"Collection",154],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191],["Replacement.Element",2,"Character",101]],"g":[["Output",0,1],["Replacement",1,1]],"d":"Replaces all occurrences of the sequence matching the given regex with\na given collection.\n- Parameters:\n  - regex: A regex describing the sequence to replace.\n  - maxReplacements: A number specifying how many occurrences of the\n  sequence matching `regex` to replace. Default is `Int.max`.\n  - replacement: A closure that receives the full match information,\n  including captures, and returns a replacement collection."},{"p":["RangeReplaceableCollection","replace(_:with:maxReplacements:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["replace",7],["<",17],["Replacement",0],[">(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[", ",17],["with",1],[" ",17],["replacement",2],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max) ",17],["where",12],[" ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[".",17],["Element",18],[" == ",17],["Character",18,101]],"s":[["func",12],[" ",17],["replace",7],["<",17],["Replacement",0],[">(some ",17],["RegexComponent",18],[", ",17],["with",1],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18],[")",17]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Replacement",1,"Collection",154],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191],["Replacement.Element",2,"Character",101]],"g":[["Replacement",0,1]],"d":"Replaces all occurrences of the sequence matching the given regex with\na given collection.\n- Parameters:\n  - regex: A regex describing the sequence to replace.\n  - replacement: The new elements to add to the collection.\n  - maxReplacements: A number specifying how many occurrences of the\n  sequence matching `regex` to replace. Default is `Int.max`."},{"p":["RangeReplaceableCollection","replacing(_:maxReplacements:with:)"],"f":[["func",12],[" ",17],["replacing",7],["<",17],["Output",0],[", ",17],["Replacement",0],[">(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[", ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max, ",17],["with",1],[" ",17],["replacement",2],[": (",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],[") ",17],["throws",12],[" -> ",17],["Replacement",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[" ",17],["where",12],[" ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[".",17],["Element",18],[" == ",17],["Character",18,101]],"s":[["func",12],[" ",17],["replacing",7],["<",17],["Output",0],[", ",17],["Replacement",0],[">(some ",17],["RegexComponent",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18],[", ",17],["with",1],[": (",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],[") ",17],["throws",12],[" -> ",17],["Replacement",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Output",2,"(some RegexComponent).RegexOutput"],["Replacement",1,"Collection",154],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191],["Replacement.Element",2,"Character",101]],"g":[["Output",0,1],["Replacement",1,1]],"d":"Returns a new collection in which all occurrences of a sequence matching\nthe given regex are replaced by another collection.\n- Parameters:\n  - regex: A regex describing the sequence to replace.\n  - maxReplacements: A number specifying how many occurrences of the\n  sequence matching `regex` to replace. Default is `Int.max`.\n  - replacement: A closure that receives the full match information,\n  including captures, and returns a replacement collection.\n- Returns: A new collection in which all occurrences of subsequence\nmatching `regex` are replaced by `replacement`."},{"p":["RangeReplaceableCollection","replacing(_:with:maxReplacements:)"],"f":[["func",12],[" ",17],["replacing",7],["<",17],["Replacement",0],[">(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[", ",17],["with",1],[" ",17],["replacement",2],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max) -> ",17],["Self",18],[" ",17],["where",12],[" ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[".",17],["Element",18],[" == ",17],["Character",18,101]],"s":[["func",12],[" ",17],["replacing",7],["<",17],["Replacement",0],[">(some ",17],["RegexComponent",18],[", ",17],["with",1],[": ",17],["Replacement",18],[", ",17],["maxReplacements",1],[": ",17],["Int",18],[") -> ",17],["Self",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Replacement",1,"Collection",154],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191],["Replacement.Element",2,"Character",101]],"g":[["Replacement",0,1]],"d":"Returns a new collection in which all occurrences of a sequence matching\nthe given regex are replaced by another collection.\n- Parameters:\n  - regex: A regex describing the sequence to replace.\n  - replacement: The new elements to add to the collection.\n  - maxReplacements: A number specifying how many occurrences of the\n  sequence matching `regex` to replace. Default is `Int.max`.\n- Returns: A new collection in which all occurrences of subsequence\nmatching `regex` are replaced by `replacement`."},{"p":["RangeReplaceableCollection","replacing(_:with:subrange:maxReplacements:)"],"f":[["func",12],[" ",17],["replacing",7],["<",17],["Replacement",0],[">(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[", ",17],["with",1],[" ",17],["replacement",2],[": ",17],["Replacement",18],[", ",17],["subrange",1],[": ",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max) -> ",17],["Self",18],[" ",17],["where",12],[" ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[".",17],["Element",18],[" == ",17],["Character",18,101]],"s":[["func",12],[" ",17],["replacing",7],["<",17],["Replacement",0],[">(some ",17],["RegexComponent",18],[", ",17],["with",1],[": ",17],["Replacement",18],[", ",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["maxReplacements",1],[": ",17],["Int",18],[") -> ",17],["Self",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Replacement",1,"Collection",154],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191],["Replacement.Element",2,"Character",101]],"g":[["Replacement",0,1]],"d":"Returns a new collection in which all occurrences of a sequence matching\nthe given regex are replaced by another collection.\n- Parameters:\n  - regex: A regex describing the sequence to replace.\n  - replacement: The new elements to add to the collection.\n  - subrange: The range in the collection in which to search for `regex`.\n  - maxReplacements: A number specifying how many occurrences of the\n  sequence matching `regex` to replace. Default is `Int.max`.\n- Returns: A new collection in which all occurrences of subsequence\nmatching `regex` in `subrange` are replaced by `replacement`."},{"p":["RangeReplaceableCollection","replacing(_:subrange:maxReplacements:with:)"],"f":[["func",12],[" ",17],["replacing",7],["<",17],["Output",0],[", ",17],["Replacement",0],[">(",17],["_",1],[" ",17],["regex",2],[": some ",17],["RegexComponent",18,0],[", ",17],["subrange",1],[": ",17],["Range",18,190],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["maxReplacements",1],[": ",17],["Int",18,148],[" = .max, ",17],["with",1],[" ",17],["replacement",2],[": (",17],["Regex",18,8],["<",17],["Output",18],[">.",17],["Match",18,9],[") ",17],["throws",12],[" -> ",17],["Replacement",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18],[" ",17],["where",12],[" ",17],["Replacement",18],[" : ",17],["Collection",18,154],[", ",17],["Replacement",18],[".",17],["Element",18],[" == ",17],["Character",18,101]],"s":[["func",12],[" ",17],["replacing",7],["<",17],["Output",0],[", ",17],["Replacement",0],[">(some ",17],["RegexComponent",18],[", ",17],["subrange",1],[": ",17],["Range",18],["<",17],["Self",18],[".",17],["Index",18],[">, ",17],["maxReplacements",1],[": ",17],["Int",18],[", ",17],["with",1],[": (",17],["Regex",18],["<",17],["Output",18],[">.",17],["Match",18],[") ",17],["throws",12],[" -> ",17],["Replacement",18],[") ",17],["rethrows",12],[" -> ",17],["Self",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}},"e":[["Self.SubSequence",2,"Substring",191]],"c":[["Output",2,"(some RegexComponent).RegexOutput"],["Replacement",1,"Collection",154],["some RegexComponent",1,"RegexComponent",0],["Self.SubSequence",2,"Substring",191],["Replacement.Element",2,"Character",101]],"g":[["Output",0,1],["Replacement",1,1]],"d":"Returns a new collection in which all occurrences of a sequence matching\nthe given regex are replaced by another regex match.\n- Parameters:\n  - regex: A regex describing the sequence to replace.\n  - subrange: The range in the collection in which to search for `regex`.\n  - maxReplacements: A number specifying how many occurrences of the\n  sequence matching `regex` to replace. Default is `Int.max`.\n  - replacement: A closure that receives the full match information,\n  including captures, and returns a replacement collection.\n- Returns: A new collection in which all occurrences of subsequence\nmatching `regex` are replaced by `replacement`."},{"p":["StringProtocol","contains(_:)"],"f":[["func",12],[" ",17],["contains",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["String",18,117],[") -> ",17],["Bool",18,147]],"s":[["func",12],[" ",17],["contains",7],["(",17],["String",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}},{"p":["StringProtocol","contains(_:)"],"f":[["func",12],[" ",17],["contains",7],["(",17],["_",1],[" ",17],["other",2],[": ",17],["Substring",18,191],[") -> ",17],["Bool",18,147]],"s":[["func",12],[" ",17],["contains",7],["(",17],["Substring",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"9999"},"macOS":{"i":"9999"},"tvOS":{"i":"9999"},"watchOS":{"i":"9999"}}}],"edges":{"conformer":[1,0,[],3,102,[],3,119,[],3,149,[],3,154,[],5,100,[],5,115,[],6,100,[],6,115,[],7,100,[],7,115,[],8,0,[]],"feature":[47,8,48,8,49,8,50,8,51,8,52,8,53,8,54,8,55,8,56,8,65,8,66,8,80,3,103,3,104,3,106,3,107,3,108,3,109,3,110,3,111,3,112,3,113,3,116,5,116,6,116,7,120,3,121,3,122,3,124,3,125,3,126,3,127,3,128,3,129,3,130,3,131,3,132,3,133,3,134,3,135,3,136,3,137,3,138,3,139,3,140,3,141,3,142,3,143,3,144,3,145,3,146,3,153,3,156,3,157,3,158,3,159,3,160,3,161,3,162,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3],"member":[4,3,9,8,10,3,11,9,12,8,13,8,14,8,15,8,16,8,17,8,18,3,19,3,20,9,21,9,22,9,23,9,24,5,25,5,26,6,27,6,28,7,29,7,30,7,31,3,32,3,33,4,34,4,35,4,36,4,37,4,38,3,41,9,42,9,43,8,44,3,45,3,46,3,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,58,8,59,8,60,8,61,8,62,8,63,8,64,8,65,0,66,0,67,102,68,102,69,102,70,102,71,102,72,102,73,102,74,102,75,102,76,102,77,102,78,154,79,154,80,154,81,154,82,154,83,154,84,154,85,154,86,189,87,189,88,189,89,189,90,189,91,189,92,189,93,189,94,189,95,189,96,189,97,189,98,192,99,192],"requirement":[2,0,39,0,57,1],"defaultImplementation":[40,39]},"sourcemap":[]}