{"culture":"Distributed","dependencies":[{"package":"swift-standard-library","modules":["Swift","_Concurrency"]}],"extensions":[],"partitions":[{"namespace":"Distributed","communities":[{"community":"protocol","startIndex":0,"endIndex":6},{"community":"associatedtype","startIndex":6,"endIndex":16},{"community":"enum","startIndex":16,"endIndex":17},{"community":"struct","startIndex":17,"endIndex":25},{"community":"class","startIndex":25,"endIndex":27},{"community":"enum.case","startIndex":27,"endIndex":33},{"community":"init","startIndex":33,"endIndex":44},{"community":"property","startIndex":44,"endIndex":58},{"community":"type.method","startIndex":58,"endIndex":60},{"community":"method","startIndex":60,"endIndex":98},{"community":"type.op","startIndex":98,"endIndex":99},{"community":"typealias","startIndex":99,"endIndex":108}]},{"namespace":"Swift","communities":[{"community":"type.property","startIndex":108,"endIndex":109}]}],"identifiers":["s11Distributed0A11ActorSystemP","s11Distributed0A16ActorSystemErrorP","s11Distributed0A23TargetInvocationDecoderP","s11Distributed0A23TargetInvocationEncoderP","s11Distributed0A29TargetInvocationResultHandlerP","s11Distributed0A5ActorP","s11Distributed0A11ActorSystemP0B2IDQa","s11Distributed0A11ActorSystemP13ResultHandlerQa","s11Distributed0A11ActorSystemP17InvocationDecoderQa","s11Distributed0A11ActorSystemP17InvocationEncoderQa","s11Distributed0A11ActorSystemP24SerializationRequirementQa","s11Distributed0A23TargetInvocationDecoderP24SerializationRequirementQa","s11Distributed0A23TargetInvocationEncoderP24SerializationRequirementQa","s11Distributed0A29TargetInvocationResultHandlerP24SerializationRequirementQa","s11Distributed0A5ActorP0B6SystemQa","s11Distributed0A5ActorP24SerializationRequirementQa","s11Distributed07ExecuteA11TargetErrorV0D4CodeO","s11Distributed012LocalTestingA16ActorSystemErrorV","s11Distributed07ExecuteA11TargetErrorV","s11Distributed0A16ActorCodingErrorV","s11Distributed16RemoteCallTargetV","s11Distributed18RemoteCallArgumentV","s11Distributed19LocalTestingActorIDV","s11Distributed29LocalTestingInvocationEncoderV","s11Distributed35LocalTestingInvocationResultHandlerV","s11Distributed012LocalTestingA11ActorSystemC","s11Distributed29LocalTestingInvocationDecoderC","s11Distributed07ExecuteA11TargetErrorV0D4CodeO21invalidParameterCountyA2EmF","s11Distributed07ExecuteA11TargetErrorV0D4CodeO22targetAccessorNotFoundyA2EmF","s11Distributed07ExecuteA11TargetErrorV0D4CodeO26typeDeserializationFailureyA2EmF","s11Distributed07ExecuteA11TargetErrorV0D4CodeO27invalidGenericSubstitutionsyA2EmF","s11Distributed07ExecuteA11TargetErrorV0D4CodeO27missingGenericSubstitutionsyA2EmF","s11Distributed07ExecuteA11TargetErrorV0D4CodeO5otheryA2EmF","s11Distributed012LocalTestingA11ActorSystemCACycfc","s11Distributed012LocalTestingA16ActorSystemErrorV7messageACSS_tcfc","s11Distributed07ExecuteA11TargetErrorV7message9errorCodeACSS_AC0dG0Otcfc","s11Distributed07ExecuteA11TargetErrorV7messageACSS_tcfc","s11Distributed0A16ActorCodingErrorV7messageACSS_tcfc","s11Distributed0A5ActorPAASe2IDRpzrlE4fromxs7Decoder_p_tKcfc","s11Distributed16RemoteCallTargetVyACSScfc","s11Distributed18RemoteCallArgumentV5label4name5valueACyxGSSSg_SSxtcfc","s11Distributed19LocalTestingActorIDV2idACSS_tcfc","s11Distributed19LocalTestingActorIDV4fromACs7Decoder_p_tKcfc","s11Distributed19LocalTestingActorIDV5parseACSS_tcfc","s11Distributed012LocalTestingA16ActorSystemErrorV7messageSSvp","s11Distributed07ExecuteA11TargetErrorV7messageSSvp","s11Distributed07ExecuteA11TargetErrorV9errorCodeAC0dF0Ovp","s11Distributed0A16ActorCodingErrorV7messageSSvp","s11Distributed0A5ActorP11actorSystem0bD0Qzvp","s11Distributed0A5ActorP2id2IDQzvp","s11Distributed16RemoteCallTargetV10identifierSSvp","s11Distributed16RemoteCallTargetV11descriptionSSvp","s11Distributed18RemoteCallArgumentV14effectiveLabelSSvp","s11Distributed18RemoteCallArgumentV4nameSSvp","s11Distributed18RemoteCallArgumentV5labelSSSgvp","s11Distributed18RemoteCallArgumentV5valuexvp","s11Distributed19LocalTestingActorIDV2idSSvp","s11Distributed19LocalTestingActorIDV7addressSSvp","s11Distributed0A16ActorCodingErrorV07missingB14SystemUserInfoyACxmAA0aB0RzlFZ","s11Distributed0A5ActorP7resolve2id5usingx2IDQz_0B6SystemQztKFZ","s11Distributed012LocalTestingA11ActorSystemC10actorReadyyyxAA0aD0RzAA0bcD2IDV0H0RtzlF","s11Distributed012LocalTestingA11ActorSystemC10remoteCall2on6target10invocation8throwing9returningq0_x_AA06RemoteG6TargetVAA0bC17InvocationEncoderVzq_mq0_mtYaKAA0aD0Rzs5ErrorR_SeR0_SER0_AA0bcD2IDV0R0Rtzr1_lF","s11Distributed012LocalTestingA11ActorSystemC14remoteCallVoid2on6target10invocation8throwingyx_AA06RemoteG6TargetVAA0bC17InvocationEncoderVzq_mtYaKAA0aD0Rzs5ErrorR_AA0bcD2IDV0R0Rtzr0_lF","s11Distributed012LocalTestingA11ActorSystemC21makeInvocationEncoderAA0bcgH0VyF","s11Distributed012LocalTestingA11ActorSystemC7resolve2id2asxSgAA0bcD2IDV_xmtKAA0aD0RzAI0I0RtzlF","s11Distributed012LocalTestingA11ActorSystemC8assignIDyAA0bcdG0VxmAA0aD0RzAF0G0RtzlF","s11Distributed012LocalTestingA11ActorSystemC8resignIDyyAA0bcdG0VF","s11Distributed0A11ActorSystemP10actorReadyyyqd__AA0aB0Rd__2IDQyd__0bF0RtzlF","s11Distributed0A11ActorSystemP21invokeHandlerOnReturn7handler12resultBuffer8metatypey06ResultE0Qz_SVypXptYaKF","s11Distributed0A11ActorSystemP21makeInvocationEncoder0eF0QzyF","s11Distributed0A11ActorSystemP7resolve2id2asqd__Sg0B2IDQz_qd__mtKAA0aB0Rd__0G0Qyd__AIRSlF","s11Distributed0A11ActorSystemP8assignIDy0bE0Qzqd__mAA0aB0Rd__0E0Qyd__AFRSlF","s11Distributed0A11ActorSystemP8resignIDyy0bE0QzF","s11Distributed0A11ActorSystemPAAE07executeA6Target2on6target17invocationDecoder7handleryqd___AA010RemoteCallE0V010InvocationI0Qzz13ResultHandlerQztYaKAA0aB0Rd__lF","s11Distributed0A23TargetInvocationDecoderP15decodeErrorTypeypXpSgyKF","s11Distributed0A23TargetInvocationDecoderP16decodeReturnTypeypXpSgyKF","s11Distributed0A23TargetInvocationDecoderP26decodeGenericSubstitutionsSayypXpGyKF","s11Distributed0A23TargetInvocationEncoderP13doneRecordingyyKF","s11Distributed0A23TargetInvocationEncoderP15recordErrorTypeyyqd__mKs0F0Rd__lF","s11Distributed0A23TargetInvocationEncoderP25recordGenericSubstitutionyyqd__mKlF","s11Distributed0A29TargetInvocationResultHandlerP12onReturnVoidyyYaKF","s11Distributed0A29TargetInvocationResultHandlerP7onThrow5erroryqd___tYaKs5ErrorRd__lF","s11Distributed0A5ActorPAAE4hash4intoys6HasherVz_tF","s11Distributed0A5ActorPAAE9whenLocalyqd__Sgqd__xYiYaYbKXEYaKs8SendableRd__lF","s11Distributed0A5ActorPAASE2IDRpzrlE6encode2toys7Encoder_p_tKF","s11Distributed19LocalTestingActorIDV6encode2toys7Encoder_p_tKF","s11Distributed29LocalTestingInvocationDecoderC15decodeErrorTypeypXpSgyKF","s11Distributed29LocalTestingInvocationDecoderC16decodeReturnTypeypXpSgyKF","s11Distributed29LocalTestingInvocationDecoderC18decodeNextArgumentxyKSeRzSERzlF","s11Distributed29LocalTestingInvocationDecoderC26decodeGenericSubstitutionsSayypXpGyKF","s11Distributed29LocalTestingInvocationEncoderV13doneRecordingyyKF","s11Distributed29LocalTestingInvocationEncoderV14recordArgumentyyAA010RemoteCallG0VyxGKSeRzSERzlF","s11Distributed29LocalTestingInvocationEncoderV15recordErrorTypeyyxmKs0G0RzlF","s11Distributed29LocalTestingInvocationEncoderV16recordReturnTypeyyxmKSeRzSERzlF","s11Distributed29LocalTestingInvocationEncoderV25recordGenericSubstitutionyyxmKlF","s11Distributed35LocalTestingInvocationResultHandlerV12onReturnVoidyyYaKF","s11Distributed35LocalTestingInvocationResultHandlerV7onThrow5erroryx_tYaKs5ErrorRzlF","s11Distributed35LocalTestingInvocationResultHandlerV8onReturn5valueyx_tYaKSeRzSERzlF","s11Distributed0A5ActorPAAE2eeoiySbx_xtFZ","s11Distributed012LocalTestingA11ActorSystemC0D2IDa","s11Distributed012LocalTestingA11ActorSystemC13ResultHandlera","s11Distributed012LocalTestingA11ActorSystemC17InvocationDecodera","s11Distributed012LocalTestingA11ActorSystemC17InvocationEncodera","s11Distributed012LocalTestingA11ActorSystemC24SerializationRequirementa","s11Distributed24LocalTestingActorAddressa","s11Distributed29LocalTestingInvocationDecoderC24SerializationRequirementa","s11Distributed29LocalTestingInvocationEncoderV24SerializationRequirementa","s11Distributed35LocalTestingInvocationResultHandlerV24SerializationRequirementa","ss17CodingUserInfoKeyV11DistributedE011actorSystemD0ABvpZ","s12_Concurrency8AnyActorP","sSE","sSE6encode2toys7Encoder_p_tKF","sSH","sSH4hash4intoys6HasherVz_tF","sSQ","sSQsE2neoiySbx_xtFZ","sSS","sSV","sSb","sSe","sSe4fromxs7Decoder_p_tKcfc","ss12IdentifiableP","ss12IdentifiableP2id2IDQzvp","ss17CodingUserInfoKeyV","ss23CustomStringConvertibleP","ss23CustomStringConvertibleP11descriptionSSvp","ss5ErrorP","ss6HasherV","ss7Codablea","ss7DecoderP","ss7EncoderP","ss8SendableP"],"vertices":[{"p":["DistributedActorSystem"],"f":[["protocol",12],[" ",17],["DistributedActorSystem",7],[" : ",17],["Sendable",18,131]],"s":[["protocol",12],[" ",17],["DistributedActorSystem",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"A distributed actor system underpins and implements all functionality of distributed actors.\n\nA ``DistributedActor`` is always initialized in association with some concrete actor system.\nThat actor system instance is then used to manage the identity of the actor, as well as\nhandle all remote interactions of the distributed actor.\n\n## Using a DistributedActorSystem library\n\nFrom a library user's perspective (e.g. someone using a `ClusterSystem` or `SampleWebSocketActorSystem`),\nthe basic use of a distributed actor system is fairly opaque.\n\nAny distributed actor must declare what actor system it is able to operate with. This is done either by a\n`typealias ActorSystem` in the body of such `distributed actor` declaration, or a module-wide global\n`typealias DefaultDistributedActorSystem`. Refer to the ``DistributedActor`` documentation to learn more\nabout the tradeoffs of these approaches.\n\nOnce an actor has declared the system it is able to work with, an instance of the system must be provided\nat initialization time, in order for the system to be able to take over the actor's identity management.\n\nFor example, a simple distributed actor may look like this:\n\n```swift\ndistributed actor Greeter {\n  init(name: String, actorSystem: ActorSystem) {\n    self.name = name\n    self.actorSystem = actorSystem // required (!) initialization of implicit actorSystem property\n  }\n}\n```\nNotice that every distributed actor initializer must initialize the synthesized ``DistributedActor/actorSystem``.\nThis property is later used for identity management and other remote interactions of the actor.\nFor more details refer to ``DistributedActor`` which explains more about declaring distributed actors.\n\nFor more details about how the specific actor system implementation deals with remote message transports\nand serialization, please refer to the specific system's documentation.\n\n> Note: For example, you may refer to the [Swift Distributed Actors cluster library](https://github.com/apple/swift-distributed-actors/) documentation,\n> which is one example of such feature complete distributed actor system implementation.\n\n## Implementing a DistributedActorSystem\n\nThis section is dedicated to distributed actor system library authors, and generally can be skipped over\nby library users, as it explains the interactions of synthesized code and specific distributed actor system methods\nand how they must be implemented.\n\nMethods discussed in this section are generally not intended to be called directly, but instead will have calls\ngenerated to them from distributed actor declarations in appropriate places (such as initializers, `distributed func` calls, or `distributed` computed properties).\n\n### Assigning and Resigning Actor Identifiers\n\nDuring a local distributed actor's initialization (i.e. any `init` of a `distributed actor`), the actor system will\nbe invoked in order to assign an ``ActorID`` for this actor.\n\nA call to ``assignID(_:)`` is made during the initialization of the distributed actor.\nThe snippet below showcases this, though no guarantees are made at this point about the exact placement of this call.\n\n```swift\ndistributed actor ShowcaseIDInit {\n  // let actorSystem: ActorSystem // synthesized;\n\n  // typealias ID = ActorSystem.ActorID\n  // let id: ID // synthesized; implements `Identifiable.id` requirement\n\n  init(actorSystem: ActorSystem) {\n    self.actorSystem = actorSystem\n    // ...\n    // self.id = actorSystem.assignID(Self.self) // synthesized;\n    // ...\n  }\n}\n```\n\nThe result of ``assignID(_:)`` is then directly stored in the synthesized `id` property of the actor.\n\nThe actor system should assign _globally unique_ identifiers to types, such that they may be properly resolved\nfrom any process in the distributed actor system. The exact shape of the ``ActorID`` is left up to the library to decide.\nIt can be as small as an integer based identifier, or as large as a series of key-value pairs identifying the actor.\n\nThe actor system must retain a mapping from the ``ActorID`` to the specific actor _instance_ which it is given in\n``actorReady(_:)`` in order to implement the ``resolve(id:using:)`` method, which is how incoming and outgoing remote calls are made possible.\n\nUsers have no control over this assignment, nor are they allowed to set the `id` property explicitly.\nThe ``DistributedActor/id`` is used to implement the distributed actor's ``Hashable``, ``Equatable``,\nand even ``Codable`` conformance (which is synthesized if and only if the ``ActorID`` is ``Codable`` itself).\n\n> Tip: Take note that throwing or failable initializers complicate this somewhat. Thankfully, the compiler\n> will always emit the right code such that every ``assignID(_:)`` is balanced with a ``resignID(_:)`` call,\n> when the actor either failed to initialize or deinitialize properly.\n>\n> It is also possible that a throwing initializer throws before assigning the `actorSystem` and `id` properties.\n> In such case, no `assignID` nor `resignID` calls are made. There is no risk of the compiler ever attempting\n> to call a `resignID(_:)` without first having assigned given ID.\n\nManually invoking `assignID` and `resignID` is generally not recommended but isn't strictly a programmer error,\nand it is up to the actor system to decide how to deal with such calls.\n\nOnce the ``distributed actor`` deinitializes, a call to ``resignID(_:)`` will be made. Generally this is made from\nthe distributed actor's `deinit`, however in the case of throwing initializers it may also happen during such failed\ninit, in order to release the ID that is no longer used.\n\n```swift\n// Synthesized inside a distributed actor's deinit:\ndeinit {\n  // actorSystem.resignID(self.id)\n}\n```\n\nAfter an ID is resigned, it technically could be used to identify another instance.\nFor example, an advanced actor system implementation could use such approach to implement actors which\nare created \"ad-hoc\" and always contain the appropriate ID, and if one isn't allocated yet for such ID,\nit could _then_ create one on demand and make sure it is assigned the required ID.\n\n### Readying Distributed Actors\n\nOnce a `distributed actor` has been _fully initialized_ during its initializer, a call to ``actorReady(_:)``\nis synthesized. This call is made after the actor's properties (including all user-declared properties) have been\ninitialized, but before other user-defined code in the initializer gets a chance to run.\n\n> Note: Generally due to actor initializer isolation rules, users will need to make their initializers `async`\nin order to write code that safely performs extra actions after it has fully initialized.\n\nThe ``actorReady(_)`` call on the actor system is a signal to the actor system that this actor _instance_ is now ready\nand may be resolved and interacted with via the actor system. Generally, a distributed actor system implementation\nwill _weakly retain_ the actors it has readied, because retaining them strongly would mean that they will never be\ndeallocated (and thus never resign their ID's).\n\n> Note: Generally actor systems should retain actors _weakly_ in order to allow them be deinitialized when no longer in use.\n>\n> Sometimes though, it can be quite useful to have the system retain certain \"well known\" actors, for example when it is expected\n> that other nodes in the distributed system will need to interact with them, even if end-user code no longer holds\n> strong references to them. An example of such \"retain while actor system is active\" distributed actors would be any kind\n> of actor which implements discovery or health check mechanisms between clustered nodes, sometimes called \"system actors\",\n> i.e. actors that serve the actor system directly.\n\nNext, we will discuss the just mentioned `resolve` method, which is closely tied to readying actors.\n\n### Resolving (potentially remote) Distributed Actors\n\nAn important aspect of any distributed actor system is being able to turn a ``DistributedActor`` type and ``ActorID``\ninto a reference to an actor (instance), regardless where the actor is located. The ID should have enough information stored\nto be able to make the decision of _where_ the actor is located, without having to contact remote nodes. Specifically,\nthe implementation of ``DistributedActorSystem/resolve(id:as:)`` is _not_ `async` and should _not_ perform long running\nor blocking operations in order to return.\n\n> Note: Currently only concrete distributed actors types can be resolved.\n\nThe actor system's ``DistributedActorSystem/resolve(id:as:)`` method is called by the compiler whenever end-users\ncall the ``DistributedActor``'s ``DistributedActor/resolve(id:using:)`` method. The return types of those methods differ,\nas the actor system's return type is `Act?` (and it may throw if unable to resolve the `ActorID`).\n\nThe actor system's `resolve` returning `nil` means that the ``ActorID`` passed to it refers to a _remote_\ndistributed actor. The Swift runtime reacts to this by creating a remote actor reference (sometimes called a \"proxy\").\n\n\n### Handling remote calls\n\nFinally, calls on a _remote_ distributed actor reference's distributed methods are turned into invocations of\n`remoteCall(on:target:invocation:returning:throwing:)` (or `remoteCallVoid(on:target:invocation:throwing:)` for Void returning methods).\n\nImplementing the remote calls correctly and efficiently is the important task for a distributed actor system library.\nSince those methods are not currently expressible as protocol requirements due to advanced use of generics\ncombined with type aliases, they will not appear in the protocol's documentation as explicit requirements.\nInstead, we present their signatures that a conforming type has to implement here:\n\n> Note: Although the `remoteCall` methods are not expressed as protocol requirements in source,\n> the compiler will provide the same errors as-if they were declared explicitly in this protocol.\n\n```swift\n /// Invoked by the Swift runtime when making a remote call.\n ///\n /// The `arguments` are the arguments container that was previously created\n /// by `makeInvocationEncoder` and has been populated with all arguments.\n ///\n /// This method should perform the actual remote function call, and await for its response.\n ///\n /// ## Errors\n /// This method is allowed to throw because of underlying transport or serialization errors,\n /// as well as by re-throwing the error received from the remote callee (if able to).\nfunc remoteCall<Act, Err, Res>(\n    on actor: Act,\n    target: RemoteCallTarget,\n    invocation: inout InvocationEncoder,\n    throwing: Err.Type,\n    returning: Res.Type\n) async throws -> Res\n    where Act: DistributedActor,\n          Act.ID == ActorID,\n          Err: Error,\n          Res: SerializationRequirement\n```\n\n```swift\n /// Invoked by the Swift runtime when making a `Void`-returning remote call.\n ///\n /// The `arguments` are the arguments container that was previously created\n /// by `makeInvocationEncoder` and has been populated with all arguments.\n ///\n /// This method should perform the actual remote function call, and await for its response.\n ///\n /// ## Errors\n /// This method is allowed to throw because of underlying transport or serialization errors,\n /// as well as by re-throwing the error received from the remote callee (if able to).\nfunc remoteCallVoid<Act, Err>(\n    on actor: Act,\n    target: RemoteCallTarget,\n    invocation: inout InvocationEncoder,\n    throwing: Err.Type\n) async throws -> Res\n    where Act: DistributedActor,\n          Act.ID == ActorID,\n          Err: Error\n```\n\nImplementations of remote calls generally will serialize `actor.id`, `target` and `invocation`\ninto some form of wire envelope, and send it over the network (or process boundary) using some\ntransport mechanism of their choice. As they do so, they need to suspend the `remoteCall` function,\nand resume it once a reply to the call arrives. Unless the transport layer is also async/await aware,\nthis will often require making use of a ``CheckedContinuation``.\n\nWhile implementing remote calls please keep in mind any potential failure scenarios that may occur,\nsuch as message loss, connection failures and similar issues. Such situations should all be\nsurfaced by resuming the `remoteCall` by throwing an error conforming to ``DistributedActorSystemError``.\n\nWhile it is not _required_ to conform error thrown out of these methods to ``DistributedActorSystemError``,\nthe general guideline about conforming errors to this protocol is that errors which are outside of the user's control,\nbut are thrown because transport or actor system issues, should conform to it. This is to simplify\nseparating \"business logic errors\" from transport errors.\n\n\n### Further reading\n\nFor an even more in-depth explanation about the inner workings of a distributed actor system,\nyou can refer to the following Swift Evolution proposals:\n\n- [SE-0336: Distributed Actor Isolation](https://github.com/apple/swift-evolution/blob/main/proposals/0336-distributed-actor-isolation.md)\n- [SE-0344: Distributed Actor Runtime](https://github.com/apple/swift-evolution/blob/main/proposals/0344-distributed-actor-runtime.md)"},{"p":["DistributedActorSystemError"],"f":[["protocol",12],[" ",17],["DistributedActorSystemError",7],[" : ",17],["Error",18,126]],"s":[["protocol",12],[" ",17],["DistributedActorSystemError",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Error protocol to which errors thrown by any `DistributedActorSystem` should conform."},{"p":["DistributedTargetInvocationDecoder"],"f":[["protocol",12],[" ",17],["DistributedTargetInvocationDecoder",7]],"s":[["protocol",12],[" ",17],["DistributedTargetInvocationDecoder",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Decoder that must be provided to `executeDistributedTarget` and is used\nby the Swift runtime to decode arguments of the invocation."},{"p":["DistributedTargetInvocationEncoder"],"f":[["protocol",12],[" ",17],["DistributedTargetInvocationEncoder",7]],"s":[["protocol",12],[" ",17],["DistributedTargetInvocationEncoder",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Used to encode an invocation of a distributed target (method or computed property).\n\n## Forming an invocation\n\nOn the sending-side an instance of an invocation is constructed by the runtime,\nand calls to: `recordGenericSubstitution`, `recordArgument`, `recordReturnType`,\n`recordErrorType`, and finally `doneRecording` are made (in this order).\n\nIf the return type of the target is `Void` the `recordReturnType` is not invoked.\n\nIf the error type thrown by the target is not defined the `recordErrorType` is not invoked.\n\nAn invocation implementation may decide to perform serialization right-away in the\n`record...` invocations, or it may choose to delay doing so until the invocation is passed\nto the `remoteCall`. This decision largely depends on if serialization is allowed to happen\non the caller's task, and if any smarter encoding can be used once all parameter calls have been\nrecorded (e.g. it may be possible to run-length encode values of certain types etc.)\n\nOnce encoded, the system should use some underlying transport mechanism to send the\nbytes serialized by the invocation to the remote peer.\n\n## Decoding an invocation\nSince every actor system is going to deal with a concrete invocation type, they may\nimplement decoding them whichever way is most optimal for the given system.\n\nOnce decided, the invocation must be passed to `executeDistributedTarget`\nwhich will decode the substitutions, argument values, return and error types (in that order).\n\nNote that the decoding will be provided the specific types that the sending side used to preform the call,\nso decoding can rely on simply invoking e.g. `Codable` (if that is the `SerializationRequirement`) decoding\nentry points on the provided types."},{"p":["DistributedTargetInvocationResultHandler"],"f":[["protocol",12],[" ",17],["DistributedTargetInvocationResultHandler",7]],"s":[["protocol",12],[" ",17],["DistributedTargetInvocationResultHandler",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActor"],"f":[["protocol",12],[" ",17],["DistributedActor",7],[" : ",17],["Hashable",18,112],[", ",17],["Identifiable",18,121],[", ",17],["AnyActor",18,109]],"s":[["protocol",12],[" ",17],["DistributedActor",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"\nThe such obtained actor system is then used to ``resolve(id:using:)`` the decoded ``ID``.\n\nUse the ``CodingUserInfoKey/actorSystemKey`` to provide the necessary\nactor system for the decoding initializer when decoding a distributed actor.\n\n- SeeAlso: ``DistributedActorSystem``\n- SeeAlso: ``Actor``\n- SeeAlso: ``AnyActor``"},{"p":["DistributedActorSystem","ActorID"],"f":[["associatedtype",12],[" ",17],["ActorID",7],[" : ",17],["Hashable",18,112],[", ",17],["Sendable",18,131]],"s":[["associatedtype",12],[" ",17],["ActorID",7],[" : ",17],["Hashable",18],[", ",17],["Sendable",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActorSystem","ResultHandler"],"f":[["associatedtype",12],[" ",17],["ResultHandler",7],[" : ",17],["DistributedTargetInvocationResultHandler",18,4]],"s":[["associatedtype",12],[" ",17],["ResultHandler",7],[" : ",17],["DistributedTargetInvocationResultHandler",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The type of the result handler which will be offered the results\nreturned by a distributed function invocation called via\n``executeDistributedTarget(on:target:invocationDecoder:handler:)``."},{"p":["DistributedActorSystem","InvocationDecoder"],"f":[["associatedtype",12],[" ",17],["InvocationDecoder",7],[" : ",17],["DistributedTargetInvocationDecoder",18,2],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["InvocationDecoder",18],[".",17],["SerializationRequirement",18],[" == ",17],["Self",18],[".",17],["InvocationEncoder",18],[".",17],["SerializationRequirement",18]],"s":[["associatedtype",12],[" ",17],["InvocationDecoder",7],[" : ",17],["DistributedTargetInvocationDecoder",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Type of ``DistributedTargetInvocationDecoder`` that should be used when decoding invocations during\n``executeDistributedTarget(on:target:invocationDecoder:handler:)`` calls."},{"p":["DistributedActorSystem","InvocationEncoder"],"f":[["associatedtype",12],[" ",17],["InvocationEncoder",7],[" : ",17],["DistributedTargetInvocationEncoder",18,3],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["InvocationEncoder",18],[".",17],["SerializationRequirement",18],[" == ",17],["Self",18],[".",17],["ResultHandler",18],[".",17],["SerializationRequirement",18]],"s":[["associatedtype",12],[" ",17],["InvocationEncoder",7],[" : ",17],["DistributedTargetInvocationEncoder",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Type of ``DistributedTargetInvocationEncoder`` that should be used when the Swift runtime needs to encode\na distributed target call into an encoder, before passing it off to `remoteCall(...)`."},{"p":["DistributedActorSystem","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["SerializationRequirement",18],[" == ",17],["Self",18],[".",17],["InvocationDecoder",18],[".",17],["SerializationRequirement",18]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The serialization requirement that will be applied to all distributed targets used with this system."},{"p":["DistributedTargetInvocationDecoder","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedTargetInvocationEncoder","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedTargetInvocationResultHandler","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActor","ActorSystem"],"f":[["associatedtype",12],[" ",17],["ActorSystem",7],[" : ",17],["DistributedActorSystem",18,0],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["ID",18],[" == ",17],["Self",18],[".",17],["ActorSystem",18],[".",17],["ActorID",18]],"s":[["associatedtype",12],[" ",17],["ActorSystem",7],[" : ",17],["DistributedActorSystem",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The type of transport used to communicate with actors of this type."},{"p":["DistributedActor","SerializationRequirement"],"f":[["associatedtype",12],[" ",17],["SerializationRequirement",7],[" ",17],["where",12],[" ",17],["Self",18],[".",17],["SerializationRequirement",18],[" == ",17],["Self",18],[".",17],["ActorSystem",18],[".",17],["SerializationRequirement",18]],"s":[["associatedtype",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The serialization requirement to apply to all distributed declarations inside the actor."},{"p":["ExecuteDistributedTargetError","ErrorCode"],"f":[["enum",12],[" ",17],["ErrorCode",7]],"s":[["enum",12],[" ",17],["ErrorCode",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingDistributedActorSystemError"],"f":[["struct",12],[" ",17],["LocalTestingDistributedActorSystemError",7]],"s":[["struct",12],[" ",17],["LocalTestingDistributedActorSystemError",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["ExecuteDistributedTargetError"],"f":[["struct",12],[" ",17],["ExecuteDistributedTargetError",7]],"s":[["struct",12],[" ",17],["ExecuteDistributedTargetError",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Error thrown by ``DistributedActorSystem/executeDistributedTarget(on:target:invocationDecoder:handler:)``.\n\nInspect the ``errorCode`` for details about the underlying reason this error was thrown."},{"p":["DistributedActorCodingError"],"f":[["struct",12],[" ",17],["DistributedActorCodingError",7]],"s":[["struct",12],[" ",17],["DistributedActorCodingError",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Error thrown by distributed actor systems while encountering encoding/decoding\nissues.\n\nAlso thrown when an attempt to decode ``DistributedActor`` is made,\nbut no ``DistributedActorSystem`` is available in the `Decoder`'s\n`userInfo[.actorSystemKey]`, as it is required to perform the resolve call."},{"p":["RemoteCallTarget"],"f":[["struct",12],[" ",17],["RemoteCallTarget",7]],"s":[["struct",12],[" ",17],["RemoteCallTarget",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Represents a 'target' of a distributed call, such as a `distributed func` or\n`distributed` computed property. Identification schemes may vary between\nsystems, and are subject to evolution.\n\nActor systems generally should treat the `identifier` as an opaque string,\nand pass it along to the remote system for in their `remoteCall`\nimplementation. Alternative approaches are possible, where the identifiers\nare either compressed, cached, or represented in other ways, as long as the\nrecipient system is able to determine which target was intended to be\ninvoked.\n\nThe string representation will attempt to pretty print the target identifier,\nhowever its exact format is not specified and may change in future versions."},{"p":["RemoteCallArgument"],"f":[["struct",12],[" ",17],["RemoteCallArgument",7],["<",17],["Value",0],[">",17]],"s":[["struct",12],[" ",17],["RemoteCallArgument",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"g":[["Value",0,0]],"d":"Represents an argument passed to a distributed call target."},{"p":["LocalTestingActorID"],"f":[["struct",12],[" ",17],["LocalTestingActorID",7]],"s":[["struct",12],[" ",17],["LocalTestingActorID",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingInvocationEncoder"],"f":[["struct",12],[" ",17],["LocalTestingInvocationEncoder",7]],"s":[["struct",12],[" ",17],["LocalTestingInvocationEncoder",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingInvocationResultHandler"],"f":[["struct",12],[" ",17],["LocalTestingInvocationResultHandler",7]],"s":[["struct",12],[" ",17],["LocalTestingInvocationResultHandler",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingDistributedActorSystem"],"f":[["final",12],[" ",17],["class",12],[" ",17],["LocalTestingDistributedActorSystem",7]],"s":[["class",12],[" ",17],["LocalTestingDistributedActorSystem",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"A `DistributedActorSystem` designed for local only testing.\n\nIt will crash on any attempt of remote communication, but can be useful\nfor learning about `distributed actor` isolation, as well as early\nprototyping stages of development where a real system is not necessary yet."},{"p":["LocalTestingInvocationDecoder"],"f":[["final",12],[" ",17],["class",12],[" ",17],["LocalTestingInvocationDecoder",7]],"s":[["class",12],[" ",17],["LocalTestingInvocationDecoder",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["ExecuteDistributedTargetError","ErrorCode","invalidParameterCount"],"f":[["case",12],[" ",17],["invalidParameterCount",7]],"s":[["case",12],[" ",17],["invalidParameterCount",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Call target has different number of parameters than arguments\nprovided by the invocation decoder."},{"p":["ExecuteDistributedTargetError","ErrorCode","targetAccessorNotFound"],"f":[["case",12],[" ",17],["targetAccessorNotFound",7]],"s":[["case",12],[" ",17],["targetAccessorNotFound",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Unable to resolve the target identifier to a function accessor.\nThis can happen when the identifier is corrupt, illegal, or wrong in the\nsense that the caller and callee do not have the called function recorded\nusing the same identifier."},{"p":["ExecuteDistributedTargetError","ErrorCode","typeDeserializationFailure"],"f":[["case",12],[" ",17],["typeDeserializationFailure",7]],"s":[["case",12],[" ",17],["typeDeserializationFailure",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["ExecuteDistributedTargetError","ErrorCode","invalidGenericSubstitutions"],"f":[["case",12],[" ",17],["invalidGenericSubstitutions",7]],"s":[["case",12],[" ",17],["invalidGenericSubstitutions",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Generic substitutions provided by invocation decoder are incompatible\nwith target of the call. E.g. the generic requirements on the actual\ntarget could not be fulfilled by the obtained generic substitutions."},{"p":["ExecuteDistributedTargetError","ErrorCode","missingGenericSubstitutions"],"f":[["case",12],[" ",17],["missingGenericSubstitutions",7]],"s":[["case",12],[" ",17],["missingGenericSubstitutions",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Target expects generic environment information, but invocation decoder\nprovided no generic substitutions."},{"p":["ExecuteDistributedTargetError","ErrorCode","other"],"f":[["case",12],[" ",17],["other",7]],"s":[["case",12],[" ",17],["other",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"A general issue during the execution of the distributed call target occurred."},{"p":["LocalTestingDistributedActorSystem","init()"],"f":[["init",10],["()",17]],"s":[["init",10],["()",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingDistributedActorSystemError","init(message:)"],"f":[["init",10],["(",17],["message",1],[": ",17],["String",18,116],[")",17]],"s":[["init",10],["(",17],["message",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["ExecuteDistributedTargetError","init(message:errorCode:)"],"f":[["init",10],["(",17],["message",1],[": ",17],["String",18,116],[", ",17],["errorCode",1],[": ",17],["ExecuteDistributedTargetError",18,18],[".",17],["ErrorCode",18,16],[")",17]],"s":[["init",10],["(",17],["message",1],[": ",17],["String",18],[", ",17],["errorCode",1],[": ",17],["ExecuteDistributedTargetError",18],[".",17],["ErrorCode",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["ExecuteDistributedTargetError","init(message:)"],"f":[["init",10],["(",17],["message",1],[": ",17],["String",18,116],[")",17]],"s":[["init",10],["(",17],["message",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActorCodingError","init(message:)"],"f":[["init",10],["(",17],["message",1],[": ",17],["String",18,116],[")",17]],"s":[["init",10],["(",17],["message",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActor","init(from:)"],"f":[["nonisolated",12],[" ",17],["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,129],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"e":[["Self.ID",1,"Decodable",119]],"c":[["Self.ID",1,"Decodable",119]]},{"p":["RemoteCallTarget","init(_:)"],"f":[["init",10],["(",17],["_",1],[" ",17],["identifier",2],[": ",17],["String",18,116],[")",17]],"s":[["init",10],["(",17],["String",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["RemoteCallArgument","init(label:name:value:)"],"f":[["init",10],["(",17],["label",1],[": ",17],["String",18,116],["?, ",17],["name",1],[": ",17],["String",18,116],[", ",17],["value",1],[": ",17],["Value",18],[")",17]],"s":[["init",10],["(",17],["label",1],[": ",17],["String",18],["?, ",17],["name",1],[": ",17],["String",18],[", ",17],["value",1],[": ",17],["Value",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"g":[["Value",0,0]]},{"p":["LocalTestingActorID","init(id:)"],"f":[["init",10],["(",17],["id",1],[": ",17],["String",18,116],[")",17]],"s":[["init",10],["(",17],["id",1],[": ",17],["String",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingActorID","init(from:)"],"f":[["init",10],["(",17],["from",1],[" ",17],["decoder",2],[": ",17],["Decoder",18,129],[") ",17],["throws",12]],"s":[["init",10],["(",17],["from",1],[": ",17],["Decoder",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":120},{"p":["LocalTestingActorID","init(parse:)"],"f":[["init",10],["(",17],["parse",1],[" ",17],["id",2],[": ",17],["String",18,116],[")",17]],"s":[["init",10],["(",17],["parse",1],[": ",17],["String",18],[")",17]],"a":{"a":{"d":true,"r":"init(id:)"},"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingDistributedActorSystemError","message"],"f":[["let",12],[" ",17],["message",7],[": ",17],["String",18,116]],"s":[["let",12],[" ",17],["message",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["ExecuteDistributedTargetError","message"],"f":[["let",12],[" ",17],["message",7],[": ",17],["String",18,116]],"s":[["let",12],[" ",17],["message",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["ExecuteDistributedTargetError","errorCode"],"f":[["let",12],[" ",17],["errorCode",7],[": ",17],["ExecuteDistributedTargetError",18,18],[".",17],["ErrorCode",18,16]],"s":[["let",12],[" ",17],["errorCode",7],[": ",17],["ExecuteDistributedTargetError",18],[".",17],["ErrorCode",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActorCodingError","message"],"f":[["let",12],[" ",17],["message",7],[": ",17],["String",18,116]],"s":[["let",12],[" ",17],["message",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActor","actorSystem"],"f":[["nonisolated",12],[" ",17],["var",12],[" ",17],["actorSystem",7],[": ",17],["Self",18],[".",17],["ActorSystem",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["actorSystem",7],[": ",17],["Self",18],[".",17],["ActorSystem",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The ``DistributedActorSystem`` that is managing this distributed actor.\n\nIt is immutable and equal to the system assigned during the distributed actor's local initializer\n(or to the system passed to the ``resolve(id:using:)`` static function).\n\n## Synthesized property\n\nIn concrete distributed actor declarations, a witness for this protocol requirement is synthesized by the compiler.\n\nIt is required to assign an initial value to the `actorSystem` property inside a distributed actor's designated initializer.\nSemantically, it can be treated as a `let` declaration, that must be assigned in order to fully-initialize the instance.\n\nIf a distributed actor declares no initializer, its default initializer will take the shape of `init(actorSystem:)`,\nand initialize this property using the passed ``DistributedActorSystem``. If any user-defined initializer exists,\nthe default initializer is not synthesized, and all the user-defined initializers must take care to initialize this property."},{"p":["DistributedActor","id"],"f":[["override",12],[" ",17],["nonisolated",12],[" ",17],["var",12],[" ",17],["id",7],[": ",17],["Self",18],[".",17],["ID",18],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["id",7],[": ",17],["Self",18],[".",17],["ID",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Logical identity of this distributed actor.\n\nMany distributed actor references may be pointing at, logically, the same actor.\nFor example, calling `resolve(id:using:)` multiple times, is not guaranteed\nto return the same exact resolved actor instance, however all the references would\nrepresent logically references to the same distributed actor, e.g. on a different node.\n\nDepending on the capabilities of the actor system producing the identifiers,\nthe `ID` may also be used to store instance specific metadata.\n\n## Synthesized property\n\nIn concrete distributed actor declarations, a witness for this protocol requirement is synthesized by the compiler.\n\nIt is not possible to assign a value to the `id` directly; instead, it is assigned during an actors `init` (or `resolve`),\nby the managing actor system."},{"p":["RemoteCallTarget","identifier"],"f":[["var",12],[" ",17],["identifier",7],[": ",17],["String",18,116],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["identifier",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The underlying identifier of the target, returned as-is."},{"p":["RemoteCallTarget","description"],"f":[["var",12],[" ",17],["description",7],[": ",17],["String",18,116],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["description",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Attempts to pretty format the underlying target identifier.\nIf unable to, returns the raw underlying identifier.","o":125},{"p":["RemoteCallArgument","effectiveLabel"],"f":[["var",12],[" ",17],["effectiveLabel",7],[": ",17],["String",18,116],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["effectiveLabel",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The effective label of this argument, i.e. if no explicit `label` was set\nthis defaults to the `name`. This reflects the semantics of call sites of\nfunction declarations without explicit label definitions in Swift."},{"p":["RemoteCallArgument","name"],"f":[["let",12],[" ",17],["name",7],[": ",17],["String",18,116]],"s":[["let",12],[" ",17],["name",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The internal name of parameter this argument is accessible as in the\nfunction body. It is not part of the functions API and may change without\nbreaking the target identifier.\n\nIf the method did not declare an explicit `label`, it is used as the\n`effectiveLabel`."},{"p":["RemoteCallArgument","label"],"f":[["let",12],[" ",17],["label",7],[": ",17],["String",18,116],["?",17]],"s":[["let",12],[" ",17],["label",7],[": ",17],["String",18],["?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The \"argument label\" of the argument.\nThe label is the name visible name used in external calls made to this\ntarget, e.g. for `func hello(label name: String)` it is `label`.\n\nIf no label is specified (i.e. `func hi(name: String)`), the `label`,\nvalue is empty, however `effectiveLabel` is equal to the `name`.\n\nIn most situations, using `effectiveLabel` is more useful to identify\nthe user-visible name of this argument."},{"p":["RemoteCallArgument","value"],"f":[["let",12],[" ",17],["value",7],[": ",17],["Value",18]],"s":[["let",12],[" ",17],["value",7],[": ",17],["Value",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"The value of the argument being passed to the call.\nAs `RemoteCallArgument` is always used in conjunction with\n`recordArgument` and populated by the compiler, this Value will generally\nconform to a distributed actor system's `SerializationRequirement`."},{"p":["LocalTestingActorID","id"],"f":[["let",12],[" ",17],["id",7],[": ",17],["String",18,116]],"s":[["let",12],[" ",17],["id",7],[": ",17],["String",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingActorID","address"],"f":[["var",12],[" ",17],["address",7],[": ",17],["String",18,116],[" { ",17],["get",12],[" }",17]],"s":[["var",12],[" ",17],["address",7],[": ",17],["String",18]],"a":{"a":{"d":true,"r":"id"},"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedActorCodingError","missingActorSystemUserInfo(_:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["missingActorSystemUserInfo",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) -> ",17],["DistributedActorCodingError",18,19],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5]],"s":[["static",12],[" ",17],["func",12],[" ",17],["missingActorSystemUserInfo",7],["<",17],["Act",0],[">(",17],["Act",18],[".Type) -> ",17],["DistributedActorCodingError",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5]],"g":[["Act",0,0]]},{"p":["DistributedActor","resolve(id:using:)"],"f":[["static",12],[" ",17],["func",12],[" ",17],["resolve",7],["(",17],["id",1],[": ",17],["Self",18],[".",17],["ID",18],[", ",17],["using",1],[" ",17],["system",2],[": ",17],["Self",18],[".",17],["ActorSystem",18],[") ",17],["throws",12],[" -> ",17],["Self",18]],"s":[["static",12],[" ",17],["func",12],[" ",17],["resolve",7],["(",17],["id",1],[": ",17],["Self",18],[".",17],["ID",18],[", ",17],["using",1],[": ",17],["Self",18],[".",17],["ActorSystem",18],[") ",17],["throws",12],[" -> ",17],["Self",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Resolves the passed in `id` against the `system`, returning\neither a local or remote actor reference.\n\nThe system will be asked to `resolve` the identity and return either\na local instance or request a proxy to be created for this identity.\n\nA remote distributed actor reference will forward all invocations through\nthe system, allowing it to take over the remote messaging with the\nremote actor instance.\n\n- Postcondition: upon successful return, the returned actor's ``id`` and ``actorSystem`` properties\n                 will be equal to the values passed as parameters to this method.\n- Parameter id: identity uniquely identifying a, potentially remote, actor in the system\n- Parameter system: `system` which should be used to resolve the `identity`, and be associated with the returned actor"},{"p":["LocalTestingDistributedActorSystem","actorReady(_:)"],"f":[["func",12],[" ",17],["actorReady",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actor",2],[": ",17],["Act",18],[") ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Act",18],[".",17],["ID",18],[" == ",17],["LocalTestingActorID",18,22]],"s":[["func",12],[" ",17],["actorReady",7],["<",17],["Act",0],[">(",17],["Act",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Act.ID",2,"LocalTestingActorID",22]],"g":[["Act",0,0]],"o":67},{"p":["LocalTestingDistributedActorSystem","remoteCall(on:target:invocation:throwing:returning:)"],"f":[["func",12],[" ",17],["remoteCall",7],["<",17],["Act",0],[", ",17],["Err",0],[", ",17],["Res",0],[">(",17],["on",1],[" ",17],["actor",2],[": ",17],["Act",18],[", ",17],["target",1],[": ",17],["RemoteCallTarget",18,20],[", ",17],["invocation",1],[": ",17],["inout",12],[" ",17],["LocalTestingDistributedActorSystem",18,25],[".",17],["InvocationEncoder",18,102],[", ",17],["throwing",1],[" ",17],["errorType",2],[": ",17],["Err",18],[".Type, ",17],["returning",1],[" ",17],["returnType",2],[": ",17],["Res",18],[".Type) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Res",18],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Err",18],[" : ",17],["Error",18,126],[", ",17],["Res",18],[" : ",17],["Decodable",18,119],[", ",17],["Res",18],[" : ",17],["Encodable",18,110],[", ",17],["Act",18],[".",17],["ID",18],[" == ",17],["LocalTestingActorID",18,22]],"s":[["func",12],[" ",17],["remoteCall",7],["<",17],["Act",0],[", ",17],["Err",0],[", ",17],["Res",0],[">(",17],["on",1],[": ",17],["Act",18],[", ",17],["target",1],[": ",17],["RemoteCallTarget",18],[", ",17],["invocation",1],[": ",17],["inout",12],[" ",17],["LocalTestingDistributedActorSystem",18],[".",17],["InvocationEncoder",18],[", ",17],["throwing",1],[": ",17],["Err",18],[".Type, ",17],["returning",1],[": ",17],["Res",18],[".Type) ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["Res",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Err",1,"Error",126],["Res",1,"Decodable",119],["Res",1,"Encodable",110],["Act.ID",2,"LocalTestingActorID",22]],"g":[["Act",0,0],["Err",1,0],["Res",2,0]]},{"p":["LocalTestingDistributedActorSystem","remoteCallVoid(on:target:invocation:throwing:)"],"f":[["func",12],[" ",17],["remoteCallVoid",7],["<",17],["Act",0],[", ",17],["Err",0],[">(",17],["on",1],[" ",17],["actor",2],[": ",17],["Act",18],[", ",17],["target",1],[": ",17],["RemoteCallTarget",18,20],[", ",17],["invocation",1],[": ",17],["inout",12],[" ",17],["LocalTestingDistributedActorSystem",18,25],[".",17],["InvocationEncoder",18,102],[", ",17],["throwing",1],[" ",17],["errorType",2],[": ",17],["Err",18],[".Type) ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Err",18],[" : ",17],["Error",18,126],[", ",17],["Act",18],[".",17],["ID",18],[" == ",17],["LocalTestingActorID",18,22]],"s":[["func",12],[" ",17],["remoteCallVoid",7],["<",17],["Act",0],[", ",17],["Err",0],[">(",17],["on",1],[": ",17],["Act",18],[", ",17],["target",1],[": ",17],["RemoteCallTarget",18],[", ",17],["invocation",1],[": ",17],["inout",12],[" ",17],["LocalTestingDistributedActorSystem",18],[".",17],["InvocationEncoder",18],[", ",17],["throwing",1],[": ",17],["Err",18],[".Type) ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Err",1,"Error",126],["Act.ID",2,"LocalTestingActorID",22]],"g":[["Act",0,0],["Err",1,0]]},{"p":["LocalTestingDistributedActorSystem","makeInvocationEncoder()"],"f":[["func",12],[" ",17],["makeInvocationEncoder",7],["() -> ",17],["LocalTestingDistributedActorSystem",18,25],[".",17],["InvocationEncoder",18,102]],"s":[["func",12],[" ",17],["makeInvocationEncoder",7],["() -> ",17],["LocalTestingDistributedActorSystem",18],[".",17],["InvocationEncoder",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":69},{"p":["LocalTestingDistributedActorSystem","resolve(id:as:)"],"f":[["func",12],[" ",17],["resolve",7],["<",17],["Act",0],[">(",17],["id",1],[": ",17],["LocalTestingDistributedActorSystem",18,25],[".",17],["ActorID",18,99],[", ",17],["as",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) ",17],["throws",12],[" -> ",17],["Act",18],["? ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Act",18],[".",17],["ID",18],[" == ",17],["LocalTestingActorID",18,22]],"s":[["func",12],[" ",17],["resolve",7],["<",17],["Act",0],[">(",17],["id",1],[": ",17],["LocalTestingDistributedActorSystem",18],[".",17],["ActorID",18],[", ",17],["as",1],[": ",17],["Act",18],[".Type) ",17],["throws",12],[" -> ",17],["Act",18],["?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Act.ID",2,"LocalTestingActorID",22]],"g":[["Act",0,0]],"o":70},{"p":["LocalTestingDistributedActorSystem","assignID(_:)"],"f":[["func",12],[" ",17],["assignID",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) -> ",17],["LocalTestingDistributedActorSystem",18,25],[".",17],["ActorID",18,99],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Act",18],[".",17],["ID",18],[" == ",17],["LocalTestingActorID",18,22]],"s":[["func",12],[" ",17],["assignID",7],["<",17],["Act",0],[">(",17],["Act",18],[".Type) -> ",17],["LocalTestingDistributedActorSystem",18],[".",17],["ActorID",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Act.ID",2,"LocalTestingActorID",22]],"g":[["Act",0,0]],"o":71},{"p":["LocalTestingDistributedActorSystem","resignID(_:)"],"f":[["func",12],[" ",17],["resignID",7],["(",17],["_",1],[" ",17],["id",2],[": ",17],["LocalTestingDistributedActorSystem",18,25],[".",17],["ActorID",18,99],[")",17]],"s":[["func",12],[" ",17],["resignID",7],["(",17],["LocalTestingDistributedActorSystem",18],[".",17],["ActorID",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":72},{"p":["DistributedActorSystem","actorReady(_:)"],"f":[["func",12],[" ",17],["actorReady",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actor",2],[": ",17],["Act",18],[") ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Self",18],[".",17],["ActorID",18],[" == ",17],["Act",18],[".",17],["ID",18]],"s":[["func",12],[" ",17],["actorReady",7],["<",17],["Act",0],[">(",17],["Act",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Self.ActorID",2,"Act.ID"]],"g":[["Act",0,1]],"d":"Invoked during a distributed actor's initialization, as soon as it becomes fully initialized.\n\nThe system is expected to store the reference to this actor, and maintain an `ActorID: DistributedActor`\nmapping for the purpose of implementing the `resolve(id:as:)` method.\n\nThe system usually should NOT retain the passed reference, and it will be informed via\n`resignID(_:)` when the actor has been deallocated so it can remove the stale reference from its\ninternal `ActorID: DistributedActor` mapping.\n\nThe `actor.id` of the passed actor must be an `ActorID` that this system previously has assigned.\n\nIf `actorReady` gets called with some unknown ID, it should crash immediately as it signifies some\nvery unexpected use of the system.\n\n- Parameter actor: reference to the (local) actor that was just fully initialized."},{"p":["DistributedActorSystem","invokeHandlerOnReturn(handler:resultBuffer:metatype:)"],"f":[["func",12],[" ",17],["invokeHandlerOnReturn",7],["(",17],["handler",1],[": ",17],["Self",18],[".",17],["ResultHandler",18],[", ",17],["resultBuffer",1],[": ",17],["UnsafeRawPointer",18,117],[", ",17],["metatype",1],[": ",17],["Any",12],[".Type) ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["invokeHandlerOnReturn",7],["(",17],["handler",1],[": ",17],["Self",18],[".",17],["ResultHandler",18],[", ",17],["resultBuffer",1],[": ",17],["UnsafeRawPointer",18],[", ",17],["metatype",1],[": ",17],["Any",12],[".Type) ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Implementation synthesized by the compiler.\nNot intended to be invoked explicitly from user code!"},{"p":["DistributedActorSystem","makeInvocationEncoder()"],"f":[["func",12],[" ",17],["makeInvocationEncoder",7],["() -> ",17],["Self",18],[".",17],["InvocationEncoder",18]],"s":[["func",12],[" ",17],["makeInvocationEncoder",7],["() -> ",17],["Self",18],[".",17],["InvocationEncoder",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Invoked by the Swift runtime when a distributed remote call is about to be made.\n\nThe returned `DistributedTargetInvocation` will be populated with all\narguments, generic substitutions, and specific error and return types\nthat are associated with this specific invocation."},{"p":["DistributedActorSystem","resolve(id:as:)"],"f":[["func",12],[" ",17],["resolve",7],["<",17],["Act",0],[">(",17],["id",1],[": ",17],["Self",18],[".",17],["ActorID",18],[", ",17],["as",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) ",17],["throws",12],[" -> ",17],["Act",18],["? ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Self",18],[".",17],["ActorID",18],[" == ",17],["Act",18],[".",17],["ID",18]],"s":[["func",12],[" ",17],["resolve",7],["<",17],["Act",0],[">(",17],["id",1],[": ",17],["Self",18],[".",17],["ActorID",18],[", ",17],["as",1],[": ",17],["Act",18],[".Type) ",17],["throws",12],[" -> ",17],["Act",18],["?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Self.ActorID",2,"Act.ID"]],"g":[["Act",0,1]],"d":"Resolve a local or remote actor address to a real actor instance, or throw if unable to.\nThe returned value is either a local actor or proxy to a remote actor.\n\nResolving an actor is called when a specific distributed actors `init(from:)`\ndecoding initializer is invoked. Once the actor's identity is deserialized\nusing the `decodeIdentity(from:)` call, it is fed into this function, which\nis responsible for resolving the identity to a remote or local actor reference.\n\nIf the resolve fails, meaning that it cannot locate a local actor managed for\nthis identity, managed by this transport, nor can a remote actor reference\nbe created for this identity on this transport, then this function must throw.\n\nIf this function returns correctly, the returned actor reference is immediately\nusable. It may not necessarily imply the strict *existence* of a remote actor\nthe identity was pointing towards, e.g. when a remote system allocates actors\nlazily as they are first time messaged to, however this should not be a concern\nof the sending side.\n\nDetecting liveness of such remote actors shall be offered / by transport libraries\nby other means, such as \"watching an actor for termination\" or similar."},{"p":["DistributedActorSystem","assignID(_:)"],"f":[["func",12],[" ",17],["assignID",7],["<",17],["Act",0],[">(",17],["_",1],[" ",17],["actorType",2],[": ",17],["Act",18],[".Type) -> ",17],["Self",18],[".",17],["ActorID",18],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5],[", ",17],["Self",18],[".",17],["ActorID",18],[" == ",17],["Act",18],[".",17],["ID",18]],"s":[["func",12],[" ",17],["assignID",7],["<",17],["Act",0],[">(",17],["Act",18],[".Type) -> ",17],["Self",18],[".",17],["ActorID",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5],["Self.ActorID",2,"Act.ID"]],"g":[["Act",0,1]],"d":"Create an `ActorID` for the passed actor type.\n\nThis function is invoked by a distributed actor during its initialization,\nand the returned address value is stored along with it for the time of its\nlifetime.\n\nThe address MUST uniquely identify the actor, and allow resolving it.\nE.g. if an actor is created under address `addr1` then immediately invoking\n`system.resolve(id: addr1, as: Greeter.self)` MUST return a reference\nto the same actor."},{"p":["DistributedActorSystem","resignID(_:)"],"f":[["func",12],[" ",17],["resignID",7],["(",17],["_",1],[" ",17],["id",2],[": ",17],["Self",18],[".",17],["ActorID",18],[")",17]],"s":[["func",12],[" ",17],["resignID",7],["(",17],["Self",18],[".",17],["ActorID",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Called during when a distributed actor is deinitialized, or fails to initialize completely (e.g. by throwing\nout of an `init` that did not completely initialize all of the actors stored properties yet).\n\nThis method is guaranteed to be called at-most-once for a given id (assuming IDs are unique,\nand not re-cycled by the system), i.e. if it is called during a failure to initialize completely,\nthe call from the actor's deinitializer will not happen (as under these circumstances, `deinit` will be run).\n\nIf `resignID` gets called with some unknown ID, it should crash immediately as it signifies some\nvery unexpected use of the system.\n\n- Parameter id: the id of an actor managed by this system that has begun its `deinit`."},{"p":["DistributedActorSystem","executeDistributedTarget(on:target:invocationDecoder:handler:)"],"f":[["func",12],[" ",17],["executeDistributedTarget",7],["<",17],["Act",0],[">(",17],["on",1],[" ",17],["actor",2],[": ",17],["Act",18],[", ",17],["target",1],[": ",17],["RemoteCallTarget",18,20],[", ",17],["invocationDecoder",1],[": ",17],["inout",12],[" ",17],["Self",18],[".",17],["InvocationDecoder",18],[", ",17],["handler",1],[": ",17],["Self",18],[".",17],["ResultHandler",18],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Act",18],[" : ",17],["DistributedActor",18,5]],"s":[["func",12],[" ",17],["executeDistributedTarget",7],["<",17],["Act",0],[">(",17],["on",1],[": ",17],["Act",18],[", ",17],["target",1],[": ",17],["RemoteCallTarget",18],[", ",17],["invocationDecoder",1],[": ",17],["inout",12],[" ",17],["Self",18],[".",17],["InvocationDecoder",18],[", ",17],["handler",1],[": ",17],["Self",18],[".",17],["ResultHandler",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Act",1,"DistributedActor",5]],"g":[["Act",0,1]],"d":"Prepare and execute a call to the distributed function identified by the passed arguments,\non the passed `actor`, and collect its results using the `ResultHandler`.\n\nThis method encapsulates multiple steps that are invoked in executing a distributed function,\ninto one very efficient implementation. The steps involved are:\n\n- looking up the distributed function based on its name\n- decoding, in an efficient manner, all arguments from the `Args` container into a well-typed representation\n- using that representation to perform the call on the target method\n\nThe reason for this API using a `ResultHandler` rather than returning values directly,\nis that thanks to this approach it can avoid any existential boxing, and can serve the most\nlatency sensitive-use-cases.\n\n- Parameters:\n  - actor: actor on which the remote call should invoke the target\n  - target: the target (method) identifier that should be invoked\n  - invocationDecoder: used to obtain all arguments to be used to perform\n                       the target invocation\n  - handler: used to provide a type-safe way for library code to handle\n             the values returned by the target invocation.\n- Throws: if the target location, invocation argument decoding, or\n          some other mismatch between them happens. In general, this\n          method is allowed to throw in any situation that might otherwise\n          result in an illegal or unexpected invocation being performed.\n\n          Throws ``ExecuteDistributedTargetMissingAccessorError`` if the `target`\n          does not resolve to a valid distributed function accessor, i.e. the\n          call identifier is incorrect, corrupted, or simply not present in this process."},{"p":["DistributedTargetInvocationDecoder","decodeErrorType()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeErrorType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"s":[["func",12],[" ",17],["decodeErrorType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedTargetInvocationDecoder","decodeReturnType()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeReturnType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"s":[["func",12],[" ",17],["decodeReturnType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Attempt to decode the known return type of the distributed invocation.\n\nIt is legal to implement this by returning `nil`, and then the system\nwill take the concrete return type from the located function signature."},{"p":["DistributedTargetInvocationDecoder","decodeGenericSubstitutions()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["decodeGenericSubstitutions",7],["() ",17],["throws",12],[" -> [",17],["Any",12],[".Type]",17]],"s":[["func",12],[" ",17],["decodeGenericSubstitutions",7],["() ",17],["throws",12],[" -> [",17],["Any",12],[".Type]",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedTargetInvocationEncoder","doneRecording()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["doneRecording",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["doneRecording",7],["() ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["DistributedTargetInvocationEncoder","recordErrorType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["recordErrorType",7],["<",17],["E",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["E",18],[".Type) ",17],["throws",12],[" ",17],["where",12],[" ",17],["E",18],[" : ",17],["Error",18,126]],"s":[["func",12],[" ",17],["recordErrorType",7],["<",17],["E",0],[">(",17],["E",18],[".Type) ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["E",1,"Error",126]],"g":[["E",0,1]],"d":"Record the error type of the distributed method.\nThis method will not be invoked if the target is not throwing."},{"p":["DistributedTargetInvocationEncoder","recordGenericSubstitution(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["recordGenericSubstitution",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["T",18],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["recordGenericSubstitution",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"g":[["T",0,1]],"d":"The arguments must be encoded order-preserving, and once `decodeGenericSubstitutions`\nis called, the substitutions must be returned in the same order in which they were recorded."},{"p":["DistributedTargetInvocationResultHandler","onReturnVoid()"],"f":[["func",12],[" ",17],["onReturnVoid",7],["() ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["onReturnVoid",7],["() ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Invoked when the distributed target invocation of a `Void` returning\nfunction has completed successfully."},{"p":["DistributedTargetInvocationResultHandler","onThrow(error:)"],"f":[["func",12],[" ",17],["onThrow",7],["<",17],["Err",0],[">(",17],["error",1],[": ",17],["Err",18],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Err",18],[" : ",17],["Error",18,126]],"s":[["func",12],[" ",17],["onThrow",7],["<",17],["Err",0],[">(",17],["error",1],[": ",17],["Err",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Err",1,"Error",126]],"g":[["Err",0,1]]},{"p":["DistributedActor","hash(into:)"],"f":[["nonisolated",12],[" ",17],["func",12],[" ",17],["hash",7],["(",17],["into",1],[" ",17],["hasher",2],[": ",17],["inout",12],[" ",17],["Hasher",18,127],[")",17]],"s":[["func",12],[" ",17],["hash",7],["(",17],["into",1],[": ",17],["inout",12],[" ",17],["Hasher",18],[")",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"A distributed actor's hash and equality is implemented by directly delegating to its ``id``.\n\nFor more details see the \"Hashable and Identifiable conformance\" section of ``DistributedActor``."},{"p":["DistributedActor","whenLocal(_:)"],"f":[["nonisolated",12],[" ",17],["func",12],[" ",17],["whenLocal",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["body",2],[": (",17],["isolated",12],[" ",17],["Self",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18],["? ",17],["where",12],[" ",17],["T",18],[" : ",17],["Sendable",18,131]],"s":[["func",12],[" ",17],["whenLocal",7],["<",17],["T",0],[">((",17],["isolated",12],[" ",17],["Self",18],[") ",17],["async",12],[" ",17],["throws",12],[" -> ",17],["T",18],[") ",17],["async",12],[" ",17],["rethrows",12],[" -> ",17],["T",18],["?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["T",1,"Sendable",131]],"g":[["T",0,1]],"d":"Executes the passed 'body' only when the distributed actor is local instance.\n\nThe `Self` passed to the body closure is isolated, meaning that the\nclosure can be used to call non-distributed functions, or even access actor\nstate.\n\nWhen the actor is remote, the closure won't be executed and this function will return nil."},{"p":["DistributedActor","encode(to:)"],"f":[["nonisolated",12],[" ",17],["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["encoder",2],[": ",17],["Encoder",18,130],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Encoder",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"e":[["Self.ID",1,"Encodable",110]],"c":[["Self.ID",1,"Encodable",110]],"d":"Encodes the `actor.id` as a single value into the passed `encoder`."},{"p":["LocalTestingActorID","encode(to:)"],"f":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[" ",17],["encoder",2],[": ",17],["Encoder",18,130],[") ",17],["throws",12]],"s":[["func",12],[" ",17],["encode",7],["(",17],["to",1],[": ",17],["Encoder",18],[") ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":111},{"p":["LocalTestingInvocationDecoder","decodeErrorType()"],"f":[["func",12],[" ",17],["decodeErrorType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"s":[["func",12],[" ",17],["decodeErrorType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":74},{"p":["LocalTestingInvocationDecoder","decodeReturnType()"],"f":[["func",12],[" ",17],["decodeReturnType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"s":[["func",12],[" ",17],["decodeReturnType",7],["() ",17],["throws",12],[" -> ",17],["Any",12],[".Type?",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":75},{"p":["LocalTestingInvocationDecoder","decodeNextArgument()"],"f":[["func",12],[" ",17],["decodeNextArgument",7],["<",17],["Argument",0],[">() ",17],["throws",12],[" -> ",17],["Argument",18],[" ",17],["where",12],[" ",17],["Argument",18],[" : ",17],["Decodable",18,119],[", ",17],["Argument",18],[" : ",17],["Encodable",18,110]],"s":[["func",12],[" ",17],["decodeNextArgument",7],["<",17],["Argument",0],[">() ",17],["throws",12],[" -> ",17],["Argument",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Argument",1,"Decodable",119],["Argument",1,"Encodable",110]],"g":[["Argument",0,0]]},{"p":["LocalTestingInvocationDecoder","decodeGenericSubstitutions()"],"f":[["func",12],[" ",17],["decodeGenericSubstitutions",7],["() ",17],["throws",12],[" -> [",17],["Any",12],[".Type]",17]],"s":[["func",12],[" ",17],["decodeGenericSubstitutions",7],["() ",17],["throws",12],[" -> [",17],["Any",12],[".Type]",17]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":76},{"p":["LocalTestingInvocationEncoder","doneRecording()"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["doneRecording",7],["() ",17],["throws",12]],"s":[["func",12],[" ",17],["doneRecording",7],["() ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":77},{"p":["LocalTestingInvocationEncoder","recordArgument(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["recordArgument",7],["<",17],["Value",0],[">(",17],["_",1],[" ",17],["argument",2],[": ",17],["RemoteCallArgument",18,21],["<",17],["Value",18],[">) ",17],["throws",12],[" ",17],["where",12],[" ",17],["Value",18],[" : ",17],["Decodable",18,119],[", ",17],["Value",18],[" : ",17],["Encodable",18,110]],"s":[["func",12],[" ",17],["recordArgument",7],["<",17],["Value",0],[">(",17],["RemoteCallArgument",18],["<",17],["Value",18],[">) ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Value",1,"Decodable",119],["Value",1,"Encodable",110]],"g":[["Value",0,0]]},{"p":["LocalTestingInvocationEncoder","recordErrorType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["recordErrorType",7],["<",17],["E",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["E",18],[".Type) ",17],["throws",12],[" ",17],["where",12],[" ",17],["E",18],[" : ",17],["Error",18,126]],"s":[["func",12],[" ",17],["recordErrorType",7],["<",17],["E",0],[">(",17],["E",18],[".Type) ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["E",1,"Error",126]],"g":[["E",0,0]],"o":78},{"p":["LocalTestingInvocationEncoder","recordReturnType(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["recordReturnType",7],["<",17],["R",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["R",18],[".Type) ",17],["throws",12],[" ",17],["where",12],[" ",17],["R",18],[" : ",17],["Decodable",18,119],[", ",17],["R",18],[" : ",17],["Encodable",18,110]],"s":[["func",12],[" ",17],["recordReturnType",7],["<",17],["R",0],[">(",17],["R",18],[".Type) ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["R",1,"Decodable",119],["R",1,"Encodable",110]],"g":[["R",0,0]]},{"p":["LocalTestingInvocationEncoder","recordGenericSubstitution(_:)"],"f":[["mutating",12],[" ",17],["func",12],[" ",17],["recordGenericSubstitution",7],["<",17],["T",0],[">(",17],["_",1],[" ",17],["type",2],[": ",17],["T",18],[".Type) ",17],["throws",12]],"s":[["func",12],[" ",17],["recordGenericSubstitution",7],["<",17],["T",0],[">(",17],["T",18],[".Type) ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"g":[["T",0,0]],"o":79},{"p":["LocalTestingInvocationResultHandler","onReturnVoid()"],"f":[["func",12],[" ",17],["onReturnVoid",7],["() ",17],["async",12],[" ",17],["throws",12]],"s":[["func",12],[" ",17],["onReturnVoid",7],["() ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":80},{"p":["LocalTestingInvocationResultHandler","onThrow(error:)"],"f":[["func",12],[" ",17],["onThrow",7],["<",17],["Err",0],[">(",17],["error",1],[": ",17],["Err",18],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Err",18],[" : ",17],["Error",18,126]],"s":[["func",12],[" ",17],["onThrow",7],["<",17],["Err",0],[">(",17],["error",1],[": ",17],["Err",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Err",1,"Error",126]],"g":[["Err",0,0]],"o":81},{"p":["LocalTestingInvocationResultHandler","onReturn(value:)"],"f":[["func",12],[" ",17],["onReturn",7],["<",17],["Success",0],[">(",17],["value",1],[": ",17],["Success",18],[") ",17],["async",12],[" ",17],["throws",12],[" ",17],["where",12],[" ",17],["Success",18],[" : ",17],["Decodable",18,119],[", ",17],["Success",18],[" : ",17],["Encodable",18,110]],"s":[["func",12],[" ",17],["onReturn",7],["<",17],["Success",0],[">(",17],["value",1],[": ",17],["Success",18],[") ",17],["async",12],[" ",17],["throws",12]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"c":[["Success",1,"Decodable",119],["Success",1,"Encodable",110]],"g":[["Success",0,0]]},{"p":["DistributedActor","==(_:_:)"],"f":[["nonisolated",12],[" ",17],["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["lhs",2],[": ",17],["Self",18],[", ",17],["rhs",2],[": ",17],["Self",18],[") -> ",17],["Bool",18,118]],"s":[["static",12],[" ",17],["func",12],[" ",17],["==",7],[" ",17],["(",17],["Self",18],[", ",17],["Self",18],[") -> ",17],["Bool",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"A distributed actor's hash and equality is implemented by directly delegating to its ``id``.\n\nFor more details see the \"Hashable and Identifiable conformance\" section of ``DistributedActor``."},{"p":["LocalTestingDistributedActorSystem","ActorID"],"f":[["typealias",12],[" ",17],["ActorID",7],[" = ",17],["LocalTestingActorAddress",18,104]],"s":[["typealias",12],[" ",17],["ActorID",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":6},{"p":["LocalTestingDistributedActorSystem","ResultHandler"],"f":[["typealias",12],[" ",17],["ResultHandler",7],[" = ",17],["LocalTestingInvocationResultHandler",18,24]],"s":[["typealias",12],[" ",17],["ResultHandler",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":7},{"p":["LocalTestingDistributedActorSystem","InvocationDecoder"],"f":[["typealias",12],[" ",17],["InvocationDecoder",7],[" = ",17],["LocalTestingInvocationDecoder",18,26]],"s":[["typealias",12],[" ",17],["InvocationDecoder",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":8},{"p":["LocalTestingDistributedActorSystem","InvocationEncoder"],"f":[["typealias",12],[" ",17],["InvocationEncoder",7],[" = ",17],["LocalTestingInvocationEncoder",18,23]],"s":[["typealias",12],[" ",17],["InvocationEncoder",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":9},{"p":["LocalTestingDistributedActorSystem","SerializationRequirement"],"f":[["typealias",12],[" ",17],["SerializationRequirement",7],[" = ",17],["Codable",18,128]],"s":[["typealias",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":10},{"p":["LocalTestingActorAddress"],"f":[["typealias",12],[" ",17],["LocalTestingActorAddress",7],[" = ",17],["LocalTestingActorID",18,22]],"s":[["typealias",12],[" ",17],["LocalTestingActorAddress",7]],"a":{"a":{"d":true,"r":"LocalTestingActorID"},"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}}},{"p":["LocalTestingInvocationDecoder","SerializationRequirement"],"f":[["typealias",12],[" ",17],["SerializationRequirement",7],[" = ",17],["Codable",18,128]],"s":[["typealias",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":11},{"p":["LocalTestingInvocationEncoder","SerializationRequirement"],"f":[["typealias",12],[" ",17],["SerializationRequirement",7],[" = ",17],["Codable",18,128]],"s":[["typealias",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":12},{"p":["LocalTestingInvocationResultHandler","SerializationRequirement"],"f":[["typealias",12],[" ",17],["SerializationRequirement",7],[" = ",17],["Codable",18,128]],"s":[["typealias",12],[" ",17],["SerializationRequirement",7]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"o":13},{"p":["CodingUserInfoKey","actorSystemKey"],"f":[["static",12],[" ",17],["let",12],[" ",17],["actorSystemKey",7],[": ",17],["CodingUserInfoKey",18,123]],"s":[["static",12],[" ",17],["let",12],[" ",17],["actorSystemKey",7],[": ",17],["CodingUserInfoKey",18]],"a":{"iOS":{"i":"16.0"},"macOS":{"i":"13.0"},"tvOS":{"i":"16.0"},"watchOS":{"i":"9.0"}},"d":"Key which is required to be set on a `Decoder`'s `userInfo` while attempting\nto `init(from:)` a `DistributedActor`. The stored value under this key must\nconform to ``DistributedActorSystem``.\n\nForgetting to set this key will result in that initializer throwing, because\nan actor system is required in order to call ``DistributedActor/resolve(id:using:)`` using it."}],"edges":{"conformer":[0,131,[],1,126,[],1,131,[],5,109,[],5,112,[],5,114,[],5,121,[],5,131,[],16,112,[],16,114,[],17,1,[],17,126,[],17,131,[],18,1,[],18,126,[],18,131,[],19,1,[],19,126,[],19,131,[],20,112,[],20,114,[],20,124,[],22,110,[],22,112,[],22,114,[],22,119,[],22,131,[],23,3,[],24,4,[],25,0,[],25,131,[],26,2,[]],"feature":[73,25,115,16,115,20,115,22],"member":[16,18,27,16,28,16,29,16,30,16,31,16,32,16,33,25,34,17,35,18,36,18,37,19,38,5,39,20,40,21,41,22,42,22,43,22,44,17,45,18,46,18,47,19,50,20,51,20,52,21,53,21,54,21,55,21,56,22,57,22,58,19,60,25,61,25,62,25,63,25,64,25,65,25,66,25,73,0,82,5,83,5,84,5,85,22,86,26,87,26,88,26,89,26,90,23,91,23,92,23,93,23,94,23,95,24,96,24,97,24,98,5,99,25,100,25,101,25,102,25,103,25,105,26,106,23,107,24,108,123],"override":[49,122],"requirement":[6,0,7,0,8,0,9,0,10,0,11,2,12,3,13,4,14,5,15,5,48,5,49,5,59,5,67,0,68,0,69,0,70,0,71,0,72,0,74,2,75,2,76,2,77,3,78,3,79,3,80,4,81,4],"defaultImplementation":[82,113]},"sourcemap":[]}