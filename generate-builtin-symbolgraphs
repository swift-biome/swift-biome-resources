#!/usr/bin/python3

import os, subprocess, shutil, itertools

standard_library_modules = (
    'Swift', 
    '_Concurrency', 
    '_Differentiation', 
    'Distributed', 
    'RegexBuilder', 
    '_RegexParser', 
    '_StringProcessing',
)
core_libraries_modules = (
    'Dispatch', 
)


workspace = 'swift'

shutil.rmtree(workspace, ignore_errors = True)
os.mkdir(workspace)
os.chdir(workspace)

for toolchain, tag in (
        ('5.6.2-RELEASE',                       '5.6.2'), 
        ('DEVELOPMENT-SNAPSHOT-2022-04-04-a',   '2022-04-04'), 
        ('DEVELOPMENT-SNAPSHOT-2022-06-26-a',   '2022-06-26'), 
    ):
    swift_symbolgraph_extract = os.path.join(os.environ['SWIFTENV_ROOT'], 
        'versions', 
        toolchain, 
        'usr', 
        'bin', 
        'swift-symbolgraph-extract')
        
    os.mkdir(tag)
    os.chdir(tag)
    
    generated = set()
    for module in itertools.chain(standard_library_modules, core_libraries_modules):
        os.mkdir(module)
        output = subprocess.run((swift_symbolgraph_extract, 
                '-skip-inherited-docs', 
                '-target', 'x86_64-unknown-linux-gnu', 
                '-output-dir', module, 
                '-module-name', module), 
            capture_output = True)
        if output.returncode == 0:
            print('generated documentation for {0}/{1}'.format(tag, module))
            generated.add(module)
        else:
            #print(output.stderr.decode('utf-8'))
            print('failed to generate documentation for {0}/{1}'.format(tag, module))
    
    for package, modules in (
        ('swift-standard-library', standard_library_modules),
        ('swift-core-libraries', core_libraries_modules)):
        with open(package, 'w') as file:
            for module in modules:
                if module in generated:
                    file.write(module)
                    file.write('\n')
    
    os.chdir('..')
        
